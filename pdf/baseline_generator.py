#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
G√©n√©rateur de rapports BASELINE - Analyse fondamentale compl√®te
20-25 pages d'analyse approfondie
"""

import os
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.platypus import Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY

from report_base import BaseReportGenerator

class BaselineReportGenerator(BaseReportGenerator):
    """G√©n√©rateur de rapports BASELINE - Analyse fondamentale compl√®te"""
    
    def __init__(self, symbol, output_path):
        super().__init__(symbol, output_path)
        self.report_type = "BASELINE"
    
    def add_analysis_type_badge(self):
        """Badge sp√©cifique au rapport BASELINE"""
        # Label
        label_style = ParagraphStyle(
            'TypeLabel',
            parent=self.styles['Normal'],
            fontSize=14,
            alignment=TA_CENTER,
            spaceAfter=8,
            textColor=colors.HexColor('#374151'),
            fontName='Helvetica-Bold'
        )
        
        # Style pour le type d'analyse - Bleu pour BASELINE
        analysis_type_style = ParagraphStyle(
            'AnalysisType',
            parent=self.styles['Normal'],
            fontSize=20,
            textColor=colors.white,
            alignment=TA_CENTER,
            spaceAfter=30,
            borderWidth=3,
            borderColor=colors.HexColor('#1d4ed8'),
            borderPadding=18,
            backColor=colors.HexColor('#1d4ed8'),
            fontName='Helvetica-Bold'
        )
        
        self.story.append(Paragraph("TYPE D'ANALYSE DEMAND√â", label_style))
        self.story.append(Paragraph("RAPPORT BASELINE", analysis_type_style))
        
        # Description d√©taill√©e
        info = self.data.get('info', {})
        company_name = info.get('longName', self.symbol)
        
        description_text = f"""
        <b>RAPPORT BASELINE DEMAND√â</b><br/>
        Analyse fondamentale compl√®te de {company_name} ({self.symbol})<br/>
        ‚Ä¢ M√©triques financi√®res essentielles et ratios cl√©s<br/>
        ‚Ä¢ Analyse de la performance historique sur 2 ans<br/>
        ‚Ä¢ Valorisation d√©taill√©e et comparaisons sectorielles<br/>
        ‚Ä¢ Recommandations d'investissement avec objectifs de prix<br/>
        ‚Ä¢ 20-25 pages d'analyse professionnelle approfondie
        """
        
        request_style = ParagraphStyle(
            'RequestSummary',
            parent=self.styles['Normal'],
            fontSize=11,
            alignment=TA_CENTER,
            spaceAfter=25,
            borderWidth=2,
            borderColor=colors.HexColor('#1d4ed8'),
            borderPadding=12,
            backColor=colors.HexColor('#dbeafe'),
            leftIndent=10,
            rightIndent=10
        )
        
        self.story.append(Paragraph(description_text, request_style))
        self.story.append(Spacer(1, 60))
    
    def generate_report(self):
        """G√©n√®re le rapport BASELINE complet"""
        try:
            self.logger.info("üìä G√©n√©ration rapport BASELINE")
            
            # R√©cup√©ration des donn√©es
            if not self.fetch_data():
                return False
            
            # Structure du rapport BASELINE
            self.add_cover_page()
            self.add_table_of_contents()
            self.add_executive_summary()
            self.add_company_overview()
            self.add_financial_analysis()
            self.add_performance_analysis()
            self.add_valuation_analysis()
            self.add_technical_overview()
            self.add_sector_analysis()
            self.add_risk_analysis()
            self.add_recommendations()
            self.add_final_page()
            
            # Construction du PDF
            self.build_pdf()
            self.logger.info(f"‚úÖ Rapport BASELINE g√©n√©r√©: {self.output_path}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration rapport BASELINE: {e}")
            return False
    
    def add_table_of_contents(self):
        """Table des mati√®res sp√©cifique au BASELINE"""
        toc_title_style = ParagraphStyle(
            'TOCTitle',
            parent=self.styles['Heading1'],
            fontSize=20,
            textColor=colors.HexColor('#1d4ed8'),
            alignment=TA_CENTER,
            spaceAfter=30,
            fontName='Helvetica-Bold'
        )
        
        self.story.append(Paragraph("TABLE DES MATI√àRES", toc_title_style))
        
        sections = [
            "1. R√©sum√© Ex√©cutif",
            "2. Vue d'Ensemble de l'Entreprise", 
            "3. Analyse Financi√®re D√©taill√©e",
            "4. Analyse de Performance",
            "5. Analyse de Valorisation",
            "6. Aper√ßu Technique",
            "7. Analyse Sectorielle",
            "8. √âvaluation des Risques",
            "9. Recommandations d'Investissement",
            "10. Conclusion et Contact"
        ]
        
        toc_style = ParagraphStyle(
            'TOCEntry',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=8,
            leftIndent=20
        )
        
        for i, section in enumerate(sections, 3):
            dots = '.' * (60 - len(section))
            self.story.append(Paragraph(f"{section} {dots} {i}", toc_style))
        
        self.story.append(Spacer(1, 40))
        self.story.append(Paragraph("Page", toc_style))
        self.story.append(Spacer(1, 40))
    
    def add_executive_summary(self):
        """R√©sum√© ex√©cutif d√©taill√©"""
        self.add_section_title("1. R√©sum√© Ex√©cutif")
        
        info = self.data.get('info', {})
        hist = self.data.get('history')
        
        # Calculs des m√©triques cl√©s
        current_price = info.get('currentPrice', 0)
        if hist is not None and not hist.empty:
            price_change_1y = ((current_price / hist['Close'].iloc[0]) - 1) * 100 if len(hist) > 0 else 0
            volatility = hist['Close'].pct_change().std() * (252**0.5) * 100
            max_drawdown = ((hist['Close'] / hist['Close'].expanding().max()) - 1).min() * 100
        else:
            price_change_1y = volatility = max_drawdown = 0
        
        # Analyse du momentum
        recommendation = "ACHETER" if price_change_1y > 0 and volatility < 30 else "CONSERVER" if price_change_1y > -10 else "VENDRE"
        
        summary_text = f"""
        <b>Vue d'Ensemble</b>
        
        {info.get('longName', self.symbol)} ({self.symbol}) pr√©sente un profil d'investissement 
        {'attrayant' if price_change_1y > 0 else 'mitig√©'} dans le secteur {info.get('sector', 'N/A')}. 
        Notre analyse fondamentale r√©v√®le {'des fondamentaux solides' if info.get('profitMargins', 0) > 0.10 else 'des fondamentaux √† surveiller'} 
        avec une capitalisation boursi√®re de ${info.get('marketCap', 0):,.0f}.
        
        <b>Points Cl√©s</b>
        
        ‚Ä¢ Performance sur 12 mois: {price_change_1y:+.1f}%
        ‚Ä¢ Volatilit√© annualis√©e: {volatility:.1f}%
        ‚Ä¢ Drawdown maximum: {max_drawdown:.1f}%
        ‚Ä¢ P/E Ratio: {info.get('trailingPE', 'N/A')}
        ‚Ä¢ Marge b√©n√©ficiaire: {(info.get('profitMargins', 0) * 100):.1f}%
        ‚Ä¢ ROE: {(info.get('returnOnEquity', 0) * 100):.1f}%
        
        <b>Recommandation</b>
        
        Sur la base de notre analyse compl√®te, nous recommandons une position <b>{recommendation}</b> 
        sur {self.symbol}. Cette recommandation s'appuie sur l'analyse des fondamentaux financiers, 
        des tendances sectorielles, et du contexte macro√©conomique actuel.
        
        Les investisseurs {'peuvent consid√©rer une allocation de 2-4% du portefeuille' if recommendation == 'ACHETER' 
        else 'devraient maintenir leur position existante' if recommendation == 'CONSERVER' 
        else 'devraient r√©duire leur exposition'} en fonction de leur profil de risque et horizon d'investissement.
        """
        
        self.add_text(summary_text)
        self.story.append(Spacer(1, 20))
    
    def add_company_overview(self):
        """Vue d'ensemble d√©taill√©e de l'entreprise"""
        self.add_section_title("2. Vue d'Ensemble de l'Entreprise")
        
        info = self.data.get('info', {})
        
        self.add_subsection_title("Profil de l'Entreprise")
        
        company_text = f"""
        <b>Description de l'Activit√©</b>
        
        {info.get('longBusinessSummary', f'{info.get("longName", self.symbol)} est une entreprise leader dans son secteur.')}
        
        <b>Informations Cl√©s</b>
        
        L'entreprise op√®re principalement dans le secteur {info.get('sector', 'N/A')}, 
        plus sp√©cifiquement dans l'industrie {info.get('industry', 'N/A')}. 
        Bas√©e √† {info.get('city', 'N/A')}, {info.get('country', '√âtats-Unis')}, 
        elle emploie approximativement {info.get('fullTimeEmployees', 'N/A')} personnes.
        
        <b>Position Concurrentielle</b>
        
        Avec une capitalisation boursi√®re de ${info.get('marketCap', 0):,.0f}, 
        {info.get('longName', self.symbol)} se positionne comme 
        {'un leader majeur' if info.get('marketCap', 0) > 100e9 
        else 'un acteur significatif' if info.get('marketCap', 0) > 10e9 
        else 'une entreprise de taille moyenne'} dans son secteur.
        """
        
        self.add_text(company_text)
        
        # Tableau des m√©triques cl√©s
        self.add_subsection_title("M√©triques Financi√®res Cl√©s")
        
        metrics_data = [
            ['M√©trique', 'Valeur', 'Commentaire'],
            ['Chiffre d\'affaires (TTM)', f"${info.get('totalRevenue', 0):,.0f}", 
             'Revenus sur 12 mois glissants'],
            ['B√©n√©fice net (TTM)', f"${info.get('netIncomeToCommon', 0):,.0f}", 
             'B√©n√©fice attribuable aux actionnaires'],
            ['Marge b√©n√©ficiaire', f"{(info.get('profitMargins', 0) * 100):.1f}%", 
             'Efficacit√© de conversion des revenus'],
            ['ROE', f"{(info.get('returnOnEquity', 0) * 100):.1f}%", 
             'Retour sur capitaux propres'],
            ['Ratio d\'endettement', f"{info.get('debtToEquity', 'N/A')}", 
             'Niveau d\'endettement relatif'],
            ['Ratio de liquidit√©', f"{info.get('currentRatio', 'N/A')}", 
             'Capacit√© √† honorer les dettes court terme']
        ]
        
        table = Table(metrics_data, colWidths=[150, 100, 200])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1d4ed8')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8fafc')])
        ]))
        
        self.story.append(table)
        self.story.append(Spacer(1, 20))
    
    def add_financial_analysis(self):
        """Analyse financi√®re d√©taill√©e"""
        self.add_section_title("3. Analyse Financi√®re D√©taill√©e")
        
        info = self.data.get('info', {})
        
        self.add_subsection_title("Profitabilit√© et Marges")
        
        profit_analysis = f"""
        <b>Analyse des Marges</b>
        
        L'entreprise affiche une marge b√©n√©ficiaire de {(info.get('profitMargins', 0) * 100):.1f}%, 
        ce qui est {'excellent' if info.get('profitMargins', 0) > 0.20 
        else 'bon' if info.get('profitMargins', 0) > 0.10 
        else 'acceptable' if info.get('profitMargins', 0) > 0.05 
        else 'pr√©occupant'} pour ce secteur d'activit√©.
        
        La marge EBITDA de {(info.get('ebitdaMargins', 0) * 100):.1f}% d√©montre 
        {'une excellente' if info.get('ebitdaMargins', 0) > 0.25 
        else 'une bonne' if info.get('ebitdaMargins', 0) > 0.15 
        else 'une'} capacit√© √† g√©n√©rer des flux de tr√©sorerie op√©rationnels.
        
        <b>Efficacit√© Op√©rationnelle</b>
        
        Le retour sur capitaux propres (ROE) de {(info.get('returnOnEquity', 0) * 100):.1f}% 
        indique {'une gestion tr√®s efficace' if info.get('returnOnEquity', 0) > 0.20 
        else 'une gestion efficace' if info.get('returnOnEquity', 0) > 0.15 
        else 'une gestion correcte' if info.get('returnOnEquity', 0) > 0.10 
        else 'des d√©fis de gestion'} des capitaux propres.
        
        Le retour sur actifs (ROA) de {(info.get('returnOnAssets', 0) * 100):.1f}% 
        refl√®te l'efficacit√© d'utilisation des actifs pour g√©n√©rer des b√©n√©fices.
        """
        
        self.add_text(profit_analysis)
        
        # Graphique des m√©triques financi√®res
        self.create_financial_metrics_chart()
        
        self.add_subsection_title("Structure Financi√®re")
        
        # Analyse du niveau d'endettement
        debt_level = 'un niveau d\'endettement √©lev√©' if isinstance(info.get('debtToEquity'), (int, float)) and info.get('debtToEquity') > 1 else 'un niveau d\'endettement mod√©r√©' if isinstance(info.get('debtToEquity'), (int, float)) and info.get('debtToEquity') > 0.5 else 'un niveau d\'endettement faible'
        debt_assessment = 'n√©cessite une surveillance' if isinstance(info.get('debtToEquity'), (int, float)) and info.get('debtToEquity') > 1 else 'reste g√©rable'
        
        # Analyse de la liquidit√©
        liquidity_level = 'assure une excellente' if isinstance(info.get('currentRatio'), (int, float)) and info.get('currentRatio') > 2 else 'assure une bonne' if isinstance(info.get('currentRatio'), (int, float)) and info.get('currentRatio') > 1.5 else 'indique une'
        
        # Analyse des flux de tr√©sorerie
        cashflow_assessment = 'd√©montrent une solide g√©n√©ration' if info.get('operatingCashflow', 0) > 0 else 'r√©v√®lent des d√©fis dans la g√©n√©ration'
        
        structure_analysis = f"""
        <b>Endettement et Liquidit√©</b>
        
        Avec un ratio d'endettement de {info.get('debtToEquity', 'N/A')}, l'entreprise pr√©sente 
        {debt_level} qui {debt_assessment}.
        
        Le ratio de liquidit√© courante de {info.get('currentRatio', 'N/A')} 
        {liquidity_level} capacit√© √† honorer les dettes √† court terme.
        
        <b>Flux de Tr√©sorerie</b>
        
        Les flux de tr√©sorerie op√©rationnels de ${info.get('operatingCashflow', 0):,.0f} 
        {cashflow_assessment} de liquidit√©s par l'activit√© principale.
        """
        
        self.add_text(structure_analysis)
    
    def add_performance_analysis(self):
        """Analyse de performance d√©taill√©e"""
        self.add_section_title("4. Analyse de Performance")
        
        hist = self.data.get('history')
        if hist is None or hist.empty:
            self.add_text("Donn√©es historiques insuffisantes pour l'analyse de performance.")
            return
        
        self.add_subsection_title("Performance des Prix")
        
        # Calculs de performance
        current_price = hist['Close'].iloc[-1]
        
        # Performances sur diff√©rentes p√©riodes
        returns_1w = ((current_price / hist['Close'].iloc[-5]) - 1) * 100 if len(hist) >= 5 else 0
        returns_1m = ((current_price / hist['Close'].iloc[-21]) - 1) * 100 if len(hist) >= 21 else 0
        returns_3m = ((current_price / hist['Close'].iloc[-63]) - 1) * 100 if len(hist) >= 63 else 0
        returns_6m = ((current_price / hist['Close'].iloc[-126]) - 1) * 100 if len(hist) >= 126 else 0
        returns_1y = ((current_price / hist['Close'].iloc[-252]) - 1) * 100 if len(hist) >= 252 else 0
        returns_2y = ((current_price / hist['Close'].iloc[0]) - 1) * 100 if len(hist) > 0 else 0
        
        performance_text = f"""
        <b>Performances Historiques</b>
        
        L'analyse de la performance historique r√©v√®le les rendements suivants :
        
        ‚Ä¢ 1 semaine : {returns_1w:+.1f}%
        ‚Ä¢ 1 mois : {returns_1m:+.1f}%
        ‚Ä¢ 3 mois : {returns_3m:+.1f}%
        ‚Ä¢ 6 mois : {returns_6m:+.1f}%
        ‚Ä¢ 1 an : {returns_1y:+.1f}%
        ‚Ä¢ 2 ans : {returns_2y:+.1f}%
        
        La tendance {'haussi√®re' if returns_1y > 0 else 'baissi√®re'} sur 12 mois 
        {'se confirme' if (returns_1y > 0 and returns_3m > 0) or (returns_1y < 0 and returns_3m < 0) 
        else 'montre des signes de retournement'} sur les p√©riodes plus courtes.
        
        <b>Volatilit√© et Risque</b>
        
        La volatilit√© annualis√©e de {hist['Close'].pct_change().std() * (252**0.5) * 100:.1f}% 
        place cette action dans la cat√©gorie {'√† risque √©lev√©' if hist['Close'].pct_change().std() * (252**0.5) * 100 > 40 
        else '√† risque mod√©r√©' if hist['Close'].pct_change().std() * (252**0.5) * 100 > 25 
        else '√† risque relativement faible'}.
        """
        
        self.add_text(performance_text)
        
        # Graphique de performance
        self.create_performance_chart()
        
        # Analyse des volumes
        self.add_subsection_title("Analyse des Volumes")
        
        avg_volume = hist['Volume'].mean()
        recent_volume = hist['Volume'].tail(10).mean()
        
        volume_analysis = f"""
        <b>Tendances de Volume</b>
        
        Le volume moyen de transactions s'√©tablit √† {avg_volume:,.0f} actions par jour. 
        Sur les 10 derni√®res s√©ances, le volume moyen de {recent_volume:,.0f} actions 
        {'d√©passe' if recent_volume > avg_volume * 1.2 
        else 'est proche de' if recent_volume > avg_volume * 0.8 
        else 'reste en-dessous de'} la moyenne historique, 
        {'sugg√©rant un int√©r√™t accru' if recent_volume > avg_volume * 1.2 
        else 'indiquant une activit√© normale' if recent_volume > avg_volume * 0.8 
        else 'refl√©tant une activit√© r√©duite'}.
        
        Cette √©volution du volume {'confirme' if (recent_volume > avg_volume and returns_1m > 0) 
        or (recent_volume < avg_volume and returns_1m < 0) 
        else 'diverge de'} la tendance r√©cente des prix.
        """
        
        self.add_text(volume_analysis)
        
        # Graphique des volumes
        self.create_volume_chart()
    
    def add_valuation_analysis(self):
        """Analyse de valorisation compl√®te"""
        self.add_section_title("5. Analyse de Valorisation")
        
        info = self.data.get('info', {})
        hist = self.data.get('history')
        
        self.add_subsection_title("Multiples de Valorisation")
        
        # Ratios de valorisation
        pe_ratio = info.get('trailingPE', None)
        peg_ratio = info.get('pegRatio', None)
        pb_ratio = info.get('priceToBook', None)
        ps_ratio = info.get('priceToSalesTrailing12Months', None)
        
        valuation_text = f"""
        <b>Ratios de Valorisation Actuels</b>
        
        ‚Ä¢ P/E Ratio: {pe_ratio if pe_ratio else 'N/A'}
        ‚Ä¢ PEG Ratio: {peg_ratio if peg_ratio else 'N/A'}
        ‚Ä¢ P/B Ratio: {pb_ratio if pb_ratio else 'N/A'}
        ‚Ä¢ P/S Ratio: {ps_ratio if ps_ratio else 'N/A'}
        
        {f'Le ratio P/E de {pe_ratio:.1f} indique une valorisation {"√©lev√©e" if pe_ratio > 25 else "raisonnable" if pe_ratio > 15 else "attractive"} par rapport aux b√©n√©fices.' if pe_ratio else 'Ratio P/E non disponible.'}
        
        {f'Le ratio PEG de {peg_ratio:.2f} {"sugg√®re une sur√©valuation" if peg_ratio > 1.5 else "indique une valorisation √©quilibr√©e" if peg_ratio > 0.8 else "r√©v√®le une valorisation attractive"} compte tenu des perspectives de croissance.' if peg_ratio else 'Ratio PEG non disponible.'}
        
        <b>Objectifs de Prix</b>
        
        Sur la base de notre analyse des multiples sectoriels et des perspectives de croissance, 
        nous √©tablissons les objectifs de prix suivants :
        """
        
        # Calcul d'objectifs de prix
        current_price = info.get('currentPrice', 0)
        if pe_ratio and current_price:
            conservative_target = current_price * 1.10
            optimistic_target = current_price * 1.25
            
            targets_text = f"""
            ‚Ä¢ <b>Objectif conservateur (12 mois) :</b> ${conservative_target:.2f} (+{((conservative_target/current_price)-1)*100:.1f}%)
            ‚Ä¢ <b>Objectif optimiste (12 mois) :</b> ${optimistic_target:.2f} (+{((optimistic_target/current_price)-1)*100:.1f}%)
            
            Ces objectifs sont bas√©s sur l'√©volution attendue des fondamentaux et 
            l'expansion/compression potentielle des multiples de valorisation.
            """
            valuation_text += targets_text
        
        self.add_text(valuation_text)
    
    def add_technical_overview(self):
        """Aper√ßu technique simplifi√© pour BASELINE"""
        self.add_section_title("6. Aper√ßu Technique")
        
        hist = self.data.get('history')
        if hist is None or hist.empty:
            return
        
        # Calcul des moyennes mobiles
        hist['MA20'] = hist['Close'].rolling(window=20).mean()
        hist['MA50'] = hist['Close'].rolling(window=50).mean()
        hist['MA200'] = hist['Close'].rolling(window=200).mean()
        
        current_price = hist['Close'].iloc[-1]
        ma20 = hist['MA20'].iloc[-1]
        ma50 = hist['MA50'].iloc[-1] 
        ma200 = hist['MA200'].iloc[-1]
        
        technical_text = f"""
        <b>Signaux des Moyennes Mobiles</b>
        
        Le prix actuel de ${current_price:.2f} se situe :
        ‚Ä¢ {'Au-dessus' if current_price > ma20 else 'En-dessous'} de la MA20 (${ma20:.2f}) - Tendance court terme {'haussi√®re' if current_price > ma20 else 'baissi√®re'}
        ‚Ä¢ {'Au-dessus' if current_price > ma50 else 'En-dessous'} de la MA50 (${ma50:.2f}) - Tendance moyen terme {'haussi√®re' if current_price > ma50 else 'baissi√®re'}
        ‚Ä¢ {'Au-dessus' if current_price > ma200 else 'En-dessous'} de la MA200 (${ma200:.2f}) - Tendance long terme {'haussi√®re' if current_price > ma200 else 'baissi√®re'}
        
        La configuration technique {'supporte' if current_price > ma50 else 'ne supporte pas'} 
        notre recommandation fondamentale.
        """
        
        self.add_text(technical_text)
        
        # Graphique des moyennes mobiles
        self.create_moving_averages_chart()
    
    def add_sector_analysis(self):
        """Analyse sectorielle"""
        self.add_section_title("7. Analyse Sectorielle")
        
        info = self.data.get('info', {})
        sector = info.get('sector', 'N/A')
        industry = info.get('industry', 'N/A')
        
        sector_text = f"""
        <b>Positionnement Sectoriel</b>
        
        {self.symbol} op√®re dans le secteur {sector}, sp√©cifiquement dans l'industrie {industry}. 
        Ce secteur b√©n√©ficie actuellement {'de tendances favorables' if sector in ['Technology', 'Healthcare', 'Consumer Discretionary'] 
        else 'de conditions mitig√©es'} li√©es aux √©volutions technologiques et √©conomiques.
        
        <b>Dynamiques Sectorielles</b>
        
        Les facteurs cl√©s influen√ßant ce secteur incluent :
        ‚Ä¢ L'innovation technologique et la transformation digitale
        ‚Ä¢ L'√©volution de la demande des consommateurs
        ‚Ä¢ Les politiques r√©glementaires et fiscales
        ‚Ä¢ La concurrence et les barri√®res √† l'entr√©e
        
        L'entreprise b√©n√©ficie d'une position solide gr√¢ce √† sa taille et ses ressources.
        """
        
        self.add_text(sector_text)
    
    def add_risk_analysis(self):
        """Analyse des risques"""
        self.add_section_title("8. √âvaluation des Risques")
        
        info = self.data.get('info', {})
        hist = self.data.get('history')
        
        # Calcul des m√©triques de risque
        if hist is not None and not hist.empty:
            volatility = hist['Close'].pct_change().std() * (252**0.5) * 100
            var_95 = hist['Close'].pct_change().quantile(0.05) * 100
            max_drawdown = ((hist['Close'] / hist['Close'].expanding().max()) - 1).min() * 100
        else:
            volatility = var_95 = max_drawdown = 0
        
        risk_text = f"""
        <b>Profil de Risque Quantitatif</b>
        
        ‚Ä¢ <b>Volatilit√© annualis√©e :</b> {volatility:.1f}%
        ‚Ä¢ <b>VaR 95% (quotidien) :</b> {var_95:.1f}%
        ‚Ä¢ <b>Drawdown maximum :</b> {max_drawdown:.1f}%
        
        Ce profil de risque classe l'investissement comme 
        {'√† risque √©lev√©' if volatility > 35 
        else '√† risque mod√©r√©-√©lev√©' if volatility > 25 
        else '√† risque mod√©r√©' if volatility > 15 
        else '√† risque relativement faible'}.
        
        <b>Risques Sp√©cifiques</b>
        
        <b>Risques Op√©rationnels :</b>
        ‚Ä¢ D√©pendance aux cycles √©conomiques
        ‚Ä¢ Concurrence sectorielle intense
        ‚Ä¢ D√©fis d'innovation et de R&D
        
        <b>Risques Financiers :</b>
        ‚Ä¢ Niveau d'endettement : {info.get('debtToEquity', 'N/A')}
        ‚Ä¢ Concentration g√©ographique
        ‚Ä¢ Exposition aux devises
        
        <b>Risques R√©glementaires :</b>
        ‚Ä¢ √âvolution des r√©gulations sectorielles
        ‚Ä¢ Politiques fiscales
        ‚Ä¢ Standards ESG
        
        <b>Gestion des Risques Recommand√©e</b>
        
        Nous recommandons une allocation {'prudente (1-3% du portefeuille)' if volatility > 30 
        else 'mod√©r√©e (3-5% du portefeuille)' if volatility > 20 
        else 'standard (5-8% du portefeuille)'} 
        avec un horizon d'investissement {'long terme (3+ ans)' if volatility > 25 else 'moyen-long terme (2+ ans)'}.
        """
        
        self.add_text(risk_text)
    
    def add_recommendations(self):
        """Recommandations d'investissement"""
        self.add_section_title("9. Recommandations d'Investissement")
        
        info = self.data.get('info', {})
        hist = self.data.get('history')
        
        # Synth√®se pour la recommandation
        current_price = info.get('currentPrice', 0)
        pe_ratio = info.get('trailingPE', 20)
        profit_margin = info.get('profitMargins', 0)
        roe = info.get('returnOnEquity', 0)
        
        if hist is not None and not hist.empty:
            returns_1y = ((current_price / hist['Close'].iloc[0]) - 1) * 100 if len(hist) > 0 else 0
        else:
            returns_1y = 0
        
        # Score de recommandation (simplifi√©)
        score = 0
        if returns_1y > 0: score += 1
        if pe_ratio and pe_ratio < 25: score += 1
        if profit_margin > 0.10: score += 1
        if roe > 0.15: score += 1
        
        if score >= 3:
            recommendation = "ACHETER"
            confidence = "Forte"
        elif score >= 2:
            recommendation = "CONSERVER"
            confidence = "Mod√©r√©e"
        else:
            recommendation = "VENDRE"
            confidence = "Faible"
        
        # D√©finition du plan d'action selon la recommandation
        if recommendation == 'ACHETER':
            action_plan = "‚Ä¢ Initier une position progressive sur 2-3 mois<br/>‚Ä¢ Allocation recommand√©e : 3-5% du portefeuille<br/>‚Ä¢ Horizon d'investissement : 12-24 mois<br/>‚Ä¢ Stop-loss sugg√©r√© : -15% depuis le point d'entr√©e"
        elif recommendation == 'CONSERVER':
            action_plan = "‚Ä¢ Maintenir la position actuelle<br/>‚Ä¢ Surveiller les prochains r√©sultats trimestriels<br/>‚Ä¢ R√©√©valuer en cas de changement fondamental<br/>‚Ä¢ Prendre des b√©n√©fices partiels si +20%"
        else:
            action_plan = "‚Ä¢ R√©duire progressivement la position<br/>‚Ä¢ Sortie recommand√©e sur rebond technique<br/>‚Ä¢ R√©investir dans des alternatives plus attractives<br/>‚Ä¢ Limiter les pertes suppl√©mentaires"
        
        recommendations_text = f"""
        <b>Recommandation Principale : {recommendation}</b>
        
        Niveau de confiance : {confidence}
        
        <b>Justification</b>
        
        Cette recommandation s'appuie sur :
        ‚Ä¢ Analyse fondamentale : {'Positive' if profit_margin > 0.10 and roe > 0.15 else 'Mitig√©e'}
        ‚Ä¢ Performance r√©cente : {'Satisfaisante' if returns_1y > 0 else 'D√©cevante'}
        ‚Ä¢ Valorisation : {'Attractive' if pe_ratio and pe_ratio < 20 else 'Raisonnable' if pe_ratio and pe_ratio < 25 else '√âlev√©e'}
        ‚Ä¢ Contexte sectoriel : {'Favorable' if info.get('sector') in ['Technology', 'Healthcare'] else 'Neutre'}
        
        <b>Plan d'Action Sugg√©r√©</b>
        
        {action_plan}
        
        <b>Catalyseurs √† Surveiller</b>
        
        ‚Ä¢ Publication des r√©sultats trimestriels
        ‚Ä¢ Annonces de nouveaux produits/services
        ‚Ä¢ √âvolution de la guidance manag√©riale
        ‚Ä¢ Changements dans l'environnement concurrentiel
        ‚Ä¢ D√©veloppements macro√©conomiques sectoriels
        
        <b>R√©vision de la Recommandation</b>
        
        Cette recommandation sera r√©vis√©e :
        ‚Ä¢ Trimestriellement lors des publications de r√©sultats
        ‚Ä¢ En cas d'√©volution significative (+/-15%) du cours
        ‚Ä¢ Suite √† des changements fondamentaux majeurs
        ‚Ä¢ Lors de modifications du contexte macro√©conomique
        """
        
        self.add_text(recommendations_text)
    
    # M√©thodes pour cr√©er les graphiques
    def create_financial_metrics_chart(self):
        """Cr√©e un graphique des m√©triques financi√®res"""
        try:
            info = self.data.get('info', {})
            
            metrics = {
                'Marge Profit': info.get('profitMargins', 0) * 100,
                'Marge EBITDA': info.get('ebitdaMargins', 0) * 100,
                'ROE': info.get('returnOnEquity', 0) * 100,
                'ROA': info.get('returnOnAssets', 0) * 100
            }
            
            plt.figure(figsize=(10, 6))
            bars = plt.bar(metrics.keys(), metrics.values(), color=['#1d4ed8', '#3b82f6', '#60a5fa', '#93c5fd'])
            
            plt.title(f'M√©triques Financi√®res Cl√©s - {self.symbol}', fontsize=14, fontweight='bold')
            plt.ylabel('Pourcentage (%)')
            plt.xticks(rotation=45)
            
            # Ajouter les valeurs sur les barres
            for bar, value in zip(bars, metrics.values()):
                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                        f'{value:.1f}%', ha='center', va='bottom')
            
            plt.tight_layout()
            chart_path = os.path.join(self.charts_dir, 'financial_metrics.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique m√©triques financi√®res: {e}")
    
    def create_performance_chart(self):
        """Cr√©e un graphique de performance historique"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            plt.figure(figsize=(12, 8))
            
            # Prix et volume
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10), 
                                         gridspec_kw={'height_ratios': [3, 1]})
            
            # Prix
            ax1.plot(hist.index, hist['Close'], linewidth=2, color='#1d4ed8', label='Prix de cl√¥ture')
            ax1.fill_between(hist.index, hist['Low'], hist['High'], alpha=0.3, color='#93c5fd')
            ax1.set_title(f'Performance Historique - {self.symbol}', fontsize=14, fontweight='bold')
            ax1.set_ylabel('Prix ($)')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # Volume
            ax2.bar(hist.index, hist['Volume'], alpha=0.7, color='#6b7280')
            ax2.set_title('Volume des Transactions')
            ax2.set_ylabel('Volume')
            ax2.set_xlabel('Date')
            
            plt.tight_layout()
            chart_path = os.path.join(self.charts_dir, 'performance_history.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path, height=6*inch)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique performance: {e}")
    
    def create_volume_chart(self):
        """Cr√©e un graphique d'analyse des volumes"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            plt.figure(figsize=(12, 6))
            
            # Volume avec moyenne mobile
            hist['Volume_MA20'] = hist['Volume'].rolling(window=20).mean()
            
            plt.bar(hist.index, hist['Volume'], alpha=0.6, color='#6b7280', label='Volume quotidien')
            plt.plot(hist.index, hist['Volume_MA20'], color='#dc2626', linewidth=2, label='Moyenne mobile 20j')
            
            plt.title(f'Analyse des Volumes - {self.symbol}', fontsize=14, fontweight='bold')
            plt.ylabel('Volume')
            plt.xlabel('Date')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            plt.tight_layout()
            chart_path = os.path.join(self.charts_dir, 'volume_analysis.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique volumes: {e}")
    
    def create_moving_averages_chart(self):
        """Cr√©e un graphique des moyennes mobiles"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            plt.figure(figsize=(12, 8))
            
            # Prix et moyennes mobiles
            plt.plot(hist.index, hist['Close'], label='Prix de cl√¥ture', linewidth=2, color='#1d4ed8')
            plt.plot(hist.index, hist['MA20'], label='MA 20 jours', alpha=0.8, color='#f59e0b')
            plt.plot(hist.index, hist['MA50'], label='MA 50 jours', alpha=0.8, color='#10b981')
            plt.plot(hist.index, hist['MA200'], label='MA 200 jours', alpha=0.8, color='#dc2626')
            
            plt.title(f'Analyse des Moyennes Mobiles - {self.symbol}', fontsize=14, fontweight='bold')
            plt.ylabel('Prix ($)')
            plt.xlabel('Date')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            plt.tight_layout()
            chart_path = os.path.join(self.charts_dir, 'moving_averages.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique moyennes mobiles: {e}")


def generate_baseline_report(symbol: str, output_path: str) -> bool:
    """Fonction principale pour g√©n√©rer un rapport BASELINE"""
    generator = BaselineReportGenerator(symbol, output_path)
    return generator.generate_report()


if __name__ == "__main__":
    if len(sys.argv) == 3:
        symbol = sys.argv[1]
        output_path = sys.argv[2]
        
        success = generate_baseline_report(symbol, output_path)
        
        if success:
            print(f"‚úÖ Rapport BASELINE g√©n√©r√©: {output_path}")
        else:
            print("‚ùå Erreur lors de la g√©n√©ration")
    else:
        print("Usage: python baseline_generator.py <SYMBOL> <OUTPUT_PATH>")