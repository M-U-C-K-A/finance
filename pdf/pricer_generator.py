#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
G√©n√©rateur de rapport PRICER - √âvaluation et pricing d'options
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import yfinance as yf
from reportlab.lib import colors
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.platypus import Paragraph, Spacer, PageBreak, Table, TableStyle
from report_base import BaseReportGenerator

class PricerReportGenerator(BaseReportGenerator):
    """G√©n√©rateur de rapports de pricing et √©valuation d'options"""
    
    def __init__(self, symbol, output_path):
        super().__init__(symbol, output_path)
        self.report_type = "PRICER"
        
    def add_analysis_type_badge(self):
        """Ajoute le badge de type d'analyse sur la page de garde"""
        badge_style = ParagraphStyle(
            'BadgeStyle',
            parent=self.styles['Normal'],
            fontSize=16,
            textColor=colors.white,
            alignment=TA_CENTER,
            spaceAfter=30,
            fontName='Helvetica-Bold',
            backColor=colors.HexColor('#dc2626'),
            borderWidth=2,
            borderColor=colors.HexColor('#dc2626'),
            borderPadding=15,
            borderRadius=10
        )
        
        request_summary = f"√âvaluation et pricing d'options sur {self.symbol}"
        self.story.append(Paragraph(f"Type d'Analyse : PRICER", badge_style))
        
        summary_style = ParagraphStyle(
            'SummaryStyle',
            parent=self.styles['Normal'],
            fontSize=12,
            textColor=colors.HexColor('#374151'),
            alignment=TA_CENTER,
            spaceAfter=40,
            fontStyle='italic'
        )
        self.story.append(Paragraph(request_summary, summary_style))
    
    def generate_report(self):
        """G√©n√®re le rapport de pricing"""
        self.logger.info(f"üìä G√©n√©ration rapport PRICER")
        
        # R√©cup√©ration des donn√©es
        if not self.fetch_options_data():
            return False
        
        # Construction du rapport
        self.add_cover_page()
        self.add_table_of_contents()
        self.add_executive_summary()
        self.add_underlying_analysis()
        self.add_volatility_analysis()
        self.add_options_pricing_models()
        self.add_greeks_analysis()
        self.add_strategy_recommendations()
        self.add_risk_scenarios()
        self.add_market_making_insights()
        self.add_final_page()
        
        # Construction du PDF
        self.build_pdf()
        self.logger.info(f"‚úÖ Rapport PRICER g√©n√©r√©: {self.output_path}")
        return True
    
    def fetch_options_data(self):
        """R√©cup√®re les donn√©es d'options et de volatilit√©"""
        try:
            self.logger.info(f"üìä R√©cup√©ration donn√©es options pour {self.symbol}")
            
            # Donn√©es de base
            if not self.fetch_data():
                return False
            
            ticker = yf.Ticker(self.symbol)
            
            # Donn√©es d'options
            try:
                self.data['options_dates'] = ticker.options
                if self.data['options_dates']:
                    # Prendre la premi√®re date d'expiration disponible
                    first_expiry = self.data['options_dates'][0]
                    options_chain = ticker.option_chain(first_expiry)
                    self.data['calls'] = options_chain.calls
                    self.data['puts'] = options_chain.puts
                    self.data['expiry_date'] = first_expiry
                else:
                    self.data['calls'] = pd.DataFrame()
                    self.data['puts'] = pd.DataFrame()
            except:
                self.logger.warning("Donn√©es d'options indisponibles")
                self.data['calls'] = pd.DataFrame()
                self.data['puts'] = pd.DataFrame()
            
            # Calcul de la volatilit√© historique
            hist = self.data.get('history')
            if hist is not None and not hist.empty:
                returns = hist['Close'].pct_change().dropna()
                self.data['historical_volatility'] = returns.std() * np.sqrt(252)
            else:
                self.data['historical_volatility'] = 0.25  # Default
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration donn√©es options: {e}")
            return False
    
    def add_table_of_contents(self):
        """Ajoute une table des mati√®res"""
        self.add_section_title("Table des Mati√®res")
        
        toc_data = [
            ["1.", "R√©sum√© Ex√©cutif", "3"],
            ["2.", "Analyse du Sous-Jacent", "4"],
            ["3.", "Analyse de Volatilit√©", "6"],
            ["4.", "Mod√®les de Pricing", "8"],
            ["5.", "Analyse des Greeks", "11"],
            ["6.", "Recommandations Strat√©giques", "14"],
            ["7.", "Sc√©narios de Risque", "16"],
            ["8.", "Insights Market Making", "18"]
        ]
        
        toc_table = Table(toc_data, colWidths=[30, 350, 50])
        toc_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        self.story.append(toc_table)
        self.story.append(PageBreak())
    
    def add_executive_summary(self):
        """Ajoute le r√©sum√© ex√©cutif"""
        self.add_section_title("1. R√©sum√© Ex√©cutif")
        
        info = self.data.get('info', {})
        current_price = info.get('currentPrice', 0)
        historical_vol = self.data.get('historical_volatility', 0)
        
        summary_text = f"""
        <b>Analyse de Pricing d'Options - {self.symbol}</b>
        
        Cette analyse de pricing se concentre sur l'√©valuation des options sur {info.get('longName', self.symbol)} 
        en utilisant des mod√®les quantitatifs sophistiqu√©s et l'analyse de la microstructure des options.
        
        <b>M√©triques Cl√©s du Sous-Jacent</b>
        
        ‚Ä¢ Prix actuel : ${current_price:.2f}
        ‚Ä¢ Volatilit√© historique (1 an) : {historical_vol*100:.1f}%
        ‚Ä¢ Secteur : {info.get('sector', 'N/A')}
        ‚Ä¢ Capitalisation : ${info.get('marketCap', 0):,.0f}
        
        <b>Objectifs de l'Analyse</b>
        
        ‚Ä¢ **√âvaluation Fair Value** : Pricing th√©orique vs prix de march√©
        ‚Ä¢ **Opportunit√©s d'Arbitrage** : Identification de mispricing
        ‚Ä¢ **Strat√©gies Optimales** : Recommandations tactiques selon market conditions
        ‚Ä¢ **Gestion du Risque** : Hedging et Greeks management
        
        <b>M√©thodologie</b>
        
        Cette analyse utilise les mod√®les Black-Scholes, binomial trees, et Monte Carlo 
        pour fournir une √©valuation compl√®te du pricing des options et identifier 
        les opportunit√©s de trading optimales.
        
        <b>Horizon d'Analyse</b>
        
        Focus sur les options avec √©ch√©ances de 1 √† 6 mois, optimales pour les 
        strat√©gies de trading actif et de hedging tactique.
        """
        
        self.add_text(summary_text)
        self.story.append(PageBreak())
    
    def add_underlying_analysis(self):
        """Ajoute l'analyse du sous-jacent"""
        self.add_section_title("2. Analyse du Sous-Jacent")
        
        info = self.data.get('info', {})
        hist = self.data.get('history')
        
        # Calculs pour l'analyse du sous-jacent
        current_price = info.get('currentPrice', 0)
        beta = info.get('beta', 1.0)
        
        underlying_text = f"""
        <b>Caract√©ristiques du Sous-Jacent</b>
        
        ‚Ä¢ **Symbole** : {self.symbol}
        ‚Ä¢ **Prix Spot** : ${current_price:.2f}
        ‚Ä¢ **Beta** : {beta:.2f}
        ‚Ä¢ **Secteur** : {info.get('sector', 'N/A')}
        ‚Ä¢ **Industrie** : {info.get('industry', 'N/A')}
        
        <b>Analyse de Liquidit√©</b>
        
        La liquidit√© du sous-jacent est cruciale pour l'√©valuation des options :
        
        ‚Ä¢ **Volume moyen quotidien** : Indicateur de liquidit√© primaire
        ‚Ä¢ **Bid-Ask Spread** : Co√ªt de transaction et market impact
        ‚Ä¢ **Market Cap** : ${info.get('marketCap', 0):,.0f}
        ‚Ä¢ **Float** : Actions disponibles pour le trading
        
        <b>Patterns de Trading</b>
        
        ‚Ä¢ **Horaires de liquidit√©** : Sessions les plus actives
        ‚Ä¢ **Saisonnalit√©** : Patterns r√©currents mensuels/trimestriels
        ‚Ä¢ **Corporate Events** : Earnings, dividendes, splits
        ‚Ä¢ **News Sensitivity** : R√©action aux annonces et √©v√©nements
        
        <b>Implications pour le Pricing d'Options</b>
        
        ‚Ä¢ **Liquidit√© √©lev√©e** : Spreads serr√©s, pricing efficace
        ‚Ä¢ **Volatilit√© pr√©visible** : Mod√®les de pricing plus fiables
        ‚Ä¢ **√âv√©nements programm√©s** : Ajustements de volatilit√© implicite
        ‚Ä¢ **Correlation patterns** : Impact sur les strat√©gies spread
        """
        
        self.add_text(underlying_text)
        self.story.append(PageBreak())
    
    def add_volatility_analysis(self):
        """Ajoute l'analyse de volatilit√©"""
        self.add_section_title("3. Analyse de Volatilit√©")
        
        historical_vol = self.data.get('historical_volatility', 0)
        
        # Calculs de volatilit√© avanc√©s
        hist = self.data.get('history')
        if hist is not None and not hist.empty:
            returns = hist['Close'].pct_change().dropna()
            vol_30d = returns.tail(30).std() * np.sqrt(252) if len(returns) >= 30 else historical_vol
            vol_90d = returns.tail(90).std() * np.sqrt(252) if len(returns) >= 90 else historical_vol
        else:
            vol_30d = vol_90d = historical_vol
        
        volatility_text = f"""
        <b>Structure de Volatilit√©</b>
        
        ‚Ä¢ **Volatilit√© Historique 30j** : {vol_30d*100:.1f}%
        ‚Ä¢ **Volatilit√© Historique 90j** : {vol_90d*100:.1f}%
        ‚Ä¢ **Volatilit√© Historique 252j** : {historical_vol*100:.1f}%
        
        <b>Volatilit√© Implicite vs Historique</b>
        
        La comparaison entre volatilit√© implicite (prix des options) et volatilit√© 
        historique (mouvement r√©el du sous-jacent) r√©v√®le des opportunit√©s :
        
        ‚Ä¢ **IV > HV** : Options potentiellement sur√©valu√©es (vente attractive)
        ‚Ä¢ **IV < HV** : Options potentiellement sous-√©valu√©es (achat attractive)
        ‚Ä¢ **IV Skew** : Diff√©rences entre calls et puts (sentiment directionnel)
        ‚Ä¢ **Term Structure** : Volatilit√© selon les √©ch√©ances
        
        <b>Mod√®les de Volatilit√©</b>
        
        ‚Ä¢ **GARCH Models** : Pr√©vision de volatilit√© conditionnelle
        ‚Ä¢ **Stochastic Volatility** : Heston, Bates models
        ‚Ä¢ **Realized Volatility** : Mesures haute fr√©quence
        ‚Ä¢ **Jump Diffusion** : Mod√®les avec sauts de prix
        
        <b>Volatility Trading Strategies</b>
        
        ‚Ä¢ **Long Volatility** : Straddles, strangles sur √©v√©nements
        ‚Ä¢ **Short Volatility** : Vente d'options sur volatilit√© √©lev√©e
        ‚Ä¢ **Volatility Arbitrage** : Exploitation des diff√©rences IV vs HV
        ‚Ä¢ **Calendar Spreads** : Exploitation term structure volatilit√©
        """
        
        self.add_text(volatility_text)
        self.story.append(PageBreak())
    
    def add_options_pricing_models(self):
        """Ajoute les mod√®les de pricing"""
        self.add_section_title("4. Mod√®les de Pricing")
        
        self.add_subsection_title("4.1 Mod√®le Black-Scholes")
        
        black_scholes_text = """
        <b>Mod√®le Black-Scholes-Merton</b>
        
        Le mod√®le fondamental pour le pricing d'options europ√©ennes :
        
        **Hypoth√®ses du mod√®le :**
        ‚Ä¢ Prix du sous-jacent suit un mouvement brownien g√©om√©trique
        ‚Ä¢ Volatilit√© et taux d'int√©r√™t constants
        ‚Ä¢ Pas de dividendes (ou dividendes connus)
        ‚Ä¢ March√©s liquides et sans friction
        
        **Formule Call Option :**
        C = S‚ÇÄN(d‚ÇÅ) - Ke^(-rT)N(d‚ÇÇ)
        
        **Formule Put Option :**
        P = Ke^(-rT)N(-d‚ÇÇ) - S‚ÇÄN(-d‚ÇÅ)
        
        **Avantages :**
        ‚Ä¢ Simplicit√© et rapidit√© de calcul
        ‚Ä¢ Benchmark universellement accept√©
        ‚Ä¢ Base th√©orique solide
        
        **Limitations :**
        ‚Ä¢ Volatilit√© constante irr√©aliste
        ‚Ä¢ Ignore les sauts de prix
        ‚Ä¢ Options europ√©ennes uniquement
        """
        
        self.add_text(black_scholes_text)
        
        self.add_subsection_title("4.2 Mod√®les Binomiaux")
        
        binomial_text = """
        <b>Arbres Binomiaux (Cox-Ross-Rubinstein)</b>
        
        Mod√®le discret permettant le pricing d'options am√©ricaines :
        
        **Principe :**
        ‚Ä¢ Discr√©tisation du temps en p√©riodes
        ‚Ä¢ Prix peut monter (u) ou descendre (d) √† chaque p√©riode
        ‚Ä¢ Probabilit√© risque-neutre p = (e^(rŒît) - d)/(u - d)
        
        **Avantages :**
        ‚Ä¢ Options am√©ricaines (exercice anticip√©)
        ‚Ä¢ Dividendes discrets facilement int√©gr√©s
        ‚Ä¢ Flexibilit√© dans la mod√©lisation
        ‚Ä¢ Convergence vers Black-Scholes
        
        **Applications Pratiques :**
        ‚Ä¢ Pricing d'options am√©ricaines
        ‚Ä¢ Calcul des Greeks par diff√©rences finies
        ‚Ä¢ Strat√©gies d'exercice optimal
        ‚Ä¢ Exotic options avec barri√®res
        """
        
        self.add_text(binomial_text)
        
        self.add_subsection_title("4.3 Simulations Monte Carlo")
        
        monte_carlo_text = """
        <b>M√©thodes Monte Carlo</b>
        
        Simulation stochastique pour options complexes :
        
        **Principe :**
        ‚Ä¢ G√©n√©ration de milliers de chemins de prix al√©atoires
        ‚Ä¢ Calcul du payoff moyen actualis√©
        ‚Ä¢ Convergence vers la valeur th√©orique
        
        **Processus Stochastiques :**
        ‚Ä¢ Mouvement Brownien G√©om√©trique (GBM)
        ‚Ä¢ Processus de Heston (volatilit√© stochastique)
        ‚Ä¢ Mod√®les √† sauts (Merton, Kou)
        ‚Ä¢ Processus multi-facteurs
        
        **Applications :**
        ‚Ä¢ Options path-dependent (asiatiques, lookback)
        ‚Ä¢ Options √† barri√®res multiples
        ‚Ä¢ Options sur paniers d'actifs
        ‚Ä¢ Calcul de Greeks complexes
        """
        
        self.add_text(monte_carlo_text)
        self.story.append(PageBreak())
    
    def add_greeks_analysis(self):
        """Ajoute l'analyse des Greeks"""
        self.add_section_title("5. Analyse des Greeks")
        
        greeks_text = """
        <b>Les Greeks - Mesures de Sensibilit√©</b>
        
        Les Greeks quantifient la sensibilit√© du prix des options aux facteurs de march√©.
        """
        
        self.add_text(greeks_text)
        
        self.add_subsection_title("5.1 Delta")
        
        delta_text = """
        <b>Delta (Œî) - Sensibilit√© au Prix du Sous-Jacent</b>
        
        ‚Ä¢ **D√©finition** : ‚àÇC/‚àÇS - Variation du prix de l'option pour $1 de variation du sous-jacent
        ‚Ä¢ **Range** : Calls [0,1], Puts [-1,0]
        ‚Ä¢ **At-the-Money** : ‚âà 0.5 pour calls, ‚âà -0.5 pour puts
        ‚Ä¢ **Applications** : Hedging ratio, √©quivalent en actions
        
        **Delta Hedging :**
        ‚Ä¢ Position delta-neutre : Œî_portfolio = 0
        ‚Ä¢ Rebalancing dynamique selon les mouvements
        ‚Ä¢ Gamma risk : Œî change quand S change
        
        **Interpr√©tation Pratique :**
        ‚Ä¢ Delta 0.30 call : +$0.30 si action +$1
        ‚Ä¢ Delta -0.40 put : +$0.40 si action -$1
        ‚Ä¢ Probabilit√© approximative d'expirer ITM
        """
        
        self.add_text(delta_text)
        
        self.add_subsection_title("5.2 Gamma")
        
        gamma_text = """
        <b>Gamma (Œì) - Sensibilit√© du Delta</b>
        
        ‚Ä¢ **D√©finition** : ‚àÇ¬≤C/‚àÇS¬≤ - Variation du delta pour $1 de variation du sous-jacent
        ‚Ä¢ **Maximum** : ATM options, surtout proche expiration
        ‚Ä¢ **M√™me valeur** : Calls et puts m√™me strike/expiration
        ‚Ä¢ **D√©croissance** : Avec le temps et distance de ATM
        
        **Gamma Trading :**
        ‚Ä¢ Long gamma : Profits sur gros mouvements (volatilit√©)
        ‚Ä¢ Short gamma : Profits sur stabilit√© (theta farming)
        ‚Ä¢ Gamma scalping : Trading delta-hedge profits
        
        **Risk Management :**
        ‚Ä¢ Gamma √©lev√© = rebalancing fr√©quent
        ‚Ä¢ Gamma risk particuli√®rement important pr√®s expiration
        ‚Ä¢ Position sizing selon gamma exposure
        """
        
        self.add_text(gamma_text)
        
        self.add_subsection_title("5.3 Theta")
        
        theta_text = """
        <b>Theta (Œò) - Sensibilit√© au Temps</b>
        
        ‚Ä¢ **D√©finition** : ‚àÇC/‚àÇt - Variation du prix pour 1 jour √©coul√©
        ‚Ä¢ **Toujours n√©gatif** : Pour les long options (time decay)
        ‚Ä¢ **Acc√©l√©ration** : Pr√®s de l'expiration, surtout ATM
        ‚Ä¢ **Weekend effect** : Decay sur 3 jours le vendredi
        
        **Theta Strategies :**
        ‚Ä¢ Selling premium : Iron condors, covered calls
        ‚Ä¢ Calendar spreads : Long terme/short proche expiration
        ‚Ä¢ Time decay profiling : Maximiser theta collection
        
        **Gestion du Time Decay :**
        ‚Ä¢ Monitoring acc√©l√©r√© derni√®res semaines
        ‚Ä¢ Rolling strategies avant expiration
        ‚Ä¢ Theta/Gamma trade-off optimization
        """
        
        self.add_text(theta_text)
        
        self.add_subsection_title("5.4 Vega")
        
        vega_text = """
        <b>Vega (ŒΩ) - Sensibilit√© √† la Volatilit√©</b>
        
        ‚Ä¢ **D√©finition** : ‚àÇC/‚àÇœÉ - Variation pour 1% de changement de volatilit√©
        ‚Ä¢ **Toujours positif** : Long options profitent de hausse volatilit√©
        ‚Ä¢ **Maximum** : ATM options avec temps restant
        ‚Ä¢ **Corr√©lation** : Souvent corr√©l√© n√©gativement avec S&P 500
        
        **Vega Trading :**
        ‚Ä¢ Long vega : Anticipation √©v√©nements/volatilit√©
        ‚Ä¢ Short vega : Farming premium en p√©riodes calmes
        ‚Ä¢ Volatility term structure arbitrage
        
        **Volatility Risk :**
        ‚Ä¢ IV crush post-earnings : Chute brutale volatilit√© implicite
        ‚Ä¢ VIX spikes : Impact sur toutes les options
        ‚Ä¢ Correlation breakdown : Vega risk non-diversifiable
        """
        
        self.add_text(vega_text)
        self.story.append(PageBreak())
    
    def add_strategy_recommendations(self):
        """Ajoute les recommandations strat√©giques"""
        self.add_section_title("6. Recommandations Strat√©giques")
        
        historical_vol = self.data.get('historical_volatility', 0)
        
        strategies_text = f"""
        <b>Strat√©gies Optimales par Environnement</b>
        
        <b>1. Environnement Faible Volatilit√© (IV < {historical_vol*100*.8:.0f}%)</b>
        
        **Strat√©gies Recommand√©es :**
        ‚Ä¢ **Long Straddles/Strangles** : Acheter volatilit√© sous-√©valu√©e
        ‚Ä¢ **Calendar Spreads** : Long terme/short proche expiration
        ‚Ä¢ **Butterfly Spreads** : Profit si prix reste dans range
        ‚Ä¢ **Iron Condors** : Vente premium avec protection
        
        **Rationale :**
        ‚Ä¢ IV probablement sous-√©valu√©e historiquement
        ‚Ä¢ Anticipation retour vers volatilit√© moyenne
        ‚Ä¢ Structures asym√©triques favorables
        
        <b>2. Environnement Haute Volatilit√© (IV > {historical_vol*100*1.2:.0f}%)</b>
        
        **Strat√©gies Recommand√©es :**
        ‚Ä¢ **Short Straddles/Strangles** : Vendre volatilit√© sur√©valu√©e
        ‚Ä¢ **Credit Spreads** : Bull/bear spreads selon direction
        ‚Ä¢ **Covered Calls** : Income generation sur positions long
        ‚Ä¢ **Cash-Secured Puts** : Acquisition cibl√©e avec premium
        
        **Rationale :**
        ‚Ä¢ IV probablement sur√©valu√©e temporairement
        ‚Ä¢ Mean reversion attendue vers volatilit√© normale
        ‚Ä¢ Time decay favorable aux vendeurs premium
        
        <b>3. Strat√©gies Directionnelles</b>
        
        **Bullish Outlook :**
        ‚Ä¢ **Call Debit Spreads** : Exposition directionnelle limit√©e
        ‚Ä¢ **Put Credit Spreads** : Profit si prix monte ou stable
        ‚Ä¢ **Covered Calls** : Income sur positions existantes
        
        **Bearish Outlook :**
        ‚Ä¢ **Put Debit Spreads** : Protection downside efficace
        ‚Ä¢ **Call Credit Spreads** : Profit si prix baisse ou stable
        ‚Ä¢ **Protective Puts** : Assurance sur positions long
        
        <b>4. Market Neutral Strategies</b>
        
        ‚Ä¢ **Iron Butterflies** : Profit maximum si prix = strike central
        ‚Ä¢ **Iron Condors** : Profit si prix reste dans range
        ‚Ä¢ **Calendar Spreads** : Exploitation time decay diff√©rentiel
        ‚Ä¢ **Volatility Arbitrage** : Long/short selon mispricing
        """
        
        self.add_text(strategies_text)
        self.story.append(PageBreak())
    
    def add_risk_scenarios(self):
        """Ajoute les sc√©narios de risque"""
        self.add_section_title("7. Sc√©narios de Risque")
        
        info = self.data.get('info', {})
        current_price = info.get('currentPrice', 0)
        
        risk_scenarios_text = f"""
        <b>Analyse de Sc√©narios et Stress Testing</b>
        
        <b>Sc√©nario 1 : Mouvement Mod√©r√© (+/-10%)</b>
        
        ‚Ä¢ **Prix cible** : ${current_price*0.9:.2f} - ${current_price*1.1:.2f}
        ‚Ä¢ **Impact Delta** : Changement lin√©aire selon Greeks
        ‚Ä¢ **Impact Gamma** : R√©ajustement delta, rebalancing n√©cessaire
        ‚Ä¢ **Impact Theta** : Decay normal selon profil temporel
        ‚Ä¢ **Strat√©gies optimales** : Structures delta-hedge, spreads
        
        <b>Sc√©nario 2 : Mouvement Important (+/-25%)</b>
        
        ‚Ä¢ **Prix cible** : ${current_price*0.75:.2f} - ${current_price*1.25:.2f}
        ‚Ä¢ **Gamma impact** : Non-lin√©arit√© significative, gaps possibles
        ‚Ä¢ **Volatility impact** : IV spike probable, vega exposure critique
        ‚Ä¢ **Liquidit√©** : Bid-ask spreads √©largis, slippage
        ‚Ä¢ **Strat√©gies** : Long volatility, protective strategies
        
        <b>Sc√©nario 3 : Volatility Spike (VIX +50%)</b>
        
        ‚Ä¢ **Impact sur IV** : Hausse g√©n√©ralis√©e volatilit√© implicite
        ‚Ä¢ **Corr√©lations** : Breakdown des corr√©lations historiques
        ‚Ä¢ **Vega explosion** : Long vega tr√®s profitable
        ‚Ä¢ **Liquidit√©** : Market makers √©largissent spreads
        ‚Ä¢ **Actions** : Prendre profits long vega, √©viter short vega
        
        <b>Sc√©nario 4 : Event Risk (Earnings, FDA, etc.)</b>
        
        ‚Ä¢ **Volatility crush** : Chute IV post-√©v√©nement m√™me si mouvement
        ‚Ä¢ **Binary outcome** : Gap up/down significatif possible
        ‚Ä¢ **Volume surge** : Liquidit√© temporairement am√©lior√©e
        ‚Ä¢ **Strategies** : Long straddles pre-event, short post-event
        
        <b>Risk Management Framework</b>
        
        ‚Ä¢ **Position limits** : Max exposition par strategy/underlying
        ‚Ä¢ **Greeks limits** : Delta, gamma, vega, theta maximums
        ‚Ä¢ **Scenario P&L** : Stress testing quotidien
        ‚Ä¢ **Liquidity buffers** : Capacit√© de liquidation rapide
        ‚Ä¢ **Correlation monitoring** : Surveillance corr√©lations positions
        """
        
        self.add_text(risk_scenarios_text)
        self.story.append(PageBreak())
    
    def add_market_making_insights(self):
        """Ajoute les insights de market making"""
        self.add_section_title("8. Insights Market Making")
        
        market_making_text = """
        <b>Perspective Market Maker</b>
        
        <b>1. Bid-Ask Spread Dynamics</b>
        
        ‚Ä¢ **Factors influencing spreads** :
          - Volatilit√© du sous-jacent
          - Time to expiration
          - Moneyness (ITM/ATM/OTM)
          - Volume et open interest
          - Market conditions g√©n√©rales
        
        ‚Ä¢ **Spread components** :
          - Order processing costs
          - Inventory holding costs
          - Adverse selection costs
          - Competition entre market makers
        
        <b>2. Inventory Management</b>
        
        ‚Ä¢ **Delta hedging** : Couverture exposition directionnelle
        ‚Ä¢ **Gamma risk** : Gestion convexit√©, rebalancing costs
        ‚Ä¢ **Vega hedging** : Couverture risque volatilit√©
        ‚Ä¢ **Portfolio optimization** : Diversification Greeks exposure
        
        <b>3. Pricing Inefficiencies</b>
        
        **Opportunit√©s pour traders retail :**
        
        ‚Ä¢ **Wide spreads** : N√©gociation entre bid/ask
        ‚Ä¢ **Stale quotes** : Prix non-mis-√†-jour rapidement
        ‚Ä¢ **Cross-market arbitrage** : Diff√©rences entre exchanges
        ‚Ä¢ **Pin risk** : Expiration proche du strike
        
        **Timing optimal :**
        
        ‚Ä¢ **Market open** : Spreads plus larges, volatilit√© √©lev√©e
        ‚Ä¢ **Mid-session** : Spreads normalis√©s, conditions optimales
        ‚Ä¢ **Close** : Risk management MM, opportunit√©s
        ‚Ä¢ **Low volume periods** : Spreads √©largis
        
        <b>4. Information Flow</b>
        
        ‚Ä¢ **Order flow toxicity** : Informed vs uninformed trading
        ‚Ä¢ **Pin risk management** : Expiration day dynamics
        ‚Ä¢ **Volatility forecasting** : Anticipation moves post-events
        ‚Ä¢ **Correlation trading** : Exploitation relationships inter-assets
        
        <b>Best Practices pour Traders</b>
        
        ‚Ä¢ **Avoid market orders** : Utiliser limit orders
        ‚Ä¢ **Time your trades** : √âviter p√©riodes faible liquidit√©
        ‚Ä¢ **Understand the Greeks** : Impact avant trading
        ‚Ä¢ **Monitor implied volatility** : Relative value assessment
        ‚Ä¢ **Size appropriately** : Position sizing selon Greeks
        """
        
        self.add_text(market_making_text)
    