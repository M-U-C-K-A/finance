#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Smart Report Generator - Router vers les g√©n√©rateurs sp√©cialis√©s
"""

import os
import sys
import logging
import time
from datetime import datetime

# Import des g√©n√©rateurs sp√©cialis√©s
from baseline_generator import BaselineReportGenerator
from benchmark_generator import BenchmarkReportGenerator
from detailed_generator import DetailedReportGenerator
from deep_analysis_generator import DeepAnalysisReportGenerator
from pricer_generator import PricerReportGenerator

# Import du syst√®me de logs
from report_logger import log_generation_start, log_generation_success, log_generation_error

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SmartReportGenerator:
    """Router intelligent vers les g√©n√©rateurs sp√©cialis√©s"""
    
    # Mapping des types de rapports vers les g√©n√©rateurs
    GENERATORS = {
        'BASELINE': BaselineReportGenerator,
        'BENCHMARK': BenchmarkReportGenerator,
        'DETAILED': DetailedReportGenerator,
        'DEEP_ANALYSIS': DeepAnalysisReportGenerator,
        'PRICER': PricerReportGenerator
    }
    
    @staticmethod
    def generate_report(symbol: str, report_type: str, output_path: str, user_id: str = None) -> bool:
        """
        G√©n√®re un rapport en utilisant le g√©n√©rateur sp√©cialis√© appropri√©
        
        Args:
            symbol: Symbole boursier
            report_type: Type de rapport (BASELINE, BENCHMARK, DETAILED, DEEP_ANALYSIS, PRICER)
            output_path: Chemin de sortie du PDF
            user_id: ID utilisateur (optionnel)
            
        Returns:
            bool: True si succ√®s, False sinon
        """
        start_time = time.time()
        
        # Log du d√©but
        log_generation_start(symbol, report_type, user_id)
        
        try:
            logger.info(f"üöÄ G√©n√©ration rapport {report_type} pour {symbol}")
            logger.info(f"üìÅ Chemin de sortie: {output_path}")
            logger.info(f"üìÇ R√©pertoire de travail: {os.getcwd()}")
            
            # Validation du type de rapport
            if report_type not in SmartReportGenerator.GENERATORS:
                error_msg = f"Type de rapport non support√©: {report_type}"
                logger.error(f"‚ùå {error_msg}")
                logger.info(f"Types support√©s: {list(SmartReportGenerator.GENERATORS.keys())}")
                log_generation_error(symbol, report_type, error_msg, time.time() - start_time, user_id)
                return False
            
            # Validation du symbole
            if not symbol or len(symbol) < 1:
                error_msg = f"Symbole invalide: {symbol}"
                logger.error(f"‚ùå {error_msg}")
                log_generation_error(symbol, report_type, error_msg, time.time() - start_time, user_id)
                return False
            
            # Validation du chemin de sortie
            output_dir = os.path.dirname(output_path)
            if output_dir and not os.path.exists(output_dir):
                logger.info(f"üìÅ Cr√©ation du r√©pertoire: {output_dir}")
                os.makedirs(output_dir, exist_ok=True)
            
            # R√©cup√©ration du g√©n√©rateur appropri√©
            logger.info(f"üè≠ Utilisation du g√©n√©rateur: {SmartReportGenerator.GENERATORS[report_type].__name__}")
            generator_class = SmartReportGenerator.GENERATORS[report_type]
            
            # Cr√©ation et ex√©cution du g√©n√©rateur
            logger.info(f"üî® Cr√©ation de l'instance du g√©n√©rateur...")
            generator = generator_class(symbol, output_path)
            
            logger.info(f"‚öôÔ∏è Lancement de la g√©n√©ration...")
            success = generator.generate_report()
            
            duration = time.time() - start_time
            
            if success:
                # V√©rification que le fichier a bien √©t√© cr√©√©
                if os.path.exists(output_path):
                    file_size = os.path.getsize(output_path)
                    logger.info(f"‚úÖ Rapport {report_type} g√©n√©r√© avec succ√®s: {output_path} ({file_size} bytes)")
                    log_generation_success(symbol, report_type, output_path, file_size, duration, user_id)
                else:
                    error_msg = "Le fichier PDF n'a pas √©t√© cr√©√©"
                    logger.error(f"‚ùå {error_msg}: {output_path}")
                    log_generation_error(symbol, report_type, error_msg, duration, user_id)
                    return False
            else:
                error_msg = "√âchec g√©n√©ration rapport"
                logger.error(f"‚ùå {error_msg} {report_type}")
                log_generation_error(symbol, report_type, error_msg, duration, user_id)
                
            return success
            
        except ImportError as e:
            error_msg = f"Erreur d'importation: {e}"
            logger.error(f"‚ùå {error_msg}")
            logger.error("V√©rifiez que toutes les d√©pendances sont install√©es (pip install -r requirements.txt)")
            log_generation_error(symbol, report_type, error_msg, time.time() - start_time, user_id)
            return False
        except Exception as e:
            error_msg = f"Erreur g√©n√©ration: {e}"
            logger.error(f"‚ùå {error_msg}")
            logger.error(f"Type d'erreur: {type(e).__name__}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            log_generation_error(symbol, report_type, error_msg, time.time() - start_time, user_id)
            return False
    
    @staticmethod
    def get_available_types():
        """Retourne la liste des types de rapports disponibles"""
        return list(SmartReportGenerator.GENERATORS.keys())
    
    @staticmethod
    def get_type_description(report_type: str) -> str:
        """Retourne la description d'un type de rapport"""
        descriptions = {
            'BASELINE': 'Analyse fondamentale compl√®te (20-25 pages)',
            'BENCHMARK': 'Analyse comparative avec benchmarks (15-20 pages)',
            'DETAILED': 'Analyse technique et fondamentale d√©taill√©e (25-30 pages)',
            'DEEP_ANALYSIS': 'Recherche quantitative exhaustive (30-35 pages)',
            'PRICER': '√âvaluation et pricing d\'options (15-20 pages)'
        }
        return descriptions.get(report_type, 'Description non disponible')

def main():
    """Point d'entr√©e principal pour l'ex√©cution en ligne de commande"""
    if len(sys.argv) < 4 or len(sys.argv) > 5:
        print("Usage: python smart_report_generator.py <SYMBOL> <TYPE> <OUTPUT_PATH> [USER_ID]")
        print(f"Types disponibles: {SmartReportGenerator.get_available_types()}")
        sys.exit(1)
    
    symbol = sys.argv[1]
    report_type = sys.argv[2].upper()
    output_path = sys.argv[3]
    user_id = sys.argv[4] if len(sys.argv) > 4 else None
    
    # G√©n√©ration du rapport
    success = SmartReportGenerator.generate_report(symbol, report_type, output_path, user_id)
    
    if success:
        print(f"‚úÖ Rapport g√©n√©r√© avec succ√®s: {output_path}")
        sys.exit(0)
    else:
        print(f"‚ùå √âchec de la g√©n√©ration du rapport")
        sys.exit(1)

if __name__ == "__main__":
    main()