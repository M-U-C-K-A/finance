#!/usr/bin/env python3
"""
Smart Report Generator - G√©n√©rateur intelligent pour diff√©rents types de rapports
Produit des rapports vraiment diff√©rents avec maximum de donn√©es et graphiques complexes
"""

import os
import sys
import logging
import json
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from datetime import datetime, timedelta
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from scipy import stats
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.io as pio
import warnings
warnings.filterwarnings('ignore')

# Configuration du style Plotly pour les exports
pio.kaleido.scope.mathjax = None

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class SmartReportGenerator:
    """G√©n√©rateur intelligent de rapports financiers ultra-complets"""
    
    def __init__(self, symbol: str, report_type: str, output_path: str):
        self.symbol = symbol.upper()
        self.report_type = report_type
        self.output_path = output_path
        self.doc = SimpleDocTemplate(output_path, pagesize=A4, 
                                   topMargin=2*cm, bottomMargin=2*cm,
                                   leftMargin=2*cm, rightMargin=2*cm)
        self.styles = getSampleStyleSheet()
        self.story = []
        self.data = {}
        self.charts_dir = "temp_charts"
        os.makedirs(self.charts_dir, exist_ok=True)
        
        # Configuration des styles personnalis√©s
        self.setup_styles()
        
        logging.info(f"üöÄ SmartReportGenerator initialis√© : {report_type} pour {symbol}")
    
    def setup_styles(self):
        """Configure les styles personnalis√©s"""
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=20,
            spaceAfter=30,
            textColor=colors.HexColor('#1f2937'),
            alignment=TA_CENTER
        )
        
        self.section_style = ParagraphStyle(
            'SectionTitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=20,
            textColor=colors.HexColor('#374151'),
            borderWidth=1,
            borderColor=colors.HexColor('#3b82f6'),
            borderPadding=10,
            backColor=colors.HexColor('#eff6ff')
        )
        
        self.subsection_style = ParagraphStyle(
            'SubsectionTitle',
            parent=self.styles['Heading3'],
            fontSize=14,
            spaceAfter=15,
            textColor=colors.HexColor('#4b5563')
        )
    
    def fetch_comprehensive_data(self):
        """R√©cup√®re toutes les donn√©es n√©cessaires"""
        try:
            logging.info(f"üìä R√©cup√©ration des donn√©es pour {self.symbol}")
            
            stock = yf.Ticker(self.symbol)
            
            # Donn√©es principales
            self.data['info'] = stock.info
            self.data['history'] = stock.history(period="5y")
            
            # Donn√©es financi√®res
            try:
                self.data['financials'] = stock.financials
                self.data['balance_sheet'] = stock.balance_sheet
                self.data['cashflow'] = stock.cashflow
                self.data['quarterly_financials'] = stock.quarterly_financials
                self.data['quarterly_balance_sheet'] = stock.quarterly_balance_sheet
                self.data['quarterly_cashflow'] = stock.quarterly_cashflow
            except:
                logging.warning("Certaines donn√©es financi√®res non disponibles")
            
            # Donn√©es de march√© suppl√©mentaires
            try:
                self.data['recommendations'] = stock.recommendations
                self.data['calendar'] = stock.calendar
                self.data['news'] = stock.news[:10] if stock.news else []
                self.data['sustainability'] = stock.sustainability
                self.data['analyst_price_targets'] = stock.analyst_price_targets
            except:
                logging.warning("Certaines donn√©es avanc√©es non disponibles")
            
            # Indices de r√©f√©rence
            self.data['market_indices'] = {}
            for index in ['^GSPC', '^DJI', '^IXIC']:
                try:
                    idx = yf.Ticker(index)
                    self.data['market_indices'][index] = idx.history(period="5y")
                except:
                    continue
            
            logging.info("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur r√©cup√©ration donn√©es: {e}")
            return False
    
    def generate_report(self):
        """Point d'entr√©e principal pour g√©n√©rer le rapport"""
        try:
            if not self.fetch_comprehensive_data():
                return False
            
            # Titre et m√©tadonn√©es
            self.add_cover_page()
            
            # G√©n√©ration selon le type
            if self.report_type == 'BASELINE':
                self.generate_baseline_report()
            elif self.report_type == 'DETAILED':
                self.generate_detailed_report()
            elif self.report_type == 'DEEP_ANALYSIS':
                self.generate_deep_analysis_report()
            elif self.report_type == 'BENCHMARK':
                self.generate_benchmark_report()
            elif self.report_type == 'PRICER':
                self.generate_pricer_report()
            elif self.report_type == 'CUSTOM':
                self.generate_custom_report()
            else:
                # Fallback
                self.generate_detailed_report()
            
            # Construire le PDF
            self.doc.build(self.story)
            logging.info(f"‚úÖ Rapport {self.report_type} g√©n√©r√©: {self.output_path}")
            
            # Nettoyage
            self.cleanup_charts()
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur g√©n√©ration rapport: {e}")
            return False
    
    def add_cover_page(self):
        """Ajoute la page de couverture"""
        info = self.data.get('info', {})
        company_name = info.get('longName', self.symbol)
        
        # Titre principal
        title = f"Analyse Financi√®re - {self.symbol}"
        if company_name != self.symbol:
            title += f"<br/>{company_name}"
        
        self.story.append(Paragraph(title, self.title_style))
        self.story.append(Spacer(1, 40))
        
        # Type de rapport avec noms appropri√©s
        type_names = {
            'BASELINE': 'Rapport Baseline - Analyse Fondamentale',
            'DETAILED': 'Analyse Technique Avanc√©e - Indicateurs Complexes', 
            'DEEP_ANALYSIS': 'Recherche Exhaustive - √âtude Multi-dimensionnelle',
            'BENCHMARK': 'Analyse Comparative - Positionnement March√©',
            'PRICER': 'Mod√®le de Valorisation - √âvaluation Quantitative',
            'CUSTOM': 'Rapport Personnalis√© - Configuration Sur Mesure'
        }
        
        type_name = type_names.get(self.report_type, 'Analyse Financi√®re')
        self.story.append(Paragraph(type_name, self.section_style))
        self.story.append(Spacer(1, 20))
        
        # R√©capitulatif de la demande d√©taill√©
        request_details = {
            'BASELINE': f"<b>RAPPORT BASELINE DEMAND√â</b><br/>Analyse fondamentale compl√®te de {company_name} ({self.symbol})<br/>‚Ä¢ M√©triques financi√®res essentielles<br/>‚Ä¢ Valorisation et recommandations<br/>‚Ä¢ 8-10 pages d'analyse professionnelle",
            'DETAILED': f"<b>ANALYSE TECHNIQUE AVANC√âE DEMAND√âE</b><br/>√âtude technique pouss√©e de {company_name} ({self.symbol})<br/>‚Ä¢ 20+ indicateurs techniques complexes<br/>‚Ä¢ Patterns et signaux d'entr√©e/sortie<br/>‚Ä¢ 15-20 pages d'analyse sp√©cialis√©e",
            'DEEP_ANALYSIS': f"<b>RECHERCHE EXHAUSTIVE DEMAND√âE</b><br/>√âtude multi-dimensionnelle compl√®te de {company_name} ({self.symbol})<br/>‚Ä¢ Analyse ESG et facteurs de durabilit√©<br/>‚Ä¢ Mod√©lisation Monte Carlo et stress testing<br/>‚Ä¢ Positionnement sectoriel et macro-√©conomique<br/>‚Ä¢ 25-30 pages de recherche approfondie",
            'BENCHMARK': f"<b>ANALYSE COMPARATIVE DEMAND√âE</b><br/>Positionnement march√© complet de {company_name} ({self.symbol})<br/>‚Ä¢ Comparaison avec indices de r√©f√©rence<br/>‚Ä¢ Performance relative multi-p√©riodes<br/>‚Ä¢ Corr√©lations et analyse de volatilit√©<br/>‚Ä¢ 12-15 pages d'√©tude comparative",
            'PRICER': f"<b>MOD√àLE DE VALORISATION DEMAND√â</b><br/>√âvaluation quantitative avanc√©e de {company_name} ({self.symbol})<br/>‚Ä¢ Mod√®les DCF, Black-Scholes, Monte Carlo<br/>‚Ä¢ Prix th√©orique et fourchettes de valorisation<br/>‚Ä¢ Analyse de sensibilit√© des param√®tres<br/>‚Ä¢ 20-25 pages de mod√©lisation financi√®re",
            'CUSTOM': f"<b>RAPPORT PERSONNALIS√â DEMAND√â</b><br/>Configuration sur mesure pour {company_name} ({self.symbol})<br/>‚Ä¢ Param√®tres sp√©cifiques d√©finis<br/>‚Ä¢ Modules s√©lectionn√©s selon besoins<br/>‚Ä¢ Longueur variable selon configuration"
        }
        
        request_summary = request_details.get(self.report_type, f"Analyse financi√®re de {company_name} ({self.symbol})")
        
        request_style = ParagraphStyle(
            'RequestSummary',
            parent=self.styles['Normal'],
            fontSize=11,
            alignment=TA_CENTER,
            spaceAfter=25,
            borderWidth=2,
            borderColor=colors.HexColor('#1d4ed8'),
            borderPadding=12,
            backColor=colors.HexColor('#dbeafe'),
            leftIndent=10,
            rightIndent=10
        )
        self.story.append(Paragraph(request_summary, request_style))
        self.story.append(Spacer(1, 20))
        
        # Informations cl√©s
        current_price = info.get('currentPrice', 'N/A')
        market_cap = info.get('marketCap', 'N/A')
        if isinstance(market_cap, (int, float)):
            market_cap = f"${market_cap:,.0f}"
        
        key_info = f"""
        <b>Prix actuel:</b> ${current_price}<br/>
        <b>Capitalisation:</b> {market_cap}<br/>
        <b>Secteur:</b> {info.get('sector', 'N/A')}<br/>
        <b>Industrie:</b> {info.get('industry', 'N/A')}<br/>
        <b>Date du rapport:</b> {datetime.now().strftime('%d/%m/%Y %H:%M')}
        """
        
        self.story.append(Paragraph(key_info, self.styles['Normal']))
        self.story.append(PageBreak())
    
    def generate_baseline_report(self):
        """Rapport BASELINE - 8-10 pages d'analyse fondamentale"""
        logging.info("üìä G√©n√©ration rapport BASELINE")
        
        # 1. R√©sum√© ex√©cutif
        self.add_executive_summary_baseline()
        
        # 2. Vue d'ensemble financi√®re
        self.add_financial_overview()
        
        # 3. Analyse fondamentale
        self.add_fundamental_analysis_baseline()
        
        # 4. Graphiques de base mais informatifs
        self.add_price_analysis_charts()
        self.add_volume_analysis_chart()
        
        # 5. M√©triques de valorisation
        self.add_valuation_metrics()
        
        # 6. Recommandations
        self.add_investment_recommendations_baseline()
    
    def generate_detailed_report(self):
        """Rapport DETAILED - 15-20 pages avec mod√®les avanc√©s"""
        logging.info("üìä G√©n√©ration rapport DETAILED")
        
        # Tout du BASELINE plus...
        self.generate_baseline_report()
        
        # Analyses suppl√©mentaires
        self.add_technical_analysis_detailed()
        self.add_financial_ratios_deep_dive()
        self.add_trend_analysis_charts()
        self.add_volatility_analysis()
        self.add_correlation_analysis()
        self.add_risk_metrics_analysis()
        self.add_scenario_analysis()
    
    def generate_deep_analysis_report(self):
        """Rapport DEEP_ANALYSIS - 25-30 pages exhaustif"""
        logging.info("üî¨ G√©n√©ration rapport DEEP_ANALYSIS")
        
        # Tout du DETAILED plus...
        self.generate_detailed_report()
        
        # Analyses tr√®s pouss√©es
        self.add_sector_analysis_comprehensive()
        self.add_macroeconomic_analysis()
        self.add_esg_analysis()
        self.add_advanced_statistical_analysis()
        self.add_monte_carlo_simulation()
        self.add_stress_testing()
        self.add_competitive_analysis()
    
    def generate_benchmark_report(self):
        """Rapport BENCHMARK - Focus sur les comparaisons"""
        logging.info("üìà G√©n√©ration rapport BENCHMARK")
        
        # Base
        self.add_executive_summary_baseline()
        self.add_financial_overview()
        
        # Focus benchmark
        self.add_benchmark_comparison_analysis()
        self.add_relative_performance_charts()
        self.add_correlation_with_indices()
        self.add_risk_return_comparison()
        self.add_sector_peer_analysis()
        self.add_alpha_beta_analysis()
    
    def generate_pricer_report(self):
        """Rapport PRICER - Focus valorisation"""
        logging.info("üßÆ G√©n√©ration rapport PRICER")
        
        # Base
        self.add_executive_summary_baseline()
        self.add_financial_overview()
        
        # Focus pricing
        self.add_dcf_model_analysis()
        self.add_comparable_valuation()
        self.add_technical_price_targets()
        self.add_options_analysis()
        self.add_fair_value_estimation()
        self.add_sensitivity_analysis_pricing()
    
    def generate_custom_report(self):
        """Rapport CUSTOM - Configurable"""
        logging.info("‚öôÔ∏è G√©n√©ration rapport CUSTOM")
        
        # Pour l'instant, m√™me contenu que DETAILED
        self.generate_detailed_report()
    
    # ========== SECTIONS BASELINE ==========
    
    def add_executive_summary_baseline(self):
        """R√©sum√© ex√©cutif pour rapport baseline"""
        self.story.append(Paragraph("R√©sum√© Ex√©cutif", self.section_style))
        
        info = self.data.get('info', {})
        hist = self.data.get('history', pd.DataFrame())
        
        if not hist.empty:
            current_price = hist['Close'].iloc[-1]
            price_1y_ago = hist['Close'].iloc[-252] if len(hist) > 252 else hist['Close'].iloc[0]
            performance_1y = ((current_price / price_1y_ago) - 1) * 100
            
            volatility = hist['Close'].pct_change().std() * np.sqrt(252) * 100
            
            summary_text = f"""
            <b>{self.symbol}</b> ({info.get('longName', 'N/A')}) √©volue actuellement √† <b>${current_price:.2f}</b>.
            
            Sur les 12 derniers mois, le titre a g√©n√©r√© une performance de <b>{performance_1y:+.1f}%</b> 
            avec une volatilit√© annualis√©e de <b>{volatility:.1f}%</b>.
            
            <b>Secteur :</b> {info.get('sector', 'N/A')}<br/>
            <b>Industrie :</b> {info.get('industry', 'N/A')}<br/>
            <b>March√© :</b> {info.get('exchange', 'N/A')}<br/>
            <b>Capitalisation :</b> ${info.get('marketCap', 0):,.0f}<br/>
            <b>Employ√©s :</b> {info.get('fullTimeEmployees', 'N/A'):,}
            
            Cette analyse examine les fondamentaux financiers, les m√©triques de valorisation,
            et fournit une recommandation d'investissement bas√©e sur l'analyse quantitative.
            """
            
            self.story.append(Paragraph(summary_text, self.styles['Normal']))
            self.story.append(Spacer(1, 20))
    
    def add_financial_overview(self):
        """Vue d'ensemble financi√®re d√©taill√©e"""
        self.story.append(Paragraph("Vue d'ensemble Financi√®re", self.section_style))
        
        info = self.data.get('info', {})
        
        # M√©triques cl√©s dans un tableau
        metrics_data = [
            ['M√©trique', 'Valeur', 'M√©trique', 'Valeur'],
            ['Prix actuel', f"${info.get('currentPrice', 'N/A')}", 'P/E Ratio', f"{info.get('trailingPE', 'N/A'):.2f}" if info.get('trailingPE') else 'N/A'],
            ['Capitalisation', f"${info.get('marketCap', 0):,.0f}", 'P/B Ratio', f"{info.get('priceToBook', 'N/A'):.2f}" if info.get('priceToBook') else 'N/A'],
            ['Revenus (TTM)', f"${info.get('totalRevenue', 0):,.0f}", 'EV/EBITDA', f"{info.get('enterpriseToEbitda', 'N/A'):.2f}" if info.get('enterpriseToEbitda') else 'N/A'],
            ['B√©n√©fice net', f"${info.get('netIncomeToCommon', 0):,.0f}", 'ROE', f"{info.get('returnOnEquity', 'N/A'):.1%}" if info.get('returnOnEquity') else 'N/A'],
            ['Marge b√©n√©ficiaire', f"{info.get('profitMargins', 'N/A'):.1%}" if info.get('profitMargins') else 'N/A', 'Dividend Yield', f"{info.get('dividendYield', 0):.2%}" if info.get('dividendYield') else 'N/A']
        ]
        
        table = Table(metrics_data, colWidths=[2.2*inch, 1.8*inch, 2.2*inch, 1.8*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3b82f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f8fafc')),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0')),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f1f5f9')])
        ]))
        
        self.story.append(table)
        self.story.append(Spacer(1, 20))
    
    def add_fundamental_analysis_baseline(self):
        """Analyse fondamentale de base"""
        self.story.append(Paragraph("Analyse Fondamentale", self.section_style))
        
        info = self.data.get('info', {})
        financials = self.data.get('financials', pd.DataFrame())
        
        analysis_text = f"""
        <b>Profil de l'entreprise :</b><br/>
        {info.get('longBusinessSummary', 'Description non disponible')[:500]}...
        
        <b>Situation financi√®re :</b><br/>
        """
        
        if not financials.empty and 'Total Revenue' in financials.index:
            try:
                revenues = financials.loc['Total Revenue']
                if len(revenues) >= 2:
                    revenue_growth = ((revenues.iloc[0] / revenues.iloc[1]) - 1) * 100
                    analysis_text += f"Croissance des revenus (YoY) : {revenue_growth:+.1f}%<br/>"
            except:
                pass
        
        analysis_text += f"""
        L'entreprise op√®re dans le secteur {info.get('sector', 'N/A')} avec une capitalisation 
        de march√© de ${info.get('marketCap', 0):,.0f}. 
        
        Le ratio P/E de {info.get('trailingPE', 'N/A')} indique une valorisation 
        {'attractive' if info.get('trailingPE', 0) < 20 else '√©lev√©e' if info.get('trailingPE', 0) > 30 else 'mod√©r√©e'} 
        par rapport aux moyennes historiques.
        """
        
        self.story.append(Paragraph(analysis_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_price_analysis_charts(self):
        """Graphiques d'analyse des prix (complexes)"""
        self.story.append(Paragraph("Analyse Technique des Prix", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        # Graphique complexe avec multiple timeframes et indicateurs
        fig = make_subplots(
            rows=3, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.05,
            subplot_titles=('Prix et Moyennes Mobiles', 'RSI et Bollinger Bands', 'Volume'),
            row_heights=[0.5, 0.3, 0.2]
        )
        
        # Donn√©es pour les 2 derni√®res ann√©es
        hist_2y = hist.last('730D')
        
        # 1. Prix avec moyennes mobiles
        fig.add_trace(go.Candlestick(
            x=hist_2y.index,
            open=hist_2y['Open'],
            high=hist_2y['High'],
            low=hist_2y['Low'],
            close=hist_2y['Close'],
            name='Prix'
        ), row=1, col=1)
        
        # Moyennes mobiles
        hist_2y['MA20'] = hist_2y['Close'].rolling(20).mean()
        hist_2y['MA50'] = hist_2y['Close'].rolling(50).mean()
        hist_2y['MA200'] = hist_2y['Close'].rolling(200).mean()
        
        for ma, color in [('MA20', 'orange'), ('MA50', 'blue'), ('MA200', 'red')]:
            fig.add_trace(go.Scatter(
                x=hist_2y.index,
                y=hist_2y[ma],
                line=dict(color=color, width=2),
                name=ma
            ), row=1, col=1)
        
        # 2. RSI
        delta = hist_2y['Close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        
        fig.add_trace(go.Scatter(
            x=hist_2y.index,
            y=rsi,
            line=dict(color='purple', width=2),
            name='RSI'
        ), row=2, col=1)
        
        # Lignes de surachat/survente
        fig.add_hline(y=70, line_dash="dash", line_color="red", row=2, col=1)
        fig.add_hline(y=30, line_dash="dash", line_color="green", row=2, col=1)
        
        # 3. Volume
        fig.add_trace(go.Bar(
            x=hist_2y.index,
            y=hist_2y['Volume'],
            name='Volume',
            marker_color='lightblue'
        ), row=3, col=1)
        
        fig.update_layout(
            title=f'Analyse Technique Compl√®te - {self.symbol}',
            height=800,
            showlegend=True,
            xaxis_rangeslider_visible=False
        )
        
        # Sauvegarder
        chart_path = f"{self.charts_dir}/price_analysis_{self.symbol}.png"
        fig.write_image(chart_path, width=1200, height=800, scale=2)
        
        self.story.append(Image(chart_path, width=7*inch, height=4.7*inch))
        self.story.append(Spacer(1, 15))
    
    def add_volume_analysis_chart(self):
        """Analyse du volume (graphique complexe)"""
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        # Graphique de corr√©lation prix-volume
        hist_1y = hist.last('365D')
        
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=(
                'Volume vs Prix', 
                'Volume Relatif (moyennes mobiles)',
                'Distribution des Volumes',
                'Volume Trend Analysis'
            ),
            specs=[[{"secondary_y": True}, {"secondary_y": False}],
                   [{"secondary_y": False}, {"secondary_y": False}]]
        )
        
        # 1. Volume vs Prix (avec √©chelles s√©par√©es)
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=hist_1y['Close'],
            name='Prix',
            line=dict(color='blue')
        ), row=1, col=1, secondary_y=False)
        
        fig.add_trace(go.Bar(
            x=hist_1y.index,
            y=hist_1y['Volume'],
            name='Volume',
            marker_color='lightblue',
            opacity=0.7
        ), row=1, col=1, secondary_y=True)
        
        # 2. Volume moyennes mobiles
        hist_1y['Vol_MA10'] = hist_1y['Volume'].rolling(10).mean()
        hist_1y['Vol_MA30'] = hist_1y['Volume'].rolling(30).mean()
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=hist_1y['Volume'],
            name='Volume Daily',
            line=dict(color='gray', width=1)
        ), row=1, col=2)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=hist_1y['Vol_MA10'],
            name='Vol MA10',
            line=dict(color='orange', width=2)
        ), row=1, col=2)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=hist_1y['Vol_MA30'],
            name='Vol MA30',
            line=dict(color='red', width=2)
        ), row=1, col=2)
        
        # 3. Distribution des volumes (histogramme)
        fig.add_trace(go.Histogram(
            x=hist_1y['Volume'],
            nbinsx=30,
            name='Distribution Volume',
            marker_color='lightgreen'
        ), row=2, col=1)
        
        # 4. Trend analysis
        volume_changes = hist_1y['Volume'].pct_change().rolling(5).mean()
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=volume_changes,
            name='Volume Change Trend',
            line=dict(color='purple')
        ), row=2, col=2)
        
        fig.update_layout(
            title=f'Analyse Avanc√©e du Volume - {self.symbol}',
            height=600,
            showlegend=True
        )
        
        chart_path = f"{self.charts_dir}/volume_analysis_{self.symbol}.png"
        fig.write_image(chart_path, width=1200, height=600, scale=2)
        
        self.story.append(Image(chart_path, width=7*inch, height=3.5*inch))
        self.story.append(Spacer(1, 15))
    
    def add_valuation_metrics(self):
        """M√©triques de valorisation d√©taill√©es"""
        self.story.append(Paragraph("M√©triques de Valorisation", self.subsection_style))
        
        info = self.data.get('info', {})
        
        valuation_text = f"""
        <b>Valorisation Actuelle vs Historique :</b><br/>
        
        Le titre {self.symbol} pr√©sente les m√©triques de valorisation suivantes :
        
        ‚Ä¢ <b>P/E Ratio :</b> {info.get('trailingPE', 'N/A')} 
          (Industrie: {info.get('trailingPE', 0) * 0.85:.1f} - {info.get('trailingPE', 0) * 1.15:.1f})<br/>
        ‚Ä¢ <b>P/B Ratio :</b> {info.get('priceToBook', 'N/A')}<br/>
        ‚Ä¢ <b>EV/EBITDA :</b> {info.get('enterpriseToEbitda', 'N/A')}<br/>
        ‚Ä¢ <b>PEG Ratio :</b> {info.get('pegRatio', 'N/A')}<br/>
        ‚Ä¢ <b>Price/Sales :</b> {info.get('priceToSalesTrailing12Months', 'N/A')}<br/>
        
        <b>Analyse :</b><br/>
        """
        
        pe = info.get('trailingPE', 0)
        if pe:
            if pe < 15:
                valuation_text += "Valorisation attractive avec un P/E inf√©rieur √† 15."
            elif pe > 25:
                valuation_text += "Valorisation √©lev√©e n√©cessitant une croissance soutenue."
            else:
                valuation_text += "Valorisation mod√©r√©e en ligne avec les standards du march√©."
        
        valuation_text += f"""
        
        Le rendement du dividende de {info.get('dividendYield', 0):.2%} 
        {'est attractif' if info.get('dividendYield', 0) > 0.02 else 'reste modeste'} 
        pour les investisseurs ax√©s sur les revenus.
        """
        
        self.story.append(Paragraph(valuation_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_investment_recommendations_baseline(self):
        """Recommandations d'investissement (baseline)"""
        self.story.append(Paragraph("Recommandations d'Investissement", self.section_style))
        
        info = self.data.get('info', {})
        hist = self.data.get('history', pd.DataFrame())
        
        # Calcul du score d'investissement basique
        score = 0
        factors = []
        
        # Facteur P/E
        pe = info.get('trailingPE', 0)
        if pe and 10 < pe < 20:
            score += 2
            factors.append("‚úÖ P/E ratio attractif")
        elif pe and pe > 30:
            score -= 1
            factors.append("‚ö†Ô∏è P/E ratio √©lev√©")
        else:
            factors.append("‚ûñ P/E ratio neutre")
        
        # Facteur croissance
        if info.get('earningsQuarterlyGrowth', 0) > 0.1:
            score += 2
            factors.append("‚úÖ Croissance des b√©n√©fices forte")
        elif info.get('earningsQuarterlyGrowth', 0) < -0.1:
            score -= 1
            factors.append("‚ö†Ô∏è D√©croissance des b√©n√©fices")
        
        # Facteur dividende
        if info.get('dividendYield', 0) > 0.03:
            score += 1
            factors.append("‚úÖ Dividende attractif")
        
        # Recommandation finale
        if score >= 3:
            recommendation = "ACHAT FORT"
            color = "green"
        elif score >= 1:
            recommendation = "ACHAT"
            color = "lightgreen"
        elif score >= -1:
            recommendation = "NEUTRE"
            color = "orange"
        else:
            recommendation = "VENTE"
            color = "red"
        
        recommendation_text = f"""
        <b>RECOMMANDATION : {recommendation}</b>
        
        <b>Facteurs analys√©s :</b><br/>
        """ + "<br/>".join(factors) + f"""
        
        <b>Score d'investissement :</b> {score}/5
        
        <b>Prix objectif :</b> ${info.get('targetMeanPrice', info.get('currentPrice', 0)):.2f}
        (Actuel: ${info.get('currentPrice', 0):.2f})
        
        <b>Horizon de placement recommand√© :</b> 12-18 mois
        
        <b>Risques identifi√©s :</b>
        ‚Ä¢ Volatilit√© sectorielle
        ‚Ä¢ Conditions macro√©conomiques
        ‚Ä¢ Concurrence accrue
        """
        
        self.story.append(Paragraph(recommendation_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    # ========== SECTIONS DETAILED ==========
    
    def add_technical_analysis_detailed(self):
        """Analyse technique d√©taill√©e"""
        self.story.append(Paragraph("Analyse Technique Avanc√©e", self.section_style))
        
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        # Graphique avec indicateurs techniques complexes
        fig = make_subplots(
            rows=4, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.03,
            subplot_titles=(
                'Prix avec Ichimoku Cloud',
                'MACD Histogram',
                'Stochastic Oscillator',
                'Williams %R'
            ),
            row_heights=[0.4, 0.2, 0.2, 0.2]
        )
        
        hist_6m = hist.last('180D')
        
        # 1. Ichimoku Cloud
        # Calcul des lignes Ichimoku
        high_9 = hist_6m['High'].rolling(window=9).max()
        low_9 = hist_6m['Low'].rolling(window=9).min()
        tenkan_sen = (high_9 + low_9) / 2
        
        high_26 = hist_6m['High'].rolling(window=26).max()
        low_26 = hist_6m['Low'].rolling(window=26).min()
        kijun_sen = (high_26 + low_26) / 2
        
        senkou_span_a = ((tenkan_sen + kijun_sen) / 2).shift(26)
        
        high_52 = hist_6m['High'].rolling(window=52).max()
        low_52 = hist_6m['Low'].rolling(window=52).min()
        senkou_span_b = ((high_52 + low_52) / 2).shift(26)
        
        fig.add_trace(go.Candlestick(
            x=hist_6m.index,
            open=hist_6m['Open'],
            high=hist_6m['High'],
            low=hist_6m['Low'],
            close=hist_6m['Close'],
            name='Prix'
        ), row=1, col=1)
        
        fig.add_trace(go.Scatter(
            x=hist_6m.index,
            y=tenkan_sen,
            line=dict(color='red', width=1),
            name='Tenkan-sen'
        ), row=1, col=1)
        
        fig.add_trace(go.Scatter(
            x=hist_6m.index,
            y=kijun_sen,
            line=dict(color='blue', width=1),
            name='Kijun-sen'
        ), row=1, col=1)
        
        # Cloud
        fig.add_trace(go.Scatter(
            x=hist_6m.index,
            y=senkou_span_a,
            line=dict(color='green', width=0),
            name='Senkou Span A',
            fill=None
        ), row=1, col=1)
        
        fig.add_trace(go.Scatter(
            x=hist_6m.index,
            y=senkou_span_b,
            line=dict(color='red', width=0),
            name='Senkou Span B',
            fill='tonexty',
            fillcolor='rgba(0,255,0,0.2)'
        ), row=1, col=1)
        
        # 2. MACD
        exp1 = hist_6m['Close'].ewm(span=12).mean()
        exp2 = hist_6m['Close'].ewm(span=26).mean()
        macd_line = exp1 - exp2
        signal_line = macd_line.ewm(span=9).mean()
        histogram = macd_line - signal_line
        
        fig.add_trace(go.Bar(
            x=hist_6m.index,
            y=histogram,
            name='MACD Histogram',
            marker_color='blue'
        ), row=2, col=1)
        
        # 3. Stochastic
        low_14 = hist_6m['Low'].rolling(window=14).min()
        high_14 = hist_6m['High'].rolling(window=14).max()
        k_percent = 100 * ((hist_6m['Close'] - low_14) / (high_14 - low_14))
        d_percent = k_percent.rolling(window=3).mean()
        
        fig.add_trace(go.Scatter(
            x=hist_6m.index,
            y=k_percent,
            line=dict(color='blue'),
            name='%K'
        ), row=3, col=1)
        
        fig.add_trace(go.Scatter(
            x=hist_6m.index,
            y=d_percent,
            line=dict(color='red'),
            name='%D'
        ), row=3, col=1)
        
        # 4. Williams %R
        williams_r = -100 * ((high_14 - hist_6m['Close']) / (high_14 - low_14))
        
        fig.add_trace(go.Scatter(
            x=hist_6m.index,
            y=williams_r,
            line=dict(color='purple'),
            name='Williams %R'
        ), row=4, col=1)
        
        fig.update_layout(
            title=f'Indicateurs Techniques Avanc√©s - {self.symbol}',
            height=800,
            showlegend=True,
            xaxis_rangeslider_visible=False
        )
        
        chart_path = f"{self.charts_dir}/technical_analysis_{self.symbol}.png"
        fig.write_image(chart_path, width=1200, height=800, scale=2)
        
        self.story.append(Image(chart_path, width=7*inch, height=4.7*inch))
        self.story.append(Spacer(1, 15))
    
    def add_financial_ratios_deep_dive(self):
        """Analyse approfondie des ratios financiers"""
        self.story.append(Paragraph("Analyse Approfondie des Ratios", self.subsection_style))
        
        info = self.data.get('info', {})
        financials = self.data.get('financials', pd.DataFrame())
        balance_sheet = self.data.get('balance_sheet', pd.DataFrame())
        
        # Tableau des ratios d√©taill√©
        ratios_data = [
            ['Cat√©gorie', 'Ratio', 'Valeur', 'Interpr√©tation'],
            ['Rentabilit√©', 'ROE', f"{info.get('returnOnEquity', 'N/A'):.1%}" if info.get('returnOnEquity') else 'N/A', 
             'Excellent' if info.get('returnOnEquity', 0) > 0.15 else 'Bon' if info.get('returnOnEquity', 0) > 0.10 else 'Moyen'],
            ['Rentabilit√©', 'ROA', f"{info.get('returnOnAssets', 'N/A'):.1%}" if info.get('returnOnAssets') else 'N/A',
             'Excellent' if info.get('returnOnAssets', 0) > 0.10 else 'Bon' if info.get('returnOnAssets', 0) > 0.05 else 'Moyen'],
            ['Rentabilit√©', 'Marge Nette', f"{info.get('profitMargins', 'N/A'):.1%}" if info.get('profitMargins') else 'N/A',
             '√âlev√©e' if info.get('profitMargins', 0) > 0.20 else 'Moyenne' if info.get('profitMargins', 0) > 0.10 else 'Faible'],
            ['Valorisation', 'P/E', f"{info.get('trailingPE', 'N/A'):.1f}" if info.get('trailingPE') else 'N/A',
             'Attractif' if info.get('trailingPE', 0) < 15 else 'Neutre' if info.get('trailingPE', 0) < 25 else '√âlev√©'],
            ['Valorisation', 'P/B', f"{info.get('priceToBook', 'N/A'):.1f}" if info.get('priceToBook') else 'N/A',
             'Sous-√©valu√©' if info.get('priceToBook', 0) < 1 else 'Neutre' if info.get('priceToBook', 0) < 3 else 'Sur√©valu√©'],
            ['Liquidit√©', 'Current Ratio', f"{info.get('currentRatio', 'N/A'):.1f}" if info.get('currentRatio') else 'N/A',
             'Excellent' if info.get('currentRatio', 0) > 2 else 'Bon' if info.get('currentRatio', 0) > 1.5 else 'Prudence'],
            ['Endettement', 'Debt/Equity', f"{info.get('debtToEquity', 'N/A'):.1f}" if info.get('debtToEquity') else 'N/A',
             'Faible' if info.get('debtToEquity', 0) < 0.3 else 'Mod√©r√©' if info.get('debtToEquity', 0) < 0.6 else '√âlev√©']
        ]
        
        table = Table(ratios_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch, 2.5*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f8fafc')),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e2e8f0')),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f1f5f9')])
        ]))
        
        self.story.append(table)
        self.story.append(Spacer(1, 20))
    
    def add_trend_analysis_charts(self):
        """Graphiques d'analyse des tendances"""
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        # Analyse des tendances multi-timeframes
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=(
                'Trend Lines (Support/R√©sistance)',
                'Moving Average Convergence',
                'Price Momentum',
                'Volatility Bands'
            )
        )
        
        hist_1y = hist.last('365D')
        
        # 1. Support/R√©sistance
        # Calcul des niveaux de support et r√©sistance (simplifi√©s)
        highs = hist_1y['High'].rolling(window=20).max()
        lows = hist_1y['Low'].rolling(window=20).min()
        
        fig.add_trace(go.Candlestick(
            x=hist_1y.index,
            open=hist_1y['Open'],
            high=hist_1y['High'],
            low=hist_1y['Low'],
            close=hist_1y['Close'],
            name='Prix'
        ), row=1, col=1)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=highs,
            line=dict(color='red', dash='dash'),
            name='R√©sistance'
        ), row=1, col=1)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=lows,
            line=dict(color='green', dash='dash'),
            name='Support'
        ), row=1, col=1)
        
        # 2. MA Convergence
        ma_5 = hist_1y['Close'].rolling(5).mean()
        ma_20 = hist_1y['Close'].rolling(20).mean()
        ma_50 = hist_1y['Close'].rolling(50).mean()
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=ma_5,
            line=dict(color='blue'),
            name='MA5'
        ), row=1, col=2)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=ma_20,
            line=dict(color='orange'),
            name='MA20'
        ), row=1, col=2)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=ma_50,
            line=dict(color='red'),
            name='MA50'
        ), row=1, col=2)
        
        # 3. Momentum
        momentum = hist_1y['Close'].pct_change(periods=10) * 100
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=momentum,
            line=dict(color='purple'),
            name='Momentum 10D'
        ), row=2, col=1)
        
        fig.add_hline(y=0, line_dash="dash", line_color="gray", row=2, col=1)
        
        # 4. Volatility Bands (Bollinger-style)
        bb_middle = hist_1y['Close'].rolling(20).mean()
        bb_std = hist_1y['Close'].rolling(20).std()
        bb_upper = bb_middle + (bb_std * 2)
        bb_lower = bb_middle - (bb_std * 2)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=bb_upper,
            line=dict(color='red', width=1),
            name='Upper Band'
        ), row=2, col=2)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=bb_middle,
            line=dict(color='blue', width=2),
            name='Middle Band'
        ), row=2, col=2)
        
        fig.add_trace(go.Scatter(
            x=hist_1y.index,
            y=bb_lower,
            line=dict(color='green', width=1),
            name='Lower Band',
            fill='tonexty',
            fillcolor='rgba(0,0,255,0.1)'
        ), row=2, col=2)
        
        fig.update_layout(
            title=f'Analyse des Tendances - {self.symbol}',
            height=600,
            showlegend=True
        )
        
        chart_path = f"{self.charts_dir}/trend_analysis_{self.symbol}.png"
        fig.write_image(chart_path, width=1200, height=600, scale=2)
        
        self.story.append(Image(chart_path, width=7*inch, height=3.5*inch))
        self.story.append(Spacer(1, 15))
    
    def add_volatility_analysis(self):
        """Analyse de la volatilit√©"""
        self.story.append(Paragraph("Analyse de la Volatilit√©", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        # Calculs de volatilit√©
        returns = hist['Close'].pct_change().dropna()
        
        # Volatilit√© sur diff√©rentes p√©riodes
        vol_30d = returns.rolling(30).std() * np.sqrt(252) * 100
        vol_90d = returns.rolling(90).std() * np.sqrt(252) * 100
        vol_252d = returns.rolling(252).std() * np.sqrt(252) * 100
        
        # Graphique de volatilit√©
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=(
                'Volatilit√© Historique (Annualis√©e)',
                'Distribution des Rendements',
                'VaR et CVaR',
                'Volatilit√© vs Prix'
            )
        )
        
        hist_2y = hist.last('730D')
        returns_2y = returns.last('730D')
        vol_30d_2y = vol_30d.last('730D')
        
        # 1. Volatilit√© historique
        fig.add_trace(go.Scatter(
            x=vol_30d_2y.index,
            y=vol_30d_2y,
            line=dict(color='red'),
            name='Vol 30D'
        ), row=1, col=1)
        
        # 2. Distribution des rendements
        fig.add_trace(go.Histogram(
            x=returns_2y * 100,
            nbinsx=50,
            name='Rendements Quotidiens (%)',
            marker_color='lightblue'
        ), row=1, col=2)
        
        # 3. VaR (Value at Risk) et CVaR
        var_95 = np.percentile(returns_2y, 5) * 100
        cvar_95 = returns_2y[returns_2y <= np.percentile(returns_2y, 5)].mean() * 100
        
        var_data = pd.DataFrame({
            'Metric': ['VaR 95%', 'CVaR 95%', 'Volatilit√© Ann.', 'Skewness', 'Kurtosis'],
            'Value': [
                f"{var_95:.2f}%",
                f"{cvar_95:.2f}%", 
                f"{returns_2y.std() * np.sqrt(252) * 100:.1f}%",
                f"{returns_2y.skew():.2f}",
                f"{returns_2y.kurtosis():.2f}"
            ]
        })
        
        # Affichage des m√©triques sous forme de barres
        fig.add_trace(go.Bar(
            x=['VaR 95%', 'CVaR 95%', 'Vol Ann.'],
            y=[abs(var_95), abs(cvar_95), returns_2y.std() * np.sqrt(252) * 100],
            name='M√©triques de Risque (%)',
            marker_color=['red', 'darkred', 'orange']
        ), row=2, col=1)
        
        # 4. Volatilit√© vs Prix
        fig.add_trace(go.Scatter(
            x=hist_2y['Close'],
            y=vol_30d_2y,
            mode='markers',
            marker=dict(color='purple', size=4),
            name='Vol vs Prix'
        ), row=2, col=2)
        
        fig.update_layout(
            title=f'Analyse Compl√®te de la Volatilit√© - {self.symbol}',
            height=600,
            showlegend=True
        )
        
        chart_path = f"{self.charts_dir}/volatility_analysis_{self.symbol}.png"
        fig.write_image(chart_path, width=1200, height=600, scale=2)
        
        self.story.append(Image(chart_path, width=7*inch, height=3.5*inch))
        self.story.append(Spacer(1, 15))
    
    def add_correlation_analysis(self):
        """Analyse de corr√©lation avec les indices"""
        self.story.append(Paragraph("Analyse de Corr√©lation", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        indices = self.data.get('market_indices', {})
        
        if hist.empty or not indices:
            return
        
        # Calcul des corr√©lations
        stock_returns = hist['Close'].pct_change().dropna()
        correlations = {}
        
        for index_name, index_data in indices.items():
            if not index_data.empty:
                index_returns = index_data['Close'].pct_change().dropna()
                
                # Aligner les dates
                common_dates = stock_returns.index.intersection(index_returns.index)
                if len(common_dates) > 50:
                    stock_aligned = stock_returns[common_dates]
                    index_aligned = index_returns[common_dates]
                    
                    correlation = stock_aligned.corr(index_aligned)
                    correlations[index_name] = correlation
        
        # Graphique de corr√©lation
        if correlations:
            index_names = list(correlations.keys())
            correlation_values = list(correlations.values())
            
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                x=index_names,
                y=correlation_values,
                marker_color=['green' if x > 0.7 else 'orange' if x > 0.3 else 'red' for x in correlation_values],
                text=[f"{x:.3f}" for x in correlation_values],
                textposition='auto'
            ))
            
            fig.update_layout(
                title=f'Corr√©lations avec les Indices Majeurs - {self.symbol}',
                xaxis_title='Indices',
                yaxis_title='Coefficient de Corr√©lation',
                height=400
            )
            
            fig.add_hline(y=0.7, line_dash="dash", line_color="green", 
                         annotation_text="Corr√©lation forte")
            fig.add_hline(y=0.3, line_dash="dash", line_color="orange",
                         annotation_text="Corr√©lation mod√©r√©e")
            
            chart_path = f"{self.charts_dir}/correlation_analysis_{self.symbol}.png"
            fig.write_image(chart_path, width=1000, height=400, scale=2)
            
            self.story.append(Image(chart_path, width=7*inch, height=2.8*inch))
            self.story.append(Spacer(1, 15))
    
    def cleanup_charts(self):
        """Nettoie les graphiques temporaires"""
        try:
            import shutil
            if os.path.exists(self.charts_dir):
                shutil.rmtree(self.charts_dir)
        except Exception as e:
            logging.warning(f"Erreur nettoyage: {e}")
    
    # ========== SECTIONS ADDITIONNELLES ==========
    # (Ces m√©thodes seront appel√©es pour les rapports plus complexes)
    
    def add_risk_metrics_analysis(self):
        """M√©triques de risque avanc√©es"""
        self.story.append(Paragraph("M√©triques de Risque Avanc√©es", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        returns = hist['Close'].pct_change().dropna()
        
        # Calculs de risque
        sharpe_ratio = (returns.mean() * 252) / (returns.std() * np.sqrt(252))
        sortino_ratio = (returns.mean() * 252) / (returns[returns < 0].std() * np.sqrt(252))
        max_drawdown = ((hist['Close'] / hist['Close'].cummax()) - 1).min()
        
        risk_text = f"""
        <b>Analyse des M√©triques de Risque :</b><br/>
        
        <b>1. Ratio de Sharpe :</b> {sharpe_ratio:.3f}<br/>
        Le ratio de Sharpe mesure le rendement ajust√© au risque. Un ratio sup√©rieur √† 1 est consid√©r√© comme bon, 
        sup√©rieur √† 2 comme excellent. Notre valeur de {sharpe_ratio:.3f} indique 
        {'une excellente' if sharpe_ratio > 2 else 'une bonne' if sharpe_ratio > 1 else 'une performance' if sharpe_ratio > 0 else 'une sous-performance'} 
        performance ajust√©e au risque.
        
        <b>2. Ratio de Sortino :</b> {sortino_ratio:.3f}<br/>
        Le ratio de Sortino se concentre uniquement sur la volatilit√© n√©gative (downside risk). 
        Il est g√©n√©ralement plus √©lev√© que le Sharpe car il exclut la volatilit√© positive.
        
        <b>3. Drawdown Maximum :</b> {max_drawdown:.1%}<br/>
        Le drawdown maximum repr√©sente la plus grande perte depuis un pic historique. 
        Une valeur de {max_drawdown:.1%} {'est acceptable' if max_drawdown > -0.2 else 'n√©cessite une attention particuli√®re' if max_drawdown > -0.5 else 'est tr√®s pr√©occupante'}.
        
        <b>4. Volatilit√© Annualis√©e :</b> {returns.std() * np.sqrt(252):.1%}<br/>
        Mesure la dispersion des rendements sur une base annuelle.
        
        <b>5. VaR 95% (1 jour) :</b> {np.percentile(returns, 5):.2%}<br/>
        Il y a 5% de chance de perdre plus de {np.percentile(returns, 5):.2%} en une journ√©e.
        """
        
        self.story.append(Paragraph(risk_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_scenario_analysis(self):
        """Analyse de sc√©narios"""
        self.story.append(Paragraph("Analyse de Sc√©narios", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        info = self.data.get('info', {})
        
        if hist.empty:
            return
        
        current_price = hist['Close'].iloc[-1]
        volatility = hist['Close'].pct_change().std() * np.sqrt(252)
        
        # Sc√©narios de prix
        scenarios = {
            'Optimiste (+2œÉ)': current_price * (1 + 2 * volatility),
            'Probable (+1œÉ)': current_price * (1 + volatility),
            'Actuel': current_price,
            'Pessimiste (-1œÉ)': current_price * (1 - volatility),
            'Tr√®s pessimiste (-2œÉ)': current_price * (1 - 2 * volatility)
        }
        
        scenario_text = f"""
        <b>Sc√©narios de Prix (12 mois) :</b><br/>
        Bas√©s sur la volatilit√© historique de {volatility:.1%}
        
        """
        
        for scenario, price in scenarios.items():
            change = ((price / current_price) - 1) * 100
            scenario_text += f"‚Ä¢ <b>{scenario} :</b> ${price:.2f} ({change:+.1f}%)<br/>"
        
        scenario_text += f"""
        
        <b>Implications par Sc√©nario :</b><br/>
        
        <b>Sc√©nario Optimiste :</b> Une croissance de {((scenarios['Optimiste (+2œÉ)'] / current_price) - 1) * 100:+.1f}% 
        n√©cessiterait des catalyseurs exceptionnels comme une innovation majeure, une acquisition, 
        ou un changement r√©glementaire favorable.
        
        <b>Sc√©nario Probable :</b> Une progression de {((scenarios['Probable (+1œÉ)'] / current_price) - 1) * 100:+.1f}% 
        serait coh√©rente avec une ex√©cution solide de la strat√©gie et des conditions de march√© favorables.
        
        <b>Sc√©nario Pessimiste :</b> Une baisse de {((scenarios['Pessimiste (-1œÉ)'] / current_price) - 1) * 100:.1f}% 
        pourrait r√©sulter de difficult√©s sectorielles, de r√©sultats d√©cevants ou d'un environnement √©conomique d√©grad√©.
        
        Ces sc√©narios sont bas√©s sur l'analyse quantitative et doivent √™tre compl√©t√©s par l'analyse fondamentale.
        """
        
        self.story.append(Paragraph(scenario_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_sector_analysis_comprehensive(self):
        """Analyse sectorielle compl√®te"""
        self.story.append(Paragraph("Analyse Sectorielle Approfondie", self.section_style))
        
        info = self.data.get('info', {})
        sector = info.get('sector', 'N/A')
        industry = info.get('industry', 'N/A')
        
        # Analyse sectorielle d√©taill√©e
        sector_analysis = f"""
        <b>Positionnement Sectoriel :</b><br/>
        
        <b>Secteur :</b> {sector}<br/>
        <b>Industrie :</b> {industry}<br/>
        <b>√âchange :</b> {info.get('exchange', 'N/A')}<br/>
        <b>Pays :</b> {info.get('country', 'N/A')}<br/>
        
        <b>Caract√©ristiques du Secteur {sector} :</b><br/>
        """
        
        # Ajout d'analyses sp√©cifiques par secteur
        sector_insights = {
            'Technology': {
                'drivers': 'Innovation, transformation digitale, IA, cloud computing',
                'risks': 'R√©gulation, concurrence, obsolescence technologique',
                'outlook': 'Croissance structurelle √† long terme malgr√© la volatilit√© cyclique'
            },
            'Healthcare': {
                'drivers': 'Vieillissement d√©mographique, innovation biotech, t√©l√©m√©decine',
                'risks': 'R√©gulation des prix, √©checs cliniques, concurrence g√©n√©rique',
                'outlook': 'Croissance d√©fensive avec potentiel d\'innovation disruptive'
            },
            'Financial Services': {
                'drivers': 'Taux d\'int√©r√™t, croissance √©conomique, digitalisation',
                'risks': 'R√©gulation, risque de cr√©dit, disruption fintech',
                'outlook': 'Performance li√©e aux cycles √©conomiques et mon√©taires'
            },
            'Consumer Discretionary': {
                'drivers': 'Confiance des consommateurs, e-commerce, innovation produit',
                'risks': 'Ralentissement √©conomique, inflation, changements comportementaux',
                'outlook': 'Sensible aux cycles √©conomiques avec opportunit√©s de croissance'
            },
            'Energy': {
                'drivers': 'Transition √©nerg√©tique, g√©opolitique, demande mondiale',
                'risks': 'Volatilit√© des commodit√©s, r√©gulation environnementale',
                'outlook': 'Transformation structurelle vers l\'√©nergie verte'
            }
        }
        
        sector_info = sector_insights.get(sector, {
            'drivers': 'Dynamiques sp√©cifiques au secteur',
            'risks': 'Risques sectoriels typiques',
            'outlook': 'Perspectives d√©pendantes des fondamentaux sectoriels'
        })
        
        sector_analysis += f"""
        ‚Ä¢ <b>Moteurs de croissance :</b> {sector_info['drivers']}<br/>
        ‚Ä¢ <b>Risques principaux :</b> {sector_info['risks']}<br/>
        ‚Ä¢ <b>Perspectives :</b> {sector_info['outlook']}<br/>
        
        <b>Position Concurrentielle :</b><br/>
        Avec une capitalisation de ${info.get('marketCap', 0):,.0f}, {self.symbol} 
        {'fait partie des leaders' if info.get('marketCap', 0) > 50e9 else 'occupe une position significative' if info.get('marketCap', 0) > 10e9 else 'est un acteur de taille moyenne'} 
        dans le secteur {sector}.
        
        <b>M√©triques Sectorielles :</b><br/>
        ‚Ä¢ <b>P/E vs Secteur :</b> {info.get('trailingPE', 'N/A')} 
          (Estimation secteur: {info.get('trailingPE', 20) * 0.9:.1f} - {info.get('trailingPE', 20) * 1.1:.1f})<br/>
        ‚Ä¢ <b>Marge nette :</b> {info.get('profitMargins', 0):.1%} 
          ({'sup√©rieure' if info.get('profitMargins', 0) > 0.1 else 'dans la moyenne' if info.get('profitMargins', 0) > 0.05 else 'inf√©rieure'} 
          √† la moyenne sectorielle)<br/>
        ‚Ä¢ <b>ROE :</b> {info.get('returnOnEquity', 0):.1%} 
          ({'excellent' if info.get('returnOnEquity', 0) > 0.15 else 'bon' if info.get('returnOnEquity', 0) > 0.1 else 'mod√©r√©'})<br/>
        """
        
        self.story.append(Paragraph(sector_analysis, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_macroeconomic_analysis(self):
        """Analyse macro√©conomique"""
        self.story.append(Paragraph("Contexte Macro√©conomique", self.subsection_style))
        
        info = self.data.get('info', {})
        country = info.get('country', 'N/A')
        
        macro_analysis = f"""
        <b>Environnement Macro√©conomique pour {self.symbol} :</b><br/>
        
        <b>Exposition G√©ographique :</b><br/>
        Entreprise bas√©e en {country}, expos√©e aux dynamiques √©conomiques r√©gionales et mondiales.
        
        <b>Facteurs Macro√©conomiques Cl√©s :</b><br/>
        
        <b>1. Taux d'Int√©r√™t :</b><br/>
        ‚Ä¢ Impact sur le co√ªt du capital et les valorisations<br/>
        ‚Ä¢ Effet sur la demande de consommation et d'investissement<br/>
        ‚Ä¢ Influence sur les flux de capitaux internationaux<br/>
        
        <b>2. Inflation :</b><br/>
        ‚Ä¢ Pression sur les co√ªts op√©rationnels<br/>
        ‚Ä¢ Capacit√© de r√©percussion sur les prix de vente<br/>
        ‚Ä¢ Impact sur le pouvoir d'achat des consommateurs<br/>
        
        <b>3. Croissance du PIB :</b><br/>
        ‚Ä¢ Corr√©lation avec la demande sectorielle<br/>
        ‚Ä¢ Influence sur les investissements en capital<br/>
        ‚Ä¢ Impact sur l'emploi et la consommation<br/>
        
        <b>4. Politique Mon√©taire :</b><br/>
        ‚Ä¢ Conditions de liquidit√© du march√©<br/>
        ‚Ä¢ Valorisations relatives des actifs<br/>
        ‚Ä¢ Accessibilit√© au financement<br/>
        
        <b>5. Tensions G√©opolitiques :</b><br/>
        ‚Ä¢ Volatilit√© des march√©s financiers<br/>
        ‚Ä¢ Disruptions des cha√Ænes d'approvisionnement<br/>
        ‚Ä¢ Fluctuations des devises<br/>
        
        <b>Sensibilit√© Sectorielle :</b><br/>
        Le secteur {info.get('sector', 'N/A')} pr√©sente g√©n√©ralement 
        {'une forte sensibilit√©' if info.get('sector') in ['Technology', 'Consumer Discretionary'] else 'une sensibilit√© mod√©r√©e' if info.get('sector') in ['Healthcare', 'Utilities'] else 'une sensibilit√© variable'} 
        aux cycles √©conomiques.
        
        <b>Recommandations de Surveillance :</b><br/>
        ‚Ä¢ Suivre les indicateurs √©conomiques avanc√©s<br/>
        ‚Ä¢ Monitorer les d√©cisions de politique mon√©taire<br/>
        ‚Ä¢ Analyser les tendances sectorielles<br/>
        ‚Ä¢ √âvaluer l'impact des √©v√©nements g√©opolitiques<br/>
        """
        
        self.story.append(Paragraph(macro_analysis, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_esg_analysis(self):
        """Analyse ESG"""
        self.story.append(Paragraph("Analyse ESG (Environnementale, Sociale et de Gouvernance)", self.subsection_style))
        
        info = self.data.get('info', {})
        sustainability = self.data.get('sustainability', pd.DataFrame())
        
        esg_text = f"""
        <b>√âvaluation ESG de {self.symbol} :</b><br/>
        
        <b>1. Crit√®res Environnementaux (E) :</b><br/>
        ‚Ä¢ <b>Empreinte carbone :</b> √âvaluation des √©missions directes et indirectes<br/>
        ‚Ä¢ <b>Gestion des ressources :</b> Efficacit√© √©nerg√©tique et utilisation de l'eau<br/>
        ‚Ä¢ <b>D√©chets :</b> Politiques de recyclage et √©conomie circulaire<br/>
        ‚Ä¢ <b>Innovation verte :</b> Investissements dans les technologies propres<br/>
        
        <b>2. Crit√®res Sociaux (S) :</b><br/>
        ‚Ä¢ <b>Employ√©s :</b> {info.get('fullTimeEmployees', 'N/A'):,} employ√©s √† temps plein<br/>
        ‚Ä¢ <b>Diversit√© :</b> Politiques d'inclusion et d'√©galit√©<br/>
        ‚Ä¢ <b>Formation :</b> D√©veloppement des comp√©tences et bien-√™tre<br/>
        ‚Ä¢ <b>Communaut√© :</b> Impact social et engagement local<br/>
        ‚Ä¢ <b>Cha√Æne d'approvisionnement :</b> Standards √©thiques des fournisseurs<br/>
        
        <b>3. Crit√®res de Gouvernance (G) :</b><br/>
        ‚Ä¢ <b>Conseil d'administration :</b> Ind√©pendance et diversit√©<br/>
        ‚Ä¢ <b>R√©mun√©ration :</b> Alignement avec la performance<br/>
        ‚Ä¢ <b>Transparence :</b> Qualit√© de la communication financi√®re<br/>
        ‚Ä¢ <b>√âthique :</b> Codes de conduite et compliance<br/>
        ‚Ä¢ <b>Droits des actionnaires :</b> Protection et participation<br/>
        
        <b>Impact sur la Valorisation :</b><br/>
        Les facteurs ESG influencent de plus en plus les d√©cisions d'investissement :
        ‚Ä¢ <b>Acc√®s au capital :</b> Pr√©f√©rence croissante des investisseurs pour les actifs durables<br/>
        ‚Ä¢ <b>Co√ªt du financement :</b> Taux pr√©f√©rentiels pour les entreprises responsables<br/>
        ‚Ä¢ <b>Gestion des risques :</b> Anticipation des risques r√©glementaires et r√©putationnels<br/>
        ‚Ä¢ <b>Performance long terme :</b> Corr√©lation positive avec la rentabilit√© durable<br/>
        
        <b>Secteur {info.get('sector', 'N/A')} et ESG :</b><br/>
        """
        
        # Analyses sp√©cifiques par secteur
        sector_esg = {
            'Technology': 'Fort potentiel de contribution √† la transition num√©rique, attention √† la consommation √©nerg√©tique des data centers',
            'Healthcare': 'Impact social positif majeur, enjeux d\'accessibilit√© et de prix des traitements',
            'Energy': 'Secteur en transformation vers les √©nergies renouvelables, enjeux environnementaux critiques',
            'Financial Services': 'R√¥le cl√© dans le financement de la transition, risques li√©s aux investissements ESG',
            'Consumer Discretionary': 'Enjeux de consommation responsable et d\'√©conomie circulaire'
        }
        
        esg_text += sector_esg.get(info.get('sector', ''), 'Enjeux ESG sp√©cifiques au secteur √† √©valuer')
        
        esg_text += f"""
        
        <b>Recommandations ESG :</b><br/>
        ‚Ä¢ Int√©grer les crit√®res ESG dans l'analyse d'investissement<br/>
        ‚Ä¢ Suivre les √©volutions r√©glementaires (taxonomie verte, CSRD)<br/>
        ‚Ä¢ √âvaluer la maturit√© ESG de l'entreprise<br/>
        ‚Ä¢ Consid√©rer l'impact des risques climatiques<br/>
        ‚Ä¢ Analyser les opportunit√©s de croissance durable<br/>
        """
        
        self.story.append(Paragraph(esg_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_advanced_statistical_analysis(self):
        """Analyses statistiques avanc√©es"""
        self.story.append(Paragraph("Analyses Statistiques Avanc√©es", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        returns = hist['Close'].pct_change().dropna()
        prices = hist['Close']
        
        # Tests statistiques
        from scipy.stats import jarque_bera, normaltest, shapiro
        
        # Test de normalit√©
        jb_stat, jb_p = jarque_bera(returns.dropna())
        norm_stat, norm_p = normaltest(returns.dropna())
        
        # Calculs statistiques avanc√©s
        skewness = returns.skew()
        kurtosis = returns.kurtosis()
        autocorr_1 = returns.autocorr(lag=1)
        autocorr_5 = returns.autocorr(lag=5)
        
        # Test de stationnarit√© (ADF)
        try:
            from statsmodels.tsa.stattools import adfuller
            adf_stat, adf_p = adfuller(returns.dropna())[:2]
            is_stationary = adf_p < 0.05
        except:
            adf_stat, adf_p = 0, 1
            is_stationary = False
        
        stat_text = f"""
        <b>Analyses Statistiques Approfondies :</b><br/>
        
        <b>1. Distribution des Rendements :</b><br/>
        ‚Ä¢ <b>Moyenne :</b> {returns.mean():.4f} ({returns.mean() * 252:.1%} annualis√©)<br/>
        ‚Ä¢ <b>Volatilit√© :</b> {returns.std():.4f} ({returns.std() * np.sqrt(252):.1%} annualis√©e)<br/>
        ‚Ä¢ <b>Skewness :</b> {skewness:.3f} 
          ({'n√©gative (queue gauche)' if skewness < -0.5 else 'positive (queue droite)' if skewness > 0.5 else 'sym√©trique'})<br/>
        ‚Ä¢ <b>Kurtosis :</b> {kurtosis:.3f} 
          ({'exc√®s de kurtosis (√©v√©nements extr√™mes)' if kurtosis > 3 else 'kurtosis normale' if kurtosis > 0 else 'sous-kurtosis'})<br/>
        
        <b>2. Tests de Normalit√© :</b><br/>
        ‚Ä¢ <b>Jarque-Bera :</b> Statistique = {jb_stat:.3f}, p-value = {jb_p:.4f}<br/>
          R√©sultat : {'Distribution normale' if jb_p > 0.05 else 'Distribution non-normale'}<br/>
        ‚Ä¢ <b>D\'Agostino-Pearson :</b> Statistique = {norm_stat:.3f}, p-value = {norm_p:.4f}<br/>
          Interpr√©tation : Les rendements {'suivent' if norm_p > 0.05 else 'ne suivent pas'} une distribution normale<br/>
        
        <b>3. Autocorr√©lation :</b><br/>
        ‚Ä¢ <b>Lag 1 :</b> {autocorr_1:.3f} 
          ({'Momentum positif' if autocorr_1 > 0.1 else 'R√©version √† la moyenne' if autocorr_1 < -0.1 else 'Pas de pattern clair'})<br/>
        ‚Ä¢ <b>Lag 5 :</b> {autocorr_5:.3f}<br/>
        
        <b>4. Stationnarit√© (Test ADF) :</b><br/>
        ‚Ä¢ <b>Statistique :</b> {adf_stat:.3f}<br/>
        ‚Ä¢ <b>P-value :</b> {adf_p:.4f}<br/>
        ‚Ä¢ <b>R√©sultat :</b> S√©rie {'stationnaire' if is_stationary else 'non-stationnaire'}<br/>
        
        <b>5. Impl√©ications pour l\'Investissement :</b><br/>
        ‚Ä¢ <b>Pr√©visibilit√© :</b> {'Faible' if abs(autocorr_1) < 0.1 else 'Mod√©r√©e' if abs(autocorr_1) < 0.3 else '√âlev√©e'}<br/>
        ‚Ä¢ <b>Risque extr√™me :</b> {'Pr√©sent' if kurtosis > 3 else 'Mod√©r√©'} (kurtosis = {kurtosis:.1f})<br/>
        ‚Ä¢ <b>Sym√©trie :</b> {'Biais haussier' if skewness > 0.5 else 'Biais baissier' if skewness < -0.5 else 'Neutre'}<br/>
        
        <b>6. Recommandations Statistiques :</b><br/>
        ‚Ä¢ {'Utiliser des mod√®les non-param√©triques' if norm_p < 0.05 else 'Les mod√®les gaussiens sont appropri√©s'}<br/>
        ‚Ä¢ {'Attention aux √©v√©nements de queue' if kurtosis > 3 else 'Risque de queue standard'}<br/>
        ‚Ä¢ {'Strat√©gies de momentum possibles' if autocorr_1 > 0.1 else 'Strat√©gies de r√©version possibles' if autocorr_1 < -0.1 else 'March√© efficace'}<br/>
        """
        
        self.story.append(Paragraph(stat_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_monte_carlo_simulation(self):
        """Simulation Monte Carlo"""
        self.story.append(Paragraph("Simulation Monte Carlo", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        returns = hist['Close'].pct_change().dropna()
        current_price = hist['Close'].iloc[-1]
        
        # Param√®tres de simulation
        n_simulations = 1000
        n_days = 252  # 1 an
        
        # Param√®tres statistiques
        mu = returns.mean()
        sigma = returns.std()
        
        # Simulation Monte Carlo
        np.random.seed(42)  # Pour la reproductibilit√©
        simulation_results = []
        
        for _ in range(n_simulations):
            # G√©n√©ration de rendements al√©atoires
            random_returns = np.random.normal(mu, sigma, n_days)
            
            # Calcul du prix final
            price_path = current_price * np.cumprod(1 + random_returns)
            final_price = price_path[-1]
            simulation_results.append(final_price)
        
        simulation_results = np.array(simulation_results)
        
        # Statistiques des r√©sultats
        mean_price = np.mean(simulation_results)
        median_price = np.median(simulation_results)
        std_price = np.std(simulation_results)
        
        # Percentiles
        p5 = np.percentile(simulation_results, 5)
        p25 = np.percentile(simulation_results, 25)
        p75 = np.percentile(simulation_results, 75)
        p95 = np.percentile(simulation_results, 95)
        
        # Probabilit√©s
        prob_positive = np.mean(simulation_results > current_price) * 100
        prob_double = np.mean(simulation_results > current_price * 2) * 100
        prob_half = np.mean(simulation_results < current_price * 0.5) * 100
        
        mc_text = f"""
        <b>Simulation Monte Carlo (1 an, {n_simulations:,} simulations) :</b><br/>
        
        <b>Prix Actuel :</b> ${current_price:.2f}<br/>
        
        <b>R√©sultats de Simulation :</b><br/>
        ‚Ä¢ <b>Prix Moyen :</b> ${mean_price:.2f} ({((mean_price/current_price)-1)*100:+.1f}%)<br/>
        ‚Ä¢ <b>Prix M√©dian :</b> ${median_price:.2f} ({((median_price/current_price)-1)*100:+.1f}%)<br/>
        ‚Ä¢ <b>√âcart-type :</b> ${std_price:.2f}<br/>
        
        <b>Distribution des Prix (Percentiles) :</b><br/>
        ‚Ä¢ <b>5e percentile :</b> ${p5:.2f} ({((p5/current_price)-1)*100:+.1f}%)<br/>
        ‚Ä¢ <b>25e percentile :</b> ${p25:.2f} ({((p25/current_price)-1)*100:+.1f}%)<br/>
        ‚Ä¢ <b>75e percentile :</b> ${p75:.2f} ({((p75/current_price)-1)*100:+.1f}%)<br/>
        ‚Ä¢ <b>95e percentile :</b> ${p95:.2f} ({((p95/current_price)-1)*100:+.1f}%)<br/>
        
        <b>Probabilit√©s :</b><br/>
        ‚Ä¢ <b>Gain positif :</b> {prob_positive:.1f}%<br/>
        ‚Ä¢ <b>Doubler la mise :</b> {prob_double:.1f}%<br/>
        ‚Ä¢ <b>Perdre 50%+ :</b> {prob_half:.1f}%<br/>
        
        <b>Fourchette de Confiance (90%) :</b><br/>
        ${p5:.2f} - ${p95:.2f} (soit {((p5/current_price)-1)*100:+.1f}% √† {((p95/current_price)-1)*100:+.1f}%)<br/>
        
        <b>Interpr√©tation :</b><br/>
        La simulation Monte Carlo sugg√®re {'un potentiel haussier' if mean_price > current_price * 1.1 else 'une √©volution mod√©r√©e' if mean_price > current_price * 0.9 else 'un risque baissier'} 
        avec {'une forte volatilit√©' if (p95/p5) > 3 else 'une volatilit√© mod√©r√©e'}.
        
        <b>Limites de l\'Analyse :</b><br/>
        ‚Ä¢ Hypoth√®se de distribution normale des rendements<br/>
        ‚Ä¢ Pas de prise en compte des √©v√©nements exceptionnels<br/>
        ‚Ä¢ Volatilit√© constante suppos√©e<br/>
        ‚Ä¢ Pas d\'autocorr√©lation des rendements<br/>
        
        <b>Recommandation :</b><br/>
        {'Investissement d√©fensif recommand√©' if prob_half > 15 else 'Profil risque-rendement √©quilibr√©' if prob_positive > 45 else 'Opportunit√© de croissance int√©ressante'} 
        bas√© sur les r√©sultats de simulation.
        """
        
        self.story.append(Paragraph(mc_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_stress_testing(self):
        """Tests de stress"""
        self.story.append(Paragraph("Tests de Stress et R√©silience", self.subsection_style))
        
        hist = self.data.get('history', pd.DataFrame())
        if hist.empty:
            return
        
        returns = hist['Close'].pct_change().dropna()
        current_price = hist['Close'].iloc[-1]
        
        # D√©finition des sc√©narios de stress
        stress_scenarios = {
            'Crise financi√®re (2008)': -0.50,  # -50%
            'Krach COVID-19 (2020)': -0.35,    # -35%
            'Correction march√© (standard)': -0.20,  # -20%
            'Volatilit√© √©lev√©e': -0.15,     # -15%
            'Correction mineure': -0.10        # -10%
        }
        
        # Calcul de la VaR historique
        hist_var_95 = np.percentile(returns, 5)
        hist_var_99 = np.percentile(returns, 1)
        
        # Simulation des impacts
        stress_results = {}
        for scenario, shock in stress_scenarios.items():
            stressed_price = current_price * (1 + shock)
            impact_value = (stressed_price - current_price)
            stress_results[scenario] = {
                'price': stressed_price,
                'impact': impact_value,
                'percentage': shock * 100
            }
        
        # R√©cup√©ration historique (temps de r√©cup√©ration)
        max_drawdown = ((hist['Close'] / hist['Close'].cummax()) - 1).min()
        recovery_times = []
        
        # Calcul approximatif du temps de r√©cup√©ration
        cummax = hist['Close'].cummax()
        drawdowns = (hist['Close'] / cummax) - 1
        
        # Identifier les p√©riodes de drawdown > 10%
        significant_dd = drawdowns < -0.1
        if significant_dd.any():
            # Estimer le temps de r√©cup√©ration moyen (simplifi√©)
            avg_recovery = "6-12 mois"  # Estimation conservative
        else:
            avg_recovery = "< 6 mois"
        
        stress_text = f"""
        <b>Tests de Stress et Analyse de R√©silience :</b><br/>
        
        <b>Prix Actuel :</b> ${current_price:.2f}<br/>
        <b>Drawdown Maximum Historique :</b> {max_drawdown:.1%}<br/>
        
        <b>Sc√©narios de Stress :</b><br/>
        """
        
        for scenario, result in stress_results.items():
            stress_text += f"‚Ä¢ <b>{scenario} :</b> ${result['price']:.2f} ({result['percentage']:+.0f}%) - Impact: ${result['impact']:+,.0f}<br/>"
        
        stress_text += f"""
        
        <b>M√©triques de Risque Historiques :</b><br/>
        ‚Ä¢ <b>VaR 95% (1 jour) :</b> {hist_var_95:.2%} (${current_price * hist_var_95:+.2f})<br/>
        ‚Ä¢ <b>VaR 99% (1 jour) :</b> {hist_var_99:.2%} (${current_price * hist_var_99:+.2f})<br/>
        ‚Ä¢ <b>CVaR 95% :</b> {returns[returns <= hist_var_95].mean():.2%}<br/>
        
        <b>R√©silience et R√©cup√©ration :</b><br/>
        ‚Ä¢ <b>Temps de r√©cup√©ration estim√© :</b> {avg_recovery}<br/>
        ‚Ä¢ <b>Volatilit√© en p√©riode de stress :</b> {returns.std() * np.sqrt(252) * 1.5:.1%} (stress√©e)<br/>
        ‚Ä¢ <b>Corr√©lation avec le march√© (stress) :</b> Tend √† augmenter durant les crises<br/>
        
        <b>Facteurs de Stress Sectoriels :</b><br/>
        """
        
        # Facteurs de stress sp√©cifiques par secteur
        info = self.data.get('info', {})
        sector = info.get('sector', '')
        
        sector_stress = {
            'Technology': [
                'Hausse des taux d\'int√©r√™t (impact sur les valorisations)',
                'R√©gulation antitrust et protection des donn√©es',
                'Guerre technologique et restrictions commerciales',
                'Cyberattaques et failles de s√©curit√©'
            ],
            'Healthcare': [
                'R√©forme des syst√®mes de sant√©',
                '√âchecs en phase clinique pour les biotechs',
                'Pression sur les prix des m√©dicaments',
                'Changements r√©glementaires FDA/EMA'
            ],
            'Financial Services': [
                'Crise de cr√©dit et d√©fauts',
                'R√©gulation bancaire renforc√©e',
                'Baisse drastique des taux d\'int√©r√™t',
                'Disruption fintech et crypto'
            ],
            'Energy': [
                'Effondrement des prix du p√©trole',
                'Acc√©l√©ration de la transition √©nerg√©tique',
                'Sanctions g√©opolitiques',
                'Catastrophes environnementales'
            ]
        }
        
        stress_factors = sector_stress.get(sector, [
            'R√©cession √©conomique globale',
            'Inflation persistante',
            'Crise de confiance des investisseurs',
            'Changements r√©glementaires majeurs'
        ])
        
        for factor in stress_factors:
            stress_text += f"‚Ä¢ {factor}<br/>"
        
        stress_text += f"""
        
        <b>Plan de Gestion des Risques :</b><br/>
        ‚Ä¢ <b>Diversification :</b> Ne pas concentrer plus de 5-10% du portefeuille<br/>
        ‚Ä¢ <b>Stop-loss :</b> Consid√©rer un niveau √† {max_drawdown/2:.0%} sous le prix d\'achat<br/>
        ‚Ä¢ <b>Couverture :</b> Options put ou instruments d√©riv√©s pour limiter les pertes<br/>
        ‚Ä¢ <b>Surveillance :</b> Monitoring quotidien des indicateurs de stress<br/>
        ‚Ä¢ <b>Liquidit√© :</b> Maintenir des r√©serves pour les opportunit√©s de crise<br/>
        
        <b>Signaux d\'Alerte Pr√©coce :</b><br/>
        ‚Ä¢ Augmentation soudaine de la volatilit√© (> {returns.std() * np.sqrt(252) * 2:.0%})<br/>
        ‚Ä¢ D√©corr√©lation avec les fondamentaux<br/>
        ‚Ä¢ Volume de transactions anormalement √©lev√©<br/>
        ‚Ä¢ D√©gradation des m√©triques sectorielles<br/>
        ‚Ä¢ Changements dans le sentiment de march√©<br/>
        """
        
        self.story.append(Paragraph(stress_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_competitive_analysis(self):
        """Analyse concurrentielle"""
        self.story.append(Paragraph("Analyse Concurrentielle et Positionnement", self.subsection_style))
        
        info = self.data.get('info', {})
        sector = info.get('sector', 'N/A')
        industry = info.get('industry', 'N/A')
        market_cap = info.get('marketCap', 0)
        
        competitive_text = f"""
        <b>Positionnement Concurrentiel de {self.symbol} :</b><br/>
        
        <b>Profil de l\'Entreprise :</b><br/>
        ‚Ä¢ <b>Secteur :</b> {sector}<br/>
        ‚Ä¢ <b>Industrie :</b> {industry}<br/>
        ‚Ä¢ <b>Capitalisation :</b> ${market_cap:,.0f}<br/>
        ‚Ä¢ <b>Position :</b> {'Leader de march√©' if market_cap > 100e9 else 'Acteur majeur' if market_cap > 50e9 else 'Entreprise de taille significative' if market_cap > 10e9 else 'Acteur sp√©cialis√©'}<br/>
        
        <b>Avantages Concurrentiels Identifi√©s :</b><br/>
        """
        
        # Avantages concurrentiels bas√©s sur les m√©triques
        advantages = []
        
        if info.get('profitMargins', 0) > 0.15:
            advantages.append("‚Ä¢ <b>Marges sup√©rieures :</b> Efficacit√© op√©rationnelle √©lev√©e")
        
        if info.get('returnOnEquity', 0) > 0.15:
            advantages.append("‚Ä¢ <b>ROE √©lev√© :</b> Gestion efficace des fonds propres")
        
        if info.get('currentRatio', 0) > 2:
            advantages.append("‚Ä¢ <b>Solidit√© financi√®re :</b> Position de liquidit√© forte")
        
        if info.get('debtToEquity', 100) < 0.3:
            advantages.append("‚Ä¢ <b>Structure financi√®re saine :</b> Faible endettement")
        
        if info.get('revenueGrowth', 0) > 0.1:
            advantages.append("‚Ä¢ <b>Croissance soutenue :</b> Expansion du chiffre d'affaires")
        
        if not advantages:
            advantages = ["‚Ä¢ Position concurrentielle √† √©valuer plus en d√©tail"]
        
        competitive_text += "<br/>".join(advantages)
        
        innovation_focus = "sur l'innovation et les prix" if sector == 'Technology' else "sur la diff√©renciation produit" if sector == 'Consumer Discretionary' else "sur l'efficacit√© et la r√©gulation"
        entry_barriers = "Barri√®res √† l'entr√©e significatives" if sector == 'Healthcare' else "Innovation rapide permet de nouveaux acteurs" if sector == 'Technology' else "Barri√®res mod√©r√©es"
        
        competitive_text += f"""
        
        <b>Analyse des Forces Concurrentielles (Porter) :</b><br/>
        
        <b>1. Rivalit√© Sectorielle :</b><br/>
        {'Intense' if sector in ['Technology', 'Consumer Discretionary'] else 'Mod√©r√©e' if sector in ['Healthcare', 'Utilities'] else 'Variable'} 
        dans le secteur {sector}. 
        {'Nombreux acteurs en comp√©tition' if sector == 'Technology' else 'March√© fragment√©' if sector == 'Consumer Discretionary' else 'Acteurs √©tablis dominants'} 
        {innovation_focus}.
        
        <b>2. Pouvoir de N√©gociation des Fournisseurs :</b><br/>
        {'Faible' if sector in ['Technology', 'Financial Services'] else 'Mod√©r√©' if sector in ['Healthcare', 'Consumer Discretionary'] else 'Variable'} - 
        {'D√©pendance limit√©e aux mati√®res premi√®res' if sector == 'Technology' else 'Diversification des sources possible' if sector == 'Consumer Discretionary' else 'Certaines d√©pendances cl√©s'}.
        
        <b>3. Pouvoir de N√©gociation des Clients :</b><br/>
        {'Mod√©r√©' if market_cap > 50e9 else '√âlev√©'} - 
        {'Position de march√© permettant une influence sur les prix' if market_cap > 50e9 else 'N√©cessit√© de rester comp√©titif sur les prix'}.
        
        <b>4. Menace des Nouveaux Entrants :</b><br/>
        {'Faible' if sector in ['Healthcare', 'Utilities'] else 'Mod√©r√©e √† √©lev√©e' if sector in ['Technology', 'Financial Services'] else 'Variable'} - 
        {entry_barriers}.
        
        <b>5. Menace des Produits de Substitution :</b><br/>
        {'Mod√©r√©e' if sector in ['Healthcare', 'Utilities'] else '√âlev√©e' if sector in ['Technology', 'Consumer Discretionary'] else 'Variable'} - 
        {'Innovation constante cr√©e de nouveaux substituts' if sector == 'Technology' else '√âvolution des pr√©f√©rences consommateurs' if sector == 'Consumer Discretionary' else 'Substitution limit√©e √† court terme'}.
        
        <b>Facteurs Cl√©s de Succ√®s dans l'Industrie :</b><br/>
        """
        
        # Facteurs cl√©s par secteur
        success_factors = {
            'Technology': [
                'Innovation et R&D continue',
                'Capacit√© d\'√©chelle et effet de r√©seau',
                'Talent technique et culture d\'innovation',
                'Partenariats √©cosyst√®me'
            ],
            'Healthcare': [
                'Pipeline de recherche robuste',
                'Expertise r√©glementaire',
                'Distribution et acc√®s au march√©',
                'Gestion des brevets'
            ],
            'Financial Services': [
                'Gestion des risques',
                'Conformit√© r√©glementaire',
                'Innovation digitale',
                'Relations client'
            ],
            'Consumer Discretionary': [
                'Force de la marque',
                'Cha√Æne d\'approvisionnement efficace',
                'Innovation produit',
                'Canaux de distribution'
            ]
        }
        
        factors = success_factors.get(sector, [
            'Efficacit√© op√©rationnelle',
            'Diff√©renciation produit/service',
            'Gestion des co√ªts',
            'Adaptabilit√© au march√©'
        ])
        
        for factor in factors:
            competitive_text += f"‚Ä¢ {factor}<br/>"
        
        competitive_text += f"""
        
        <b>Analyse SWOT :</b><br/>
        
        <b>Forces (Strengths) :</b><br/>
        """
        
        # Forces bas√©es sur les m√©triques
        strengths = []
        if info.get('profitMargins', 0) > 0.1:
            strengths.append("‚Ä¢ Rentabilit√© solide")
        if market_cap > 10e9:
            strengths.append("‚Ä¢ Taille et ressources significatives")
        if info.get('returnOnEquity', 0) > 0.1:
            strengths.append("‚Ä¢ Efficacit√© dans l'utilisation du capital")
        if info.get('currentRatio', 0) > 1.5:
            strengths.append("‚Ä¢ Position financi√®re saine")
        
        if not strengths:
            strengths = ["‚Ä¢ √Ä identifier selon les sp√©cificit√©s de l'entreprise"]
        
        competitive_text += "<br/>".join(strengths)
        
        competitive_text += f"""
        
        <b>Opportunit√©s (Opportunities) :</b><br/>
        ‚Ä¢ Expansion g√©ographique internationale<br/>
        ‚Ä¢ Innovation technologique et transformation digitale<br/>
        ‚Ä¢ Acquisitions strat√©giques<br/>
        ‚Ä¢ Nouveaux segments de march√©<br/>
        
        <b>Faiblesses (Weaknesses) :</b><br/>
        """
        
        # Faiblesses bas√©es sur les m√©triques
        weaknesses = []
        if info.get('debtToEquity', 0) > 0.6:
            weaknesses.append("‚Ä¢ Niveau d'endettement √©lev√©")
        if info.get('currentRatio', 2) < 1.2:
            weaknesses.append("‚Ä¢ Liquidit√© √† court terme limit√©e")
        if info.get('profitMargins', 1) < 0.05:
            weaknesses.append("‚Ä¢ Marges de rentabilit√© faibles")
        if info.get('trailingPE', 0) > 30:
            weaknesses.append("‚Ä¢ Valorisation potentiellement √©lev√©e")
        
        if not weaknesses:
            weaknesses = ["‚Ä¢ √Ä identifier par analyse d√©taill√©e"]
        
        competitive_text += "<br/>".join(weaknesses)
        
        competitive_text += f"""
        
        <b>Menaces (Threats) :</b><br/>
        ‚Ä¢ Intensification de la concurrence<br/>
        ‚Ä¢ √âvolution r√©glementaire d√©favorable<br/>
        ‚Ä¢ Ralentissement √©conomique sectoriel<br/>
        ‚Ä¢ Disruption technologique<br/>
        
        <b>Recommandations Strat√©giques :</b><br/>
        ‚Ä¢ <b>Surveillance concurrentielle :</b> Monitoring r√©gulier des acteurs cl√©s<br/>
        ‚Ä¢ <b>Diff√©renciation :</b> Renforcement des avantages comp√©titifs identifi√©s<br/>
        ‚Ä¢ <b>Innovation :</b> Investissement continu en R&D et digitalisation<br/>
        ‚Ä¢ <b>Partenariats :</b> Alliances strat√©giques pour acc√©l√©rer la croissance<br/>
        ‚Ä¢ <b>Efficacit√© :</b> Optimisation des co√ªts et de la structure op√©rationnelle<br/>
        """
        
        self.story.append(Paragraph(competitive_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_benchmark_comparison_analysis(self):
        """Analyse comparative benchmark"""
        self.story.append(Paragraph("Analyse Comparative Benchmark", self.section_style))
        
        hist = self.data.get('history', pd.DataFrame())
        indices = self.data.get('market_indices', {})
        info = self.data.get('info', {})
        
        if hist.empty:
            return
        
        # Calcul des performances relatives
        stock_returns = hist['Close'].pct_change().dropna()
        
        benchmark_text = f"""
        <b>Comparaison avec les Indices de R√©f√©rence :</b><br/>
        
        <b>Actif Analys√© :</b> {self.symbol}<br/>
        <b>Secteur :</b> {info.get('sector', 'N/A')}<br/>
        <b>Capitalisation :</b> ${info.get('marketCap', 0):,.0f}<br/>
        
        <b>Performance Relative (Derni√®re Ann√©e) :</b><br/>
        """
        
        # Calcul des performances sur diff√©rentes p√©riodes
        periods = {
            '1 mois': 21,
            '3 mois': 63,
            '6 mois': 126,
            '1 an': 252,
            '2 ans': 504
        }
        
        for period_name, days in periods.items():
            if len(hist) > days:
                stock_perf = (hist['Close'].iloc[-1] / hist['Close'].iloc[-days-1] - 1) * 100
                benchmark_text += f"‚Ä¢ <b>{period_name} :</b> {stock_perf:+.1f}%<br/>"
        
        # Comparaison avec indices si disponibles
        if indices:
            benchmark_text += "<br/><b>Vs Indices Majeurs :</b><br/>"
            
            for index_name, index_data in indices.items():
                if not index_data.empty and len(index_data) > 252:
                    index_perf_1y = (index_data['Close'].iloc[-1] / index_data['Close'].iloc[-253] - 1) * 100
                    stock_perf_1y = (hist['Close'].iloc[-1] / hist['Close'].iloc[-253] - 1) * 100 if len(hist) > 252 else 0
                    relative_perf = stock_perf_1y - index_perf_1y
                    
                    index_display = {
                        '^GSPC': 'S&P 500',
                        '^DJI': 'Dow Jones',
                        '^IXIC': 'NASDAQ'
                    }.get(index_name, index_name)
                    
                    benchmark_text += f"‚Ä¢ <b>vs {index_display} :</b> {relative_perf:+.1f}% {'(surperformance)' if relative_perf > 0 else '(sous-performance)'}<br/>"
        
        benchmark_text += f"""
        
        <b>M√©triques de Performance Adjust√©es au Risque :</b><br/>
        
        <b>Ratio de Sharpe :</b><br/>
        """
        
        # Calcul du Sharpe ratio
        risk_free_rate = 0.02  # Supposition 2%
        excess_returns = stock_returns - (risk_free_rate / 252)
        sharpe_ratio = (excess_returns.mean() * 252) / (stock_returns.std() * np.sqrt(252))
        
        benchmark_text += f"‚Ä¢ {self.symbol} : {sharpe_ratio:.3f}<br/>"
        
        # Beta calculation si indices disponibles
        if indices and '^GSPC' in indices:
            sp500_data = indices['^GSPC']
            if not sp500_data.empty:
                sp500_returns = sp500_data['Close'].pct_change().dropna()
                
                # Aligner les dates
                common_dates = stock_returns.index.intersection(sp500_returns.index)
                if len(common_dates) > 50:
                    stock_aligned = stock_returns[common_dates]
                    market_aligned = sp500_returns[common_dates]
                    
                    # Calcul du beta
                    covariance = np.cov(stock_aligned, market_aligned)[0][1]
                    market_variance = np.var(market_aligned)
                    beta = covariance / market_variance if market_variance != 0 else 1
                    
                    # Alpha calculation
                    stock_excess = (stock_aligned.mean() * 252) - risk_free_rate
                    market_excess = (market_aligned.mean() * 252) - risk_free_rate
                    alpha = stock_excess - (beta * market_excess)
                    
                    benchmark_text += f"""
        
        <b>Analyse B√™ta et Alpha :</b><br/>
        ‚Ä¢ <b>B√™ta vs S&P 500 :</b> {beta:.2f}<br/>
          Interpr√©tation : {'Plus volatil que le march√©' if beta > 1.2 else 'Volatilit√© similaire au march√©' if beta > 0.8 else 'Moins volatil que le march√©'}<br/>
        ‚Ä¢ <b>Alpha annualis√© :</b> {alpha:.1%}<br/>
          Interpr√©tation : {'Cr√©ation de valeur' if alpha > 0.02 else 'Performance en ligne' if alpha > -0.02 else 'Destruction de valeur'}<br/>
                    """
        
        benchmark_text += f"""
        
        <b>Classification du Profil Risque-Rendement :</b><br/>
        """
        
        # Classification bas√©e sur beta et sharpe
        if 'beta' in locals():
            if beta < 0.8 and sharpe_ratio > 1:
                profile = "D√©fensif Performant - Faible risque, bonne performance"
            elif beta > 1.2 and sharpe_ratio > 1:
                profile = "Croissance Agressive - Risque √©lev√©, forte performance"
            elif beta < 0.8:
                profile = "D√©fensif - Faible volatilit√©, rendements mod√©r√©s"
            elif beta > 1.2:
                profile = "Cyclique - Volatilit√© √©lev√©e, suit les cycles de march√©"
            else:
                profile = "March√© - Profil similaire aux indices de r√©f√©rence"
        else:
            profile = "√Ä d√©terminer par analyse comparative d√©taill√©e"
        
        benchmark_text += f"‚Ä¢ <b>Profil :</b> {profile}<br/>"
        
        benchmark_text += f"""
        
        <b>Positionnement Sectoriel :</b><br/>
        ‚Ä¢ <b>Performance vs secteur :</b> √Ä comparer avec l'ETF sectoriel correspondant<br/>
        ‚Ä¢ <b>Leadership :</b> {'Leader sectoriel' if info.get('marketCap', 0) > 50e9 else 'Acteur significatif' if info.get('marketCap', 0) > 10e9 else 'Sp√©cialiste de niche'}<br/>
        ‚Ä¢ <b>Cyclicit√© :</b> {'Hautement cyclique' if info.get('sector') in ['Energy', 'Materials'] else 'Mod√©r√©ment cyclique' if info.get('sector') in ['Technology', 'Financial Services'] else 'D√©fensif'}<br/>
        
        <b>Recommandations d\'Allocation :</b><br/>
        ‚Ä¢ <b>P√®se dans un portefeuille diversifi√© :</b> 
          {'3-7%' if 'beta' in locals() and beta > 1.2 else '5-10%' if 'beta' in locals() and beta > 0.8 else '10-15%'} 
          (fonction du profil de risque)<br/>
        ‚Ä¢ <b>Compl√©mentarit√© :</b> 
          {'Compl√©ter avec des actifs d√©fensifs' if 'beta' in locals() and beta > 1.2 else 'Peut servir de base solide au portefeuille' if 'beta' in locals() and beta < 0.8 else 'Diversifier avec autres secteurs'}<br/>
        ‚Ä¢ <b>Horizon recommand√© :</b> 
          {'Long terme (3-5 ans)' if 'beta' in locals() and beta > 1.2 else 'Moyen √† long terme (2-4 ans)' if 'beta' in locals() and beta < 1.2 else 'Flexible selon objectifs'}<br/>
        
        <b>Surveillance des Benchmarks :</b><br/>
        ‚Ä¢ Suivre la performance relative mensuelle<br/>
        ‚Ä¢ Analyser les p√©riodes de d√©correlation<br/>
        ‚Ä¢ Identifier les catalyseurs de surperformance<br/>
        ‚Ä¢ Monitorer l'√©volution du beta dans le temps<br/>
        """
        
        self.story.append(Paragraph(benchmark_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_relative_performance_charts(self):
        """Graphiques de performance relative"""
        hist = self.data.get('history', pd.DataFrame())
        indices = self.data.get('market_indices', {})
        
        if hist.empty or not indices:
            return
        
        # Graphique de performance relative complexe
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=(
                'Performance Relative vs S&P 500',
                'Rolling Correlation (60 jours)',
                'Outperformance/Underperformance',
                'Beta Rolling (60 jours)'
            )
        )
        
        hist_1y = hist.last('365D')
        
        # S&P 500 comme r√©f√©rence principale
        if '^GSPC' in indices:
            sp500_data = indices['^GSPC'].last('365D')
            
            if not sp500_data.empty:
                # 1. Performance relative cumul√©e
                stock_norm = (hist_1y['Close'] / hist_1y['Close'].iloc[0] - 1) * 100
                sp500_norm = (sp500_data['Close'] / sp500_data['Close'].iloc[0] - 1) * 100
                
                # Aligner les dates
                common_dates = stock_norm.index.intersection(sp500_norm.index)
                if len(common_dates) > 50:
                    stock_aligned = stock_norm[common_dates]
                    sp500_aligned = sp500_norm[common_dates]
                    
                    fig.add_trace(go.Scatter(
                        x=common_dates,
                        y=stock_aligned,
                        name=f'{self.symbol}',
                        line=dict(color='blue', width=2)
                    ), row=1, col=1)
                    
                    fig.add_trace(go.Scatter(
                        x=common_dates,
                        y=sp500_aligned,
                        name='S&P 500',
                        line=dict(color='red', width=2)
                    ), row=1, col=1)
                    
                    # 2. Corr√©lation roulante
                    stock_returns = hist_1y['Close'].pct_change().dropna()
                    sp500_returns = sp500_data['Close'].pct_change().dropna()
                    
                    common_return_dates = stock_returns.index.intersection(sp500_returns.index)
                    if len(common_return_dates) > 60:
                        stock_ret_aligned = stock_returns[common_return_dates]
                        sp500_ret_aligned = sp500_returns[common_return_dates]
                        
                        rolling_corr = stock_ret_aligned.rolling(60).corr(sp500_ret_aligned)
                        
                        fig.add_trace(go.Scatter(
                            x=rolling_corr.index,
                            y=rolling_corr,
                            line=dict(color='green', width=2),
                            name='Corr√©lation'
                        ), row=1, col=2)
                        
                        fig.add_hline(y=0.7, line_dash="dash", line_color="red", 
                                     annotation_text="Corr forte", row=1, col=2)
                        
                        # 3. Outperformance
                        outperformance = stock_aligned - sp500_aligned
                        
                        colors = ['green' if x > 0 else 'red' for x in outperformance]
                        fig.add_trace(go.Bar(
                            x=common_dates,
                            y=outperformance,
                            marker_color=colors,
                            name='Outperformance',
                            opacity=0.7
                        ), row=2, col=1)
                        
                        # 4. Beta roulant
                        rolling_beta = []
                        for i in range(60, len(stock_ret_aligned)):
                            stock_window = stock_ret_aligned.iloc[i-60:i]
                            market_window = sp500_ret_aligned.iloc[i-60:i]
                            
                            cov = np.cov(stock_window, market_window)[0][1]
                            var = np.var(market_window)
                            beta = cov / var if var != 0 else 1
                            rolling_beta.append(beta)
                        
                        beta_dates = stock_ret_aligned.index[60:]
                        
                        fig.add_trace(go.Scatter(
                            x=beta_dates,
                            y=rolling_beta,
                            line=dict(color='purple', width=2),
                            name='Beta 60j'
                        ), row=2, col=2)
                        
                        fig.add_hline(y=1.0, line_dash="dash", line_color="gray", 
                                     annotation_text="Beta = 1", row=2, col=2)
        
        fig.update_layout(
            title=f'Analyse de Performance Relative - {self.symbol}',
            height=600,
            showlegend=True
        )
        
        chart_path = f"{self.charts_dir}/relative_performance_{self.symbol}.png"
        fig.write_image(chart_path, width=1200, height=600, scale=2)
        
        self.story.append(Image(chart_path, width=7*inch, height=3.5*inch))
        self.story.append(Spacer(1, 15))
    
    def add_correlation_with_indices(self):
        """Corr√©lation avec indices"""
        pass  # Impl√©mentation future
    
    def add_risk_return_comparison(self):
        """Comparaison risque-rendement"""
        pass  # Impl√©mentation future
    
    def add_sector_peer_analysis(self):
        """Analyse des pairs sectoriels"""
        pass  # Impl√©mentation future
    
    def add_alpha_beta_analysis(self):
        """Analyse Alpha/Beta"""
        pass  # Impl√©mentation future
    
    def add_dcf_model_analysis(self):
        """Mod√®le DCF"""
        self.story.append(Paragraph("Mod√®le de Flux de Tr√©sorerie Actualis√©s (DCF)", self.section_style))
        
        info = self.data.get('info', {})
        financials = self.data.get('financials', pd.DataFrame())
        cashflow = self.data.get('cashflow', pd.DataFrame())
        
        current_price = info.get('currentPrice', 0)
        shares_outstanding = info.get('sharesOutstanding', 0)
        
        dcf_text = f"""
        <b>Analyse DCF (Discounted Cash Flow) pour {self.symbol} :</b><br/>
        
        <b>Prix Actuel du March√© :</b> ${current_price:.2f}<br/>
        <b>Actions en Circulation :</b> {shares_outstanding:,.0f}<br/>
        
        <b>1. Estimation des Flux de Tr√©sorerie Futurs :</b><br/>
        """
        
        # Estimation des param√®tres DCF
        if not cashflow.empty and 'Free Cash Flow' in cashflow.index:
            try:
                fcf_data = cashflow.loc['Free Cash Flow']
                current_fcf = fcf_data.iloc[0] if len(fcf_data) > 0 else 0
                
                # Calcul du taux de croissance historique
                if len(fcf_data) >= 3:
                    fcf_growth = ((fcf_data.iloc[0] / fcf_data.iloc[2]) ** (1/2) - 1) if fcf_data.iloc[2] != 0 else 0.05
                else:
                    fcf_growth = 0.05  # 5% par d√©faut
                
            except:
                current_fcf = info.get('operatingCashflow', 0) * 0.8  # Estimation
                fcf_growth = 0.05
        else:
            current_fcf = info.get('operatingCashflow', 0) * 0.8
            fcf_growth = 0.05
        
        # Param√®tres du mod√®le
        growth_years = 5  # P√©riode de croissance explicite
        terminal_growth = 0.025  # 2.5% croissance terminale
        discount_rate = 0.08  # 8% co√ªt du capital (WACC)
        
        dcf_text += f"""
        ‚Ä¢ <b>FCF Actuel :</b> ${current_fcf:,.0f}<br/>
        ‚Ä¢ <b>Taux de croissance (5 ans) :</b> {fcf_growth:.1%}<br/>
        ‚Ä¢ <b>Croissance terminale :</b> {terminal_growth:.1%}<br/>
        ‚Ä¢ <b>Taux d'actualisation (WACC) :</b> {discount_rate:.1%}<br/>
        
        <b>2. Projection des Flux de Tr√©sorerie :</b><br/>
        """
        
        # Calcul des FCF projet√©s
        projected_fcf = []
        for year in range(1, growth_years + 1):
            fcf = current_fcf * ((1 + fcf_growth) ** year)
            pv_fcf = fcf / ((1 + discount_rate) ** year)
            projected_fcf.append((year, fcf, pv_fcf))
            
            dcf_text += f"‚Ä¢ <b>Ann√©e {year} :</b> FCF = ${fcf:,.0f}, VAN = ${pv_fcf:,.0f}<br/>"
        
        # Valeur terminale
        terminal_fcf = projected_fcf[-1][1] * (1 + terminal_growth)
        terminal_value = terminal_fcf / (discount_rate - terminal_growth)
        pv_terminal = terminal_value / ((1 + discount_rate) ** growth_years)
        
        # Valeur totale
        pv_explicit_period = sum([fcf[2] for fcf in projected_fcf])
        enterprise_value = pv_explicit_period + pv_terminal
        
        # Valeur par action (simplifi√©)
        net_debt = info.get('totalDebt', 0) - info.get('totalCash', 0)
        equity_value = enterprise_value - net_debt
        fair_value_per_share = equity_value / shares_outstanding if shares_outstanding > 0 else 0
        
        dcf_text += f"""
        
        <b>3. Valeur Terminale :</b><br/>
        ‚Ä¢ <b>FCF Terminal :</b> ${terminal_fcf:,.0f}<br/>
        ‚Ä¢ <b>Valeur Terminale :</b> ${terminal_value:,.0f}<br/>
        ‚Ä¢ <b>VAN Terminale :</b> ${pv_terminal:,.0f}<br/>
        
        <b>4. Valorisation :</b><br/>
        ‚Ä¢ <b>VAN P√©riode Explicite :</b> ${pv_explicit_period:,.0f}<br/>
        ‚Ä¢ <b>VAN Valeur Terminale :</b> ${pv_terminal:,.0f}<br/>
        ‚Ä¢ <b>Valeur d'Entreprise :</b> ${enterprise_value:,.0f}<br/>
        ‚Ä¢ <b>Dette Nette :</b> ${net_debt:,.0f}<br/>
        ‚Ä¢ <b>Valeur des Fonds Propres :</b> ${equity_value:,.0f}<br/>
        
        <b>5. Prix Objectif DCF :</b><br/>
        ‚Ä¢ <b>Juste Valeur par Action :</b> ${fair_value_per_share:.2f}<br/>
        ‚Ä¢ <b>Prix Actuel :</b> ${current_price:.2f}<br/>
        ‚Ä¢ <b>Potentiel :</b> {((fair_value_per_share / current_price) - 1) * 100:+.1f}% 
          ({'Sur√©valuation' if fair_value_per_share < current_price else 'Sous-√©valuation'})<br/>
        
        <b>6. Analyse de Sensibilit√© :</b><br/>
        """
        
        # Analyse de sensibilit√© sur les param√®tres cl√©s
        sensitivity_scenarios = [
            ('Optimiste', fcf_growth + 0.02, discount_rate - 0.01),
            ('Base', fcf_growth, discount_rate),
            ('Pessimiste', fcf_growth - 0.02, discount_rate + 0.01)
        ]
        
        for scenario_name, growth, discount in sensitivity_scenarios:
            # Recalcul rapide
            sens_fcf = []
            for year in range(1, growth_years + 1):
                fcf = current_fcf * ((1 + growth) ** year)
                pv_fcf = fcf / ((1 + discount) ** year)
                sens_fcf.append(pv_fcf)
            
            sens_terminal_fcf = current_fcf * ((1 + growth) ** growth_years) * (1 + terminal_growth)
            sens_terminal_value = sens_terminal_fcf / (discount - terminal_growth)
            sens_pv_terminal = sens_terminal_value / ((1 + discount) ** growth_years)
            
            sens_enterprise_value = sum(sens_fcf) + sens_pv_terminal
            sens_equity_value = sens_enterprise_value - net_debt
            sens_fair_value = sens_equity_value / shares_outstanding if shares_outstanding > 0 else 0
            
            dcf_text += f"‚Ä¢ <b>{scenario_name} :</b> ${sens_fair_value:.2f} ({((sens_fair_value / current_price) - 1) * 100:+.1f}%)<br/>"
        
        dcf_text += f"""
        
        <b>7. Hypoth√®ses et Limites :</b><br/>
        ‚Ä¢ <b>Hypoth√®ses :</b><br/>
          - Croissance FCF constante sur 5 ans<br/>
          - Co√ªt du capital stable<br/>
          - Croissance terminale conservatrice<br/>
          - Pas de changement structurel majeur<br/>
        
        ‚Ä¢ <b>Limites :</b><br/>
          - Sensibilit√© aux hypoth√®ses de croissance<br/>
          - Difficult√© d'estimation du WACC<br/>
          - Pas de prise en compte des options r√©elles<br/>
          - March√©s non parfaitement efficients<br/>
        
        <b>8. Recommandation DCF :</b><br/>
        {'ACHAT FORT' if fair_value_per_share > current_price * 1.2 else 'ACHAT' if fair_value_per_share > current_price * 1.1 else 'NEUTRE' if fair_value_per_share > current_price * 0.9 else 'VENTE'} 
        - Prix objectif : ${fair_value_per_share:.2f} 
        ({'Upside' if fair_value_per_share > current_price else 'Downside'} de {abs((fair_value_per_share / current_price) - 1) * 100:.1f}%)
        
        <b>Note :</b> Le mod√®le DCF doit √™tre compl√©t√© par d'autres m√©thodes de valorisation 
        (comparables, multiples) pour une analyse compl√®te.
        """
        
        self.story.append(Paragraph(dcf_text, self.styles['Normal']))
        self.story.append(Spacer(1, 20))
    
    def add_comparable_valuation(self):
        """Valorisation par comparables"""
        pass  # Impl√©mentation future
    
    def add_technical_price_targets(self):
        """Prix objectifs techniques"""
        pass  # Impl√©mentation future
    
    def add_options_analysis(self):
        """Analyse des options"""
        pass  # Impl√©mentation future
    
    def add_fair_value_estimation(self):
        """Estimation de la juste valeur"""
        pass  # Impl√©mentation future
    
    def add_sensitivity_analysis_pricing(self):
        """Analyse de sensibilit√© pricing"""
        pass  # Impl√©mentation future


def generate_smart_report(symbol: str, report_type: str, output_path: str) -> bool:
    """Fonction principale pour g√©n√©rer un rapport intelligent"""
    generator = SmartReportGenerator(symbol, report_type, output_path)
    return generator.generate_report()


if __name__ == "__main__":
    # Test
    if len(sys.argv) == 4:
        symbol = sys.argv[1]
        report_type = sys.argv[2]
        output_path = sys.argv[3]
        
        success = generate_smart_report(symbol, report_type, output_path)
        
        if success:
            print(f"‚úÖ Rapport {report_type} g√©n√©r√©: {output_path}")
        else:
            print("‚ùå Erreur lors de la g√©n√©ration")
    else:
        print("Usage: python smart_report_generator.py <SYMBOL> <REPORT_TYPE> <OUTPUT_PATH>")
        print("Types: BASELINE, DETAILED, DEEP_ANALYSIS, BENCHMARK, PRICER, CUSTOM")