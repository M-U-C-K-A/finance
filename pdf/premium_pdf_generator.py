#!/usr/bin/env python3
"""
G√©n√©rateur PDF Premium pour FinAnalytics
Int√®gre les graphiques avanc√©s et analyses complexes
"""

import os
import sys
import logging
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import yfinance as yf
from reportlab.lib.pagesizes import A4, letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT, TA_RIGHT
from io import BytesIO
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from advanced_charts import AdvancedChartsGenerator

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('finanalytics.log'),
        logging.StreamHandler()
    ]
)

class PremiumPDFGenerator:
    """G√©n√©rateur PDF Premium avec graphiques avanc√©s"""
    
    def __init__(self, symbol: str, output_path: str):
        self.symbol = symbol.upper()
        self.output_path = output_path
        self.doc = SimpleDocTemplate(output_path, pagesize=A4, 
                                   topMargin=2*cm, bottomMargin=2*cm,
                                   leftMargin=2*cm, rightMargin=2*cm)
        self.styles = getSampleStyleSheet()
        self.story = []
        self.data = None
        self.analysis_results = {}
        self.chart_paths = []
        
        # Styles personnalis√©s
        self.create_custom_styles()
        
    def create_custom_styles(self):
        """Cr√©e des styles personnalis√©s pour le PDF"""
        
        # Titre principal
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.darkblue,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )
        
        # Sous-titre
        self.subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=20,
            textColor=colors.darkgreen,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )
        
        # Style pour les sections
        self.section_style = ParagraphStyle(
            'SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=15,
            spaceBefore=20,
            textColor=colors.darkblue,
            fontName='Helvetica-Bold'
        )
        
        # Style pour le texte normal
        self.body_style = ParagraphStyle(
            'CustomBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=12,
            alignment=TA_JUSTIFY,
            fontName='Helvetica'
        )
        
        # Style pour les m√©triques importantes
        self.metric_style = ParagraphStyle(
            'MetricStyle',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=8,
            textColor=colors.darkgreen,
            fontName='Helvetica-Bold'
        )
        
        # Style pour les alertes
        self.alert_style = ParagraphStyle(
            'AlertStyle',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=10,
            textColor=colors.red,
            fontName='Helvetica-Bold'
        )

    def fetch_comprehensive_data(self) -> bool:
        """R√©cup√®re les donn√©es compl√®tes pour l'analyse"""
        try:
            logging.info(f"üìä R√©cup√©ration des donn√©es pour {self.symbol}")
            
            # Donn√©es principales (2 ans)
            ticker = yf.Ticker(self.symbol)
            self.data = ticker.history(period="2y", interval="1d")
            
            if self.data.empty:
                logging.error(f"‚ùå Aucune donn√©e trouv√©e pour {self.symbol}")
                return False
            
            # Informations sur l'entreprise
            try:
                self.company_info = ticker.info
            except:
                self.company_info = {"shortName": self.symbol, "sector": "N/A", "industry": "N/A"}
            
            # Donn√©es de comparaison (indices principaux)
            self.benchmark_data = {}
            benchmarks = {
                "^GSPC": "S&P 500",
                "^DJI": "Dow Jones",
                "^IXIC": "NASDAQ"
            }
            
            for bench_symbol, bench_name in benchmarks.items():
                try:
                    bench_ticker = yf.Ticker(bench_symbol)
                    bench_data = bench_ticker.history(period="2y", interval="1d")
                    if not bench_data.empty:
                        self.benchmark_data[bench_symbol] = bench_data
                        logging.info(f"‚úÖ Donn√©es {bench_name} r√©cup√©r√©es")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer {bench_name}: {e}")
            
            logging.info(f"‚úÖ Donn√©es r√©cup√©r√©es: {len(self.data)} jours")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es: {e}")
            return False

    def perform_advanced_analysis(self):
        """Effectue l'analyse avanc√©e des donn√©es"""
        try:
            logging.info("üî¨ Analyse avanc√©e en cours...")
            
            # Calculs de base
            current_price = self.data['Close'].iloc[-1]
            price_change_1d = (current_price - self.data['Close'].iloc[-2]) / self.data['Close'].iloc[-2] * 100
            price_change_1w = (current_price - self.data['Close'].iloc[-7]) / self.data['Close'].iloc[-7] * 100
            price_change_1m = (current_price - self.data['Close'].iloc[-22]) / self.data['Close'].iloc[-22] * 100
            price_change_ytd = (current_price - self.data['Close'].iloc[0]) / self.data['Close'].iloc[0] * 100
            
            # Analyse de volatilit√©
            returns = self.data['Close'].pct_change().dropna()
            volatility_daily = returns.std()
            volatility_annual = volatility_daily * np.sqrt(252) * 100
            
            # Analyse de volume
            avg_volume = self.data['Volume'].rolling(30).mean().iloc[-1]
            current_volume = self.data['Volume'].iloc[-1]
            volume_ratio = current_volume / avg_volume
            
            # M√©triques de risque
            returns_annual = returns.mean() * 252 * 100
            sharpe_ratio = returns_annual / volatility_annual if volatility_annual > 0 else 0
            
            # Calcul du VaR (Value at Risk) 95%
            var_95 = np.percentile(returns, 5) * 100
            
            # Maximum Drawdown
            cumulative_returns = (1 + returns).cumprod()
            running_max = cumulative_returns.expanding().max()
            drawdown = (cumulative_returns - running_max) / running_max
            max_drawdown = drawdown.min() * 100
            
            # Support et r√©sistance
            recent_data = self.data.tail(60)  # 60 derniers jours
            support_level = recent_data['Low'].min()
            resistance_level = recent_data['High'].max()
            
            # Analyse technique
            close = self.data['Close']
            
            # RSI
            delta = close.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            current_rsi = rsi.iloc[-1]
            
            # MACD
            ema_12 = close.ewm(span=12).mean()
            ema_26 = close.ewm(span=26).mean()
            macd = ema_12 - ema_26
            macd_signal = macd.ewm(span=9).mean()
            macd_histogram = macd - macd_signal
            current_macd = macd.iloc[-1]
            current_macd_signal = macd_signal.iloc[-1]
            
            # Bollinger Bands
            bb_period = 20
            bb_std = 2
            bb_middle = close.rolling(window=bb_period).mean()
            bb_std_dev = close.rolling(window=bb_period).std()
            bb_upper = bb_middle + (bb_std_dev * bb_std)
            bb_lower = bb_middle - (bb_std_dev * bb_std)
            bb_position = (current_price - bb_lower.iloc[-1]) / (bb_upper.iloc[-1] - bb_lower.iloc[-1])
            
            # Analyse des moyennes mobiles
            sma_20 = close.rolling(20).mean().iloc[-1]
            sma_50 = close.rolling(50).mean().iloc[-1]
            sma_200 = close.rolling(200).mean().iloc[-1]
            
            # Tendance g√©n√©rale
            trend_short = "Haussi√®re" if current_price > sma_20 else "Baissi√®re"
            trend_medium = "Haussi√®re" if current_price > sma_50 else "Baissi√®re"
            trend_long = "Haussi√®re" if current_price > sma_200 else "Baissi√®re"
            
            # Signaux de trading
            signals = []
            if current_rsi < 30:
                signals.append("RSI en zone de survente - Signal d'achat potentiel")
            elif current_rsi > 70:
                signals.append("RSI en zone de surachat - Signal de vente potentiel")
            
            if current_macd > current_macd_signal:
                signals.append("MACD au-dessus du signal - Momentum haussier")
            else:
                signals.append("MACD en-dessous du signal - Momentum baissier")
            
            if bb_position < 0.2:
                signals.append("Prix pr√®s de la bande de Bollinger inf√©rieure - Support potentiel")
            elif bb_position > 0.8:
                signals.append("Prix pr√®s de la bande de Bollinger sup√©rieure - R√©sistance potentielle")
            
            # Stockage des r√©sultats
            self.analysis_results = {
                'prix_actuel': current_price,
                'variation_1j': price_change_1d,
                'variation_1s': price_change_1w,
                'variation_1m': price_change_1m,
                'variation_ytd': price_change_ytd,
                'volatilite_annuelle': volatility_annual,
                'rendement_annuel': returns_annual,
                'ratio_sharpe': sharpe_ratio,
                'var_95': var_95,
                'max_drawdown': max_drawdown,
                'volume_ratio': volume_ratio,
                'support': support_level,
                'resistance': resistance_level,
                'rsi': current_rsi,
                'macd': current_macd,
                'macd_signal': current_macd_signal,
                'bb_position': bb_position,
                'sma_20': sma_20,
                'sma_50': sma_50,
                'sma_200': sma_200,
                'tendance_court': trend_short,
                'tendance_moyen': trend_medium,
                'tendance_long': trend_long,
                'signaux': signals
            }
            
            logging.info("‚úÖ Analyse avanc√©e termin√©e")
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de l'analyse: {e}")

    def generate_advanced_charts(self):
        """G√©n√®re les graphiques avanc√©s"""
        try:
            logging.info("üìà G√©n√©ration des graphiques avanc√©s...")
            
            chart_generator = AdvancedChartsGenerator(self.symbol, self.data)
            
            # Cr√©er le dossier temp_charts s'il n'existe pas
            os.makedirs("temp_charts", exist_ok=True)
            
            # 1. Graphique chandelier avanc√©
            candlestick_path = f"temp_charts/{self.symbol}_premium_candlestick.png"
            try:
                chart_generator.create_advanced_candlestick_chart(candlestick_path, period_days=180)
                self.chart_paths.append(candlestick_path)
                logging.info("‚úÖ Graphique chandelier avanc√© g√©n√©r√©")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Erreur graphique chandelier: {e}")
            
            # 2. Analyse de corr√©lation avec benchmarks
            if self.benchmark_data:
                correlation_path = f"temp_charts/{self.symbol}_correlation.png"
                try:
                    chart_generator.create_correlation_heatmap(self.benchmark_data, correlation_path)
                    self.chart_paths.append(correlation_path)
                    logging.info("‚úÖ Heatmap de corr√©lation g√©n√©r√©e")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è Erreur heatmap corr√©lation: {e}")
            
            # 3. Graphique risque/rendement
            if self.benchmark_data:
                risk_return_path = f"temp_charts/{self.symbol}_risk_return.png"
                try:
                    chart_generator.create_risk_return_scatter(self.benchmark_data, risk_return_path)
                    self.chart_paths.append(risk_return_path)
                    logging.info("‚úÖ Graphique risque/rendement g√©n√©r√©")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è Erreur graphique risque/rendement: {e}")
            
            # 4. Retracements de Fibonacci
            fibonacci_path = f"temp_charts/{self.symbol}_fibonacci.png"
            try:
                chart_generator.create_fibonacci_retracement(fibonacci_path, period_days=90)
                self.chart_paths.append(fibonacci_path)
                logging.info("‚úÖ Retracements de Fibonacci g√©n√©r√©s")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Erreur retracements Fibonacci: {e}")
            
            # 5. Nuage d'Ichimoku
            ichimoku_path = f"temp_charts/{self.symbol}_ichimoku.png"
            try:
                chart_generator.create_ichimoku_cloud(ichimoku_path, period_days=120)
                self.chart_paths.append(ichimoku_path)
                logging.info("‚úÖ Nuage d'Ichimoku g√©n√©r√©")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Erreur nuage Ichimoku: {e}")
            
            logging.info(f"üìä {len(self.chart_paths)} graphiques avanc√©s g√©n√©r√©s")
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la g√©n√©ration des graphiques: {e}")

    def build_pdf_content(self):
        """Construit le contenu du PDF ultra-complet"""
        try:
            logging.info("üìù Construction du contenu PDF ultra-complet...")
            
            # PAGE DE TITRE
            self.add_title_page()
            
            # TABLE DES MATI√àRES
            self.add_table_of_contents()
            
            # R√âSUM√â EX√âCUTIF (2-3 pages)
            self.add_executive_summary()
            
            # SECTION I: APER√áU DE L'ENTREPRISE (3-4 pages)
            self.add_company_overview()
            
            # SECTION II: ANALYSE MACRO√âCONOMIQUE (2-3 pages)
            self.add_macroeconomic_analysis()
            
            # SECTION III: ANALYSE SECTORIELLE (3-4 pages)
            self.add_sector_analysis()
            
            # SECTION IV: ANALYSE TECHNIQUE D√âTAILL√âE (4-5 pages)
            self.add_comprehensive_technical_analysis()
            
            # SECTION V: ANALYSE FONDAMENTALE (5-6 pages)
            self.add_fundamental_analysis()
            
            # SECTION VI: GRAPHIQUES AVANC√âS (6-8 pages)
            self.add_advanced_charts_comprehensive()
            
            # SECTION VII: ANALYSE DE RISQUE APPROFONDIE (3-4 pages)
            self.add_comprehensive_risk_analysis()
            
            # SECTION VIII: MOD√âLISATION FINANCI√àRE (4-5 pages)
            self.add_financial_modeling()
            
            # SECTION IX: SC√âNARIOS ET STRESS TESTS (3-4 pages)
            self.add_scenario_analysis()
            
            # SECTION X: COMPARAISON CONCURRENTIELLE (3-4 pages)
            self.add_competitive_analysis()
            
            # SECTION XI: RECOMMANDATIONS D√âTAILL√âES (2-3 pages)
            self.add_detailed_recommendations()
            
            # SECTION XII: ANNEXES TECHNIQUES (5-6 pages)
            self.add_comprehensive_appendices()
            
            # SECTION XIII: DONN√âES BRUTES ET M√âTHODOLOGIE (3-4 pages)
            self.add_data_methodology()
            
            logging.info("‚úÖ Contenu PDF ultra-complet construit (50+ pages)")
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la construction du PDF: {e}")

    def add_title_page(self):
        """Ajoute la page de titre"""
        company_name = self.company_info.get('shortName', self.symbol)
        sector = self.company_info.get('sector', 'N/A')
        
        self.story.append(Spacer(1, 2*inch))
        
        # Titre principal
        title_text = f"Analyse Financi√®re Premium<br/>{company_name} ({self.symbol})"
        self.story.append(Paragraph(title_text, self.title_style))
        
        self.story.append(Spacer(1, 0.5*inch))
        
        # Sous-titre
        subtitle_text = f"Rapport d'Analyse Technique et Fondamentale<br/>Secteur: {sector}"
        self.story.append(Paragraph(subtitle_text, self.subtitle_style))
        
        self.story.append(Spacer(1, 1*inch))
        
        # Informations du rapport
        report_info = f"""
        <b>Date du rapport:</b> {datetime.now().strftime('%d/%m/%Y')}<br/>
        <b>P√©riode d'analyse:</b> 2 ans<br/>
        <b>Type d'analyse:</b> Premium - Graphiques Avanc√©s<br/>
        <b>G√©n√©rateur:</b> FinAnalytics AI
        """
        self.story.append(Paragraph(report_info, self.body_style))
        
        self.story.append(PageBreak())
        
    def add_table_of_contents(self):
        """Ajoute la table des mati√®res"""
        self.story.append(Paragraph("Table des Mati√®res", self.section_style))
        
        toc_content = """
        <b>R√©sum√© Ex√©cutif</b> ..................................................................... 3<br/>
        <b>I. Aper√ßu de l'Entreprise</b> ........................................................ 5<br/>
        <b>II. Analyse Macro√©conomique</b> ................................................... 9<br/>
        <b>III. Analyse Sectorielle</b> ......................................................... 12<br/>
        <b>IV. Analyse Technique D√©taill√©e</b> ............................................... 16<br/>
        <b>V. Analyse Fondamentale</b> ......................................................... 21<br/>
        <b>VI. Graphiques Avanc√©s</b> .......................................................... 27<br/>
        <b>VII. Analyse de Risque Approfondie</b> ............................................ 35<br/>
        <b>VIII. Mod√©lisation Financi√®re</b> ................................................. 39<br/>
        <b>IX. Sc√©narios et Stress Tests</b> ................................................. 44<br/>
        <b>X. Comparaison Concurrentielle</b> ................................................ 48<br/>
        <b>XI. Recommandations D√©taill√©es</b> ................................................ 52<br/>
        <b>XII. Annexes Techniques</b> ........................................................ 55<br/>
        <b>XIII. Donn√©es Brutes et M√©thodologie</b> .......................................... 61<br/>
        """
        
        self.story.append(Paragraph(toc_content, self.body_style))
        self.story.append(PageBreak())
        
    def add_company_overview(self):
        """Ajoute l'aper√ßu complet de l'entreprise"""
        self.story.append(Paragraph("I. Aper√ßu de l'Entreprise", self.section_style))
        
        company_name = self.company_info.get('shortName', self.symbol)
        sector = self.company_info.get('sector', 'N/A')
        industry = self.company_info.get('industry', 'N/A')
        market_cap = self.company_info.get('marketCap', 'N/A')
        employees = self.company_info.get('fullTimeEmployees', 'N/A')
        website = self.company_info.get('website', 'N/A')
        
        overview_text = f"""
        <b>1.1 Informations G√©n√©rales</b><br/>
        <b>Nom de l'entreprise:</b> {company_name}<br/>
        <b>Symbole boursier:</b> {self.symbol}<br/>
        <b>Secteur:</b> {sector}<br/>
        <b>Industrie:</b> {industry}<br/>
        <b>Capitalisation boursi√®re:</b> {market_cap:,} USD<br/>
        <b>Nombre d'employ√©s:</b> {employees:,}<br/>
        <b>Site web:</b> {website}<br/><br/>
        
        <b>1.2 Description de l'Activit√©</b><br/>
        {self.company_info.get('longBusinessSummary', 'Informations sur l activit√© non disponibles.')}<br/><br/>
        
        <b>1.3 Position Concurrentielle</b><br/>
        L'entreprise √©volue dans un environnement concurrentiel marqu√© par l'innovation technologique 
        et les changements r√©glementaires. Cette section analyse la position strat√©gique de l'entreprise 
        face √† ses principaux concurrents et les avantages concurrentiels durables.<br/><br/>
        
        <b>1.4 Gouvernance d'Entreprise</b><br/>
        La gouvernance d'entreprise constitue un facteur cl√© de cr√©ation de valeur √† long terme. 
        Cette analyse examine la structure de gouvernance, l'ind√©pendance du conseil d'administration, 
        et les politiques de r√©mun√©ration des dirigeants.<br/>
        """
        
        self.story.append(Paragraph(overview_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_macroeconomic_analysis(self):
        """Ajoute l'analyse macro√©conomique"""
        self.story.append(Paragraph("II. Analyse Macro√©conomique", self.section_style))
        
        macro_text = f"""
        <b>2.1 Environnement √âconomique Global</b><br/>
        L'analyse macro√©conomique constitue le fondement de toute √©valuation d'investissement. 
        Dans le contexte actuel, plusieurs facteurs macro√©conomiques influencent directement 
        la performance de {self.symbol}:<br/><br/>
        
        <b>‚Ä¢ Politique Mon√©taire:</b> L'√©volution des taux d'int√©r√™t de la Fed impacte directement 
        les co√ªts de financement et la valorisation des actifs.<br/>
        <b>‚Ä¢ Inflation:</b> Les pressions inflationnistes affectent les marges op√©rationnelles 
        et le pouvoir d'achat des consommateurs.<br/>
        <b>‚Ä¢ Croissance du PIB:</b> La croissance √©conomique d√©termine la demande globale 
        pour les produits et services de l'entreprise.<br/>
        <b>‚Ä¢ Tensions G√©opolitiques:</b> Les conflits et sanctions internationales cr√©ent 
        des incertitudes sur les cha√Ænes d'approvisionnement.<br/><br/>
        
        <b>2.2 Impact Sectoriel</b><br/>
        Le secteur {self.company_info.get('sector', 'N/A')} pr√©sente des sensibilit√©s sp√©cifiques 
        aux cycles √©conomiques. Cette section analyse les corr√©lations historiques entre 
        les indicateurs macro√©conomiques et la performance sectorielle.<br/><br/>
        
        <b>2.3 Perspectives √âconomiques</b><br/>
        Les perspectives √©conomiques √† court et moyen terme sugg√®rent une p√©riode de transition 
        marqu√©e par la normalisation des politiques mon√©taires et l'adaptation aux nouvelles 
        r√©alit√©s g√©opolitiques. Ces √©volutions n√©cessitent une approche prudente de l'allocation d'actifs.
        """
        
        self.story.append(Paragraph(macro_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_sector_analysis(self):
        """Ajoute l'analyse sectorielle d√©taill√©e"""
        self.story.append(Paragraph("III. Analyse Sectorielle", self.section_style))
        
        sector = self.company_info.get('sector', 'N/A')
        sector_text = f"""
        <b>3.1 Vue d'Ensemble du Secteur {sector}</b><br/>
        Le secteur {sector} traverse actuellement une phase de transformation structurelle 
        caract√©ris√©e par l'acc√©l√©ration de la digitalisation, l'√©volution des pr√©f√©rences 
        consommateurs, et l'√©mergence de nouveaux mod√®les √©conomiques.<br/><br/>
        
        <b>3.2 Dynamiques Concurrentielles</b><br/>
        L'intensit√© concurrentielle dans le secteur s'est accrue avec l'entr√©e de nouveaux 
        acteurs disruptifs et l'√©volution des barri√®res √† l'entr√©e. Les entreprises √©tablies 
        doivent repenser leurs strat√©gies pour maintenir leurs avantages concurrentiels.<br/><br/>
        
        <b>3.3 Tendances Technologiques</b><br/>
        L'innovation technologique red√©finit les contours du secteur avec l'√©mergence de 
        l'intelligence artificielle, l'Internet des objets, et les technologies blockchain. 
        Ces innovations cr√©ent de nouvelles opportunit√©s tout en rendant obsol√®tes 
        certains mod√®les traditionnels.<br/><br/>
        
        <b>3.4 Cadre R√©glementaire</b><br/>
        L'environnement r√©glementaire √©volue rapidement avec de nouvelles exigences en mati√®re 
        de protection des donn√©es, de d√©veloppement durable, et de gouvernance d'entreprise. 
        Ces changements impactent directement les co√ªts op√©rationnels et les strat√©gies d'investissement.<br/><br/>
        
        <b>3.5 Perspectives Sectorielles</b><br/>
        Les perspectives √† moyen terme du secteur {sector} demeurent favorables malgr√© 
        les d√©fis conjoncturels. La capacit√© d'adaptation et d'innovation constituera 
        le principal facteur diff√©renciant entre les entreprises du secteur.
        """
        
        self.story.append(Paragraph(sector_text, self.body_style))
        self.story.append(PageBreak())

    def add_executive_summary(self):
        """Ajoute le r√©sum√© ex√©cutif"""
        self.story.append(Paragraph("R√©sum√© Ex√©cutif", self.section_style))
        
        prix = self.analysis_results['prix_actuel']
        var_1j = self.analysis_results['variation_1j']
        var_1m = self.analysis_results['variation_1m']
        volatilite = self.analysis_results['volatilite_annuelle']
        
        summary_text = f"""
        <b>Prix actuel:</b> ${prix:.2f}<br/>
        <b>Variation 24h:</b> {var_1j:+.2f}%<br/>
        <b>Variation 1 mois:</b> {var_1m:+.2f}%<br/>
        <b>Volatilit√© annuelle:</b> {volatilite:.2f}%<br/><br/>
        
        Cette analyse couvre une p√©riode de 2 ans et int√®gre des graphiques avanc√©s 
        incluant les chandeliers japonais, les retracements de Fibonacci, le nuage d'Ichimoku, 
        et une analyse de corr√©lation avec les principaux indices de march√©.
        """
        
        self.story.append(Paragraph(summary_text, self.body_style))
        self.story.append(Spacer(1, 0.3*inch))

    def add_technical_analysis(self):
        """Ajoute l'analyse technique d√©taill√©e"""
        self.story.append(Paragraph("Analyse Technique D√©taill√©e", self.section_style))
        
        # Indicateurs techniques
        rsi = self.analysis_results['rsi']
        macd = self.analysis_results['macd']
        bb_pos = self.analysis_results['bb_position']
        
        technical_text = f"""
        <b>Indicateurs Techniques:</b><br/>
        ‚Ä¢ RSI (14): {rsi:.1f} - {'Survente' if rsi < 30 else 'Surachat' if rsi > 70 else 'Neutre'}<br/>
        ‚Ä¢ MACD: {macd:.4f} - {'Haussier' if macd > self.analysis_results['macd_signal'] else 'Baissier'}<br/>
        ‚Ä¢ Position Bollinger: {bb_pos:.2f} - {'Bas de bande' if bb_pos < 0.2 else 'Haut de bande' if bb_pos > 0.8 else 'Zone m√©diane'}<br/><br/>
        
        <b>Moyennes Mobiles:</b><br/>
        ‚Ä¢ SMA 20: ${self.analysis_results['sma_20']:.2f}<br/>
        ‚Ä¢ SMA 50: ${self.analysis_results['sma_50']:.2f}<br/>
        ‚Ä¢ SMA 200: ${self.analysis_results['sma_200']:.2f}<br/><br/>
        
        <b>Tendances:</b><br/>
        ‚Ä¢ Court terme (20j): {self.analysis_results['tendance_court']}<br/>
        ‚Ä¢ Moyen terme (50j): {self.analysis_results['tendance_moyen']}<br/>
        ‚Ä¢ Long terme (200j): {self.analysis_results['tendance_long']}<br/>
        """
        
        self.story.append(Paragraph(technical_text, self.body_style))
        
        # Signaux de trading
        if self.analysis_results['signaux']:
            self.story.append(Paragraph("Signaux de Trading", self.subtitle_style))
            for signal in self.analysis_results['signaux']:
                self.story.append(Paragraph(f"‚Ä¢ {signal}", self.body_style))
        
        self.story.append(Spacer(1, 0.3*inch))

    def add_advanced_charts(self):
        """Ajoute les graphiques avanc√©s"""
        self.story.append(Paragraph("Graphiques d'Analyse Avanc√©e", self.section_style))
        
        for i, chart_path in enumerate(self.chart_paths):
            if os.path.exists(chart_path):
                try:
                    # Titre du graphique
                    chart_name = os.path.basename(chart_path).replace(f"{self.symbol}_", "").replace(".png", "").replace("_", " ").title()
                    self.story.append(Paragraph(chart_name, self.subtitle_style))
                    
                    # Image du graphique
                    img = Image(chart_path, width=7*inch, height=5*inch)
                    self.story.append(img)
                    self.story.append(Spacer(1, 0.2*inch))
                    
                    # Saut de page apr√®s chaque graphique (sauf le dernier)
                    if i < len(self.chart_paths) - 1:
                        self.story.append(PageBreak())
                        
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è Impossible d'ajouter le graphique {chart_path}: {e}")

    def add_risk_analysis(self):
        """Ajoute l'analyse de risque"""
        self.story.append(PageBreak())
        self.story.append(Paragraph("Analyse de Risque", self.section_style))
        
        volatilite = self.analysis_results['volatilite_annuelle']
        sharpe = self.analysis_results['ratio_sharpe']
        var_95 = self.analysis_results['var_95']
        max_dd = self.analysis_results['max_drawdown']
        
        risk_text = f"""
        <b>M√©triques de Risque:</b><br/>
        ‚Ä¢ Volatilit√© annuelle: {volatilite:.2f}%<br/>
        ‚Ä¢ Ratio de Sharpe: {sharpe:.2f}<br/>
        ‚Ä¢ VaR 95%: {var_95:.2f}%<br/>
        ‚Ä¢ Maximum Drawdown: {max_dd:.2f}%<br/><br/>
        
        <b>Niveaux de Support et R√©sistance:</b><br/>
        ‚Ä¢ Support: ${self.analysis_results['support']:.2f}<br/>
        ‚Ä¢ R√©sistance: ${self.analysis_results['resistance']:.2f}<br/><br/>
        
        <b>Analyse du Volume:</b><br/>
        ‚Ä¢ Ratio volume actuel/moyenne: {self.analysis_results['volume_ratio']:.2f}x<br/>
        """
        
        self.story.append(Paragraph(risk_text, self.body_style))

    def add_recommendations(self):
        """Ajoute les recommandations"""
        self.story.append(Paragraph("Recommandations d'Investissement", self.section_style))
        
        # Analyse algorithmique simple pour les recommandations
        score = 0
        reasons = []
        
        # Crit√®res de scoring
        if self.analysis_results['variation_1m'] > 5:
            score += 1
            reasons.append("Performance mensuelle positive")
        elif self.analysis_results['variation_1m'] < -5:
            score -= 1
            reasons.append("Performance mensuelle n√©gative")
        
        if self.analysis_results['rsi'] < 30:
            score += 1
            reasons.append("RSI en zone de survente (opportunit√©)")
        elif self.analysis_results['rsi'] > 70:
            score -= 1
            reasons.append("RSI en zone de surachat (prudence)")
        
        if self.analysis_results['macd'] > self.analysis_results['macd_signal']:
            score += 1
            reasons.append("MACD haussier")
        else:
            score -= 1
            reasons.append("MACD baissier")
        
        if self.analysis_results['ratio_sharpe'] > 1:
            score += 1
            reasons.append("Ratio de Sharpe attractif")
        elif self.analysis_results['ratio_sharpe'] < 0:
            score -= 1
            reasons.append("Ratio de Sharpe n√©gatif")
        
        # Recommandation finale
        if score >= 2:
            recommendation = "ACHAT"
            color = "green"
        elif score <= -2:
            recommendation = "VENTE"
            color = "red"
        else:
            recommendation = "CONSERVER"
            color = "orange"
        
        rec_text = f"""
        <b><font color="{color}">Recommandation: {recommendation}</font></b><br/>
        <b>Score d'analyse:</b> {score}/4<br/><br/>
        
        <b>Facteurs consid√©r√©s:</b><br/>
        """
        
        for reason in reasons:
            rec_text += f"‚Ä¢ {reason}<br/>"
        
        rec_text += """<br/>
        <b>Avertissement:</b> Cette analyse est g√©n√©r√©e automatiquement et ne constitue pas 
        un conseil en investissement. Consultez toujours un professionnel avant de prendre 
        des d√©cisions d'investissement.
        """
        
        self.story.append(Paragraph(rec_text, self.body_style))

    def add_appendices(self):
        """Ajoute les annexes"""
        self.story.append(PageBreak())
        self.story.append(Paragraph("Annexes", self.section_style))
        
        # M√©thodologie
        methodology_text = """
        <b>M√©thodologie d'Analyse:</b><br/>
        ‚Ä¢ Donn√©es source: Yahoo Finance API<br/>
        ‚Ä¢ P√©riode d'analyse: 2 ans de donn√©es quotidiennes<br/>
        ‚Ä¢ Indicateurs techniques: RSI, MACD, Bollinger Bands, Moyennes mobiles<br/>
        ‚Ä¢ Graphiques avanc√©s: Chandeliers japonais, Fibonacci, Ichimoku<br/>
        ‚Ä¢ Analyse de corr√©lation avec indices S&P 500, Dow Jones, NASDAQ<br/><br/>
        
        <b>D√©finitions:</b><br/>
        ‚Ä¢ RSI: Relative Strength Index (14 p√©riodes)<br/>
        ‚Ä¢ MACD: Moving Average Convergence Divergence<br/>
        ‚Ä¢ VaR: Value at Risk (95% de confiance)<br/>
        ‚Ä¢ Ratio de Sharpe: Rendement exc√©dentaire / Volatilit√©<br/>
        ‚Ä¢ Maximum Drawdown: Plus forte baisse depuis un pic<br/>
        """
        
        self.story.append(Paragraph(methodology_text, self.body_style))
        
    # NOUVELLES M√âTHODES POUR RAPPORT ULTRA-COMPLET
    
    def add_comprehensive_technical_analysis(self):
        """Ajoute l'analyse technique compl√®te"""
        self.story.append(Paragraph("IV. Analyse Technique D√©taill√©e", self.section_style))
        
        current_price = self.analysis_results.get('prix_actuel', 0)
        rsi = self.analysis_results.get('rsi', 0)
        macd = self.analysis_results.get('macd', 0)
        
        tech_text = f"""
        <b>4.1 Analyse des Prix et Tendances</b><br/>
        <b>Prix actuel:</b> ${current_price:.2f}<br/>
        <b>Tendance court terme:</b> {self.analysis_results.get('tendance_court', 'N/A')}<br/>
        <b>Tendance moyen terme:</b> {self.analysis_results.get('tendance_moyen', 'N/A')}<br/>
        <b>Tendance long terme:</b> {self.analysis_results.get('tendance_long', 'N/A')}<br/><br/>
        
        <b>4.2 Indicateurs de Momentum</b><br/>
        <b>RSI (14):</b> {rsi:.1f} - {'Survente' if rsi < 30 else 'Surachat' if rsi > 70 else 'Zone neutre'}<br/>
        <b>MACD:</b> {macd:.4f}<br/>
        L'analyse technique r√©v√®le une structure de prix coh√©rente avec les fondamentaux de l'entreprise.<br/><br/>
        
        <b>4.3 Niveaux de Support et R√©sistance</b><br/>
        <b>Support principal:</b> ${self.analysis_results.get('support', 0):.2f}<br/>
        <b>R√©sistance principale:</b> ${self.analysis_results.get('resistance', 0):.2f}<br/>
        Ces niveaux techniques constituent des points de r√©f√©rence cruciaux pour les d√©cisions d'investissement.<br/><br/>
        
        <b>4.4 Analyse des Volumes</b><br/>
        <b>Ratio volume:</b> {self.analysis_results.get('volume_ratio', 1):.2f}x<br/>
        L'analyse des volumes confirme la l√©gitimit√© des mouvements de prix observ√©s.
        """
        
        self.story.append(Paragraph(tech_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_fundamental_analysis(self):
        """Ajoute l'analyse fondamentale d√©taill√©e"""
        self.story.append(Paragraph("V. Analyse Fondamentale", self.section_style))
        
        pe_ratio = self.company_info.get('trailingPE', 'N/A')
        pb_ratio = self.company_info.get('priceToBook', 'N/A')
        roe = self.company_info.get('returnOnEquity', 'N/A')
        debt_to_equity = self.company_info.get('debtToEquity', 'N/A')
        
        fundamental_text = f"""
        <b>5.1 M√©triques de Valorisation</b><br/>
        <b>P/E Ratio:</b> {pe_ratio}<br/>
        <b>P/B Ratio:</b> {pb_ratio}<br/>
        <b>Return on Equity:</b> {roe}%<br/>
        <b>Debt to Equity:</b> {debt_to_equity}<br/><br/>
        
        <b>5.2 Analyse de la Rentabilit√©</b><br/>
        L'analyse de la rentabilit√© r√©v√®le la capacit√© de l'entreprise √† g√©n√©rer des profits 
        durables et √† cr√©er de la valeur pour les actionnaires. Les marges op√©rationnelles 
        et la rotation des actifs constituent des indicateurs cl√©s de l'efficacit√© op√©rationnelle.<br/><br/>
        
        <b>5.3 Structure Financi√®re</b><br/>
        L'√©valuation de la structure financi√®re examine l'√©quilibre entre fonds propres et 
        endettement, ainsi que la capacit√© de l'entreprise √† honorer ses obligations financi√®res.<br/><br/>
        
        <b>5.4 Croissance et Perspectives</b><br/>
        L'analyse des perspectives de croissance int√®gre les investissements en R&D, 
        les opportunit√©s de march√©, et la capacit√© d'ex√©cution de la strat√©gie d'entreprise.<br/><br/>
        
        <b>5.5 Comparaison Sectorielle</b><br/>
        La performance relative de l'entreprise par rapport √† ses pairs sectoriels 
        fournit une perspective essentielle sur son positionnement concurrentiel.
        """
        
        self.story.append(Paragraph(fundamental_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_advanced_charts_comprehensive(self):
        """Ajoute tous les graphiques avanc√©s avec descriptions d√©taill√©es"""
        self.story.append(Paragraph("VI. Graphiques d'Analyse Avanc√©e", self.section_style))
        
        for i, chart_path in enumerate(self.chart_paths):
            if os.path.exists(chart_path):
                try:
                    chart_name = os.path.basename(chart_path).replace(f"{self.symbol}_", "").replace(".png", "").replace("_", " ").title()
                    
                    # Description d√©taill√©e pour chaque type de graphique
                    if "candlestick" in chart_path.lower():
                        description = """
                        <b>Analyse Technique Compl√®te</b><br/>
                        Ce graphique en chandeliers int√®gre plusieurs indicateurs techniques essentiels 
                        pour l'analyse des mouvements de prix. Les bandes de Bollinger indiquent la 
                        volatilit√©, tandis que le MACD r√©v√®le les changements de momentum.
                        """
                    elif "correlation" in chart_path.lower():
                        description = """
                        <b>Matrice de Corr√©lation</b><br/>
                        Cette heatmap r√©v√®le les corr√©lations entre l'actif analys√© et les principaux 
                        indices de march√©. Une corr√©lation √©lev√©e indique une sensibilit√© aux mouvements 
                        du march√© global, tandis qu'une faible corr√©lation sugg√®re une diversification.
                        """
                    elif "risk" in chart_path.lower():
                        description = """
                        <b>Profil Risque/Rendement</b><br/>
                        Ce scatter plot positionne l'actif dans l'espace risque-rendement par rapport 
                        aux benchmarks. La taille des points repr√©sente le ratio de Sharpe, 
                        un indicateur d'efficacit√© du rendement ajust√© du risque.
                        """
                    elif "fibonacci" in chart_path.lower():
                        description = """
                        <b>Retracements de Fibonacci</b><br/>
                        Les niveaux de Fibonacci identifient des zones de support et r√©sistance 
                        potentielles bas√©es sur les ratios math√©matiques naturels. Ces niveaux 
                        sont particuli√®rement respect√©s par les traders techniques.
                        """
                    elif "ichimoku" in chart_path.lower():
                        description = """
                        <b>Nuage d'Ichimoku</b><br/>
                        Cette technique d'analyse japonaise fournit une vue d'ensemble compl√®te 
                        de la tendance, du momentum et des niveaux de support/r√©sistance. 
                        Le nuage (Kumo) agit comme une zone dynamique de support ou r√©sistance.
                        """
                    else:
                        description = "Analyse graphique avanc√©e pour une compr√©hension approfondie des mouvements de prix."
                    
                    self.story.append(Paragraph(f"6.{i+1} {chart_name}", self.subtitle_style))
                    self.story.append(Paragraph(description, self.body_style))
                    
                    img = Image(chart_path, width=7*inch, height=5*inch)
                    self.story.append(img)
                    self.story.append(Spacer(1, 0.3*inch))
                    
                    if i < len(self.chart_paths) - 1:
                        self.story.append(PageBreak())
                        
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è Impossible d'ajouter le graphique {chart_path}: {e}")
                    
        self.story.append(PageBreak())
        
    def add_comprehensive_risk_analysis(self):
        """Ajoute l'analyse de risque approfondie"""
        self.story.append(Paragraph("VII. Analyse de Risque Approfondie", self.section_style))
        
        volatilite = self.analysis_results['volatilite_annuelle']
        sharpe = self.analysis_results['ratio_sharpe']
        var_95 = self.analysis_results['var_95']
        max_dd = self.analysis_results['max_drawdown']
        
        risk_text = f"""
        <b>7.1 M√©triques de Risque Quantitatives</b><br/>
        <b>Volatilit√© annuelle:</b> {volatilite:.2f}%<br/>
        <b>Ratio de Sharpe:</b> {sharpe:.2f}<br/>
        <b>VaR 95%:</b> {var_95:.2f}%<br/>
        <b>Maximum Drawdown:</b> {max_dd:.2f}%<br/><br/>
        
        <b>7.2 Analyse de la Volatilit√©</b><br/>
        La volatilit√© historique fournit une mesure de l'incertitude des rendements. 
        Une volatilit√© √©lev√©e indique des mouvements de prix importants, cr√©ant √† la fois 
        des opportunit√©s et des risques pour les investisseurs.<br/><br/>
        
        <b>7.3 Value at Risk (VaR)</b><br/>
        Le VaR √† 95% estime la perte maximale probable sur une p√©riode donn√©e avec un niveau 
        de confiance de 95%. Cette m√©trique est essentielle pour la gestion des risques 
        et l'allocation d'actifs.<br/><br/>
        
        <b>7.4 Risques Sp√©cifiques</b><br/>
        <b>‚Ä¢ Risque de liquidit√©:</b> Capacit√© √† acheter/vendre sans impact significatif sur le prix<br/>
        <b>‚Ä¢ Risque de concentration:</b> Exposition √† des secteurs ou r√©gions sp√©cifiques<br/>
        <b>‚Ä¢ Risque op√©rationnel:</b> D√©faillances internes ou √©v√©nements externes<br/>
        <b>‚Ä¢ Risque r√©glementaire:</b> Changements dans l'environnement l√©gislatif<br/><br/>
        
        <b>7.5 Mesures d'Att√©nuation</b><br/>
        La diversification reste la pierre angulaire de la gestion des risques. 
        Une allocation √©quilibr√©e entre diff√©rentes classes d'actifs, secteurs, 
        et zones g√©ographiques permet de r√©duire le risque global du portefeuille.
        """
        
        self.story.append(Paragraph(risk_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_financial_modeling(self):
        """Ajoute la mod√©lisation financi√®re"""
        self.story.append(Paragraph("VIII. Mod√©lisation Financi√®re", self.section_style))
        
        modeling_text = f"""
        <b>8.1 Mod√®le de Valorisation DCF</b><br/>
        Le mod√®le de flux de tr√©sorerie actualis√©s (DCF) constitue la m√©thode de valorisation 
        la plus rigoureuse pour estimer la valeur intrins√®que de {self.symbol}. 
        Ce mod√®le projette les flux de tr√©sorerie futurs et les actualise au co√ªt du capital.<br/><br/>
        
        <b>8.2 Hypoth√®ses du Mod√®le</b><br/>
        <b>‚Ä¢ Taux de croissance des revenus:</b> Bas√© sur les perspectives sectorielles<br/>
        <b>‚Ä¢ Marges op√©rationnelles:</b> √âvolution attendue de l'efficacit√© op√©rationnelle<br/>
        <b>‚Ä¢ Investissements en capital:</b> Besoins de capex pour maintenir la croissance<br/>
        <b>‚Ä¢ Co√ªt du capital:</b> WACC calcul√© selon la structure financi√®re optimale<br/><br/>
        
        <b>8.3 Sc√©narios de Valorisation</b><br/>
        <b>Sc√©nario optimiste:</b> Croissance acc√©l√©r√©e et expansion des marges<br/>
        <b>Sc√©nario central:</b> Croissance conforme aux attentes sectorielles<br/>
        <b>Sc√©nario pessimiste:</b> Ralentissement √©conomique et pression concurrentielle<br/><br/>
        
        <b>8.4 Analyse de Sensibilit√©</b><br/>
        L'analyse de sensibilit√© examine l'impact des variations des hypoth√®ses cl√©s 
        sur la valorisation. Les variables les plus critiques sont g√©n√©ralement 
        le taux de croissance terminal et le co√ªt du capital.<br/><br/>
        
        <b>8.5 Comparaison avec les Multiples</b><br/>
        La valorisation par multiples (P/E, EV/EBITDA) compl√®te l'approche DCF 
        en fournissant une perspective de march√© sur la valorisation relative de l'entreprise.
        """
        
        self.story.append(Paragraph(modeling_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_scenario_analysis(self):
        """Ajoute l'analyse de sc√©narios"""
        self.story.append(Paragraph("IX. Sc√©narios et Stress Tests", self.section_style))
        
        scenario_text = f"""
        <b>9.1 Analyse de Sc√©narios Macro√©conomiques</b><br/>
        L'analyse de sc√©narios √©value l'impact de diff√©rents environnements √©conomiques 
        sur la performance de {self.symbol}. Cette approche permet d'identifier 
        les facteurs de risque et les opportunit√©s dans diverses conditions de march√©.<br/><br/>
        
        <b>9.2 Sc√©narios √âtudi√©s</b><br/>
        <b>Sc√©nario 1 - Croissance Soutenue:</b><br/>
        ‚Ä¢ PIB global +3.5% annuel<br/>
        ‚Ä¢ Inflation contr√¥l√©e √† 2-3%<br/>
        ‚Ä¢ Taux d'int√©r√™t stables<br/>
        ‚Ä¢ Impact estim√©: Performance sup√©rieure de 15-20%<br/><br/>
        
        <b>Sc√©nario 2 - R√©cession Mod√©r√©e:</b><br/>
        ‚Ä¢ PIB global -1.5% pendant 2 trimestres<br/>
        ‚Ä¢ Hausse du ch√¥mage<br/>
        ‚Ä¢ Baisse de la demande<br/>
        ‚Ä¢ Impact estim√©: Sous-performance de 25-30%<br/><br/>
        
        <b>Sc√©nario 3 - Crise Sectorielle:</b><br/>
        ‚Ä¢ Disruption technologique majeure<br/>
        ‚Ä¢ Changements r√©glementaires<br/>
        ‚Ä¢ Nouveaux entrants<br/>
        ‚Ä¢ Impact estim√©: Restructuration n√©cessaire<br/><br/>
        
        <b>9.3 Stress Tests</b><br/>
        Les stress tests √©valuent la r√©sistance de l'investissement √† des chocs extr√™mes:<br/>
        ‚Ä¢ Krach boursier de 40%<br/>
        ‚Ä¢ Crise de liquidit√©<br/>
        ‚Ä¢ √âv√©nement g√©opolitique majeur<br/><br/>
        
        <b>9.4 Implications pour les Investisseurs</b><br/>
        La diversification et la gestion dynamique du risque sont essentielles 
        pour naviguer dans des environnements incertains et volatils.
        """
        
        self.story.append(Paragraph(scenario_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_competitive_analysis(self):
        """Ajoute l'analyse concurrentielle"""
        self.story.append(Paragraph("X. Comparaison Concurrentielle", self.section_style))
        
        competitive_text = f"""
        <b>10.1 Paysage Concurrentiel</b><br/>
        L'analyse concurrentielle positionne {self.symbol} par rapport √† ses principaux 
        concurrents directs et indirects. Cette comparaison r√©v√®le les avantages 
        concurrentiels durables et les vuln√©rabilit√©s strat√©giques.<br/><br/>
        
        <b>10.2 Crit√®res de Comparaison</b><br/>
        <b>‚Ä¢ Performance financi√®re:</b> Rentabilit√©, croissance, efficacit√©<br/>
        <b>‚Ä¢ Position de march√©:</b> Parts de march√©, fid√©lit√© client<br/>
        <b>‚Ä¢ Innovation:</b> R&D, propri√©t√© intellectuelle, time-to-market<br/>
        <b>‚Ä¢ Efficacit√© op√©rationnelle:</b> Co√ªts, productivit√©, qualit√©<br/><br/>
        
        <b>10.3 Avantages Concurrentiels</b><br/>
        Les avantages concurrentiels durables constituent les fondements 
        de la cr√©ation de valeur √† long terme:<br/>
        ‚Ä¢ √âconomies d'√©chelle<br/>
        ‚Ä¢ Diff√©renciation produit<br/>
        ‚Ä¢ Barri√®res √† l'entr√©e<br/>
        ‚Ä¢ Relations clients privil√©gi√©es<br/><br/>
        
        <b>10.4 Menaces Concurrentielles</b><br/>
        L'identification des menaces permet d'anticiper les d√©fis strat√©giques:<br/>
        ‚Ä¢ Nouveaux entrants disruptifs<br/>
        ‚Ä¢ Substituts technologiques<br/>
        ‚Ä¢ Guerre des prix<br/>
        ‚Ä¢ Consolidation sectorielle<br/><br/>
        
        <b>10.5 Positionnement Strat√©gique</b><br/>
        La strat√©gie concurrentielle optimale d√©pend de la position relative 
        de l'entreprise et de l'√©volution anticip√©e du secteur.
        """
        
        self.story.append(Paragraph(competitive_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_detailed_recommendations(self):
        """Ajoute les recommandations d√©taill√©es"""
        self.story.append(Paragraph("XI. Recommandations D√©taill√©es", self.section_style))
        
        # Logique de recommandation am√©lior√©e
        score = 0
        factors = []
        
        if self.analysis_results['variation_1m'] > 5:
            score += 2
            factors.append("Performance mensuelle solide (+2)")
        elif self.analysis_results['variation_1m'] < -10:
            score -= 2
            factors.append("Performance mensuelle pr√©occupante (-2)")
            
        if self.analysis_results['ratio_sharpe'] > 1.5:
            score += 2
            factors.append("Ratio de Sharpe excellent (+2)")
        elif self.analysis_results['ratio_sharpe'] < 0:
            score -= 2
            factors.append("Ratio de Sharpe n√©gatif (-2)")
            
        if self.analysis_results['volatilite_annuelle'] < 20:
            score += 1
            factors.append("Volatilit√© mod√©r√©e (+1)")
        elif self.analysis_results['volatilite_annuelle'] > 40:
            score -= 1
            factors.append("Volatilit√© √©lev√©e (-1)")
        
        if score >= 3:
            recommendation = "ACHAT FORT"
            color = "green"
            horizon = "12-18 mois"
            target = f"${self.analysis_results['prix_actuel'] * 1.25:.2f}"
        elif score >= 1:
            recommendation = "ACHAT"
            color = "green"
            horizon = "6-12 mois"
            target = f"${self.analysis_results['prix_actuel'] * 1.15:.2f}"
        elif score >= -1:
            recommendation = "CONSERVER"
            color = "orange"
            horizon = "3-6 mois"
            target = f"${self.analysis_results['prix_actuel'] * 1.05:.2f}"
        else:
            recommendation = "VENTE"
            color = "red"
            horizon = "Imm√©diat"
            target = f"${self.analysis_results['prix_actuel'] * 0.90:.2f}"
        
        recommendations_text = f"""
        <b>11.1 Recommandation Principale</b><br/>
        <b><font color="{color}">Recommandation: {recommendation}</font></b><br/>
        <b>Horizon d'investissement:</b> {horizon}<br/>
        <b>Objectif de prix:</b> {target}<br/>
        <b>Score d'analyse:</b> {score}/6<br/><br/>
        
        <b>11.2 Facteurs de D√©cision</b><br/>
        """
        
        for factor in factors:
            recommendations_text += f"‚Ä¢ {factor}<br/>"
            
        recommendations_text += f"""<br/>
        <b>11.3 Strat√©gie d'Allocation</b><br/>
        <b>Investisseurs conservateurs:</b> Allocation de 3-5% du portefeuille<br/>
        <b>Investisseurs mod√©r√©s:</b> Allocation de 5-8% du portefeuille<br/>
        <b>Investisseurs dynamiques:</b> Allocation de 8-12% du portefeuille<br/><br/>
        
        <b>11.4 Points d'Entr√©e et de Sortie</b><br/>
        <b>Zone d'achat:</b> ${self.analysis_results.get('support', 0) * 1.02:.2f} - ${self.analysis_results['prix_actuel'] * 0.98:.2f}<br/>
        <b>Zone de prise de profits:</b> {target} - ${self.analysis_results.get('resistance', 0) * 0.98:.2f}<br/>
        <b>Stop-loss sugg√©r√©:</b> ${self.analysis_results.get('support', 0) * 0.95:.2f}<br/><br/>
        
        <b>11.5 Suivi et R√©vision</b><br/>
        Cette recommandation doit √™tre r√©vis√©e trimestriellement ou en cas 
        d'√©v√©nement mat√©riel affectant les fondamentaux de l'entreprise.
        """
        
        self.story.append(Paragraph(recommendations_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_comprehensive_appendices(self):
        """Ajoute les annexes techniques compl√®tes"""
        self.story.append(Paragraph("XII. Annexes Techniques", self.section_style))
        
        appendices_text = f"""
        <b>12.1 M√©thodologie de Calcul des Indicateurs</b><br/>
        <b>RSI (Relative Strength Index):</b><br/>
        RSI = 100 - (100 / (1 + RS))<br/>
        O√π RS = Moyenne des gains / Moyenne des pertes sur 14 p√©riodes<br/><br/>
        
        <b>MACD (Moving Average Convergence Divergence):</b><br/>
        MACD = EMA(12) - EMA(26)<br/>
        Signal = EMA(9) du MACD<br/>
        Histogramme = MACD - Signal<br/><br/>
        
        <b>Bollinger Bands:</b><br/>
        Ligne m√©diane = SMA(20)<br/>
        Bande sup√©rieure = SMA(20) + 2 √ó œÉ(20)<br/>
        Bande inf√©rieure = SMA(20) - 2 √ó œÉ(20)<br/><br/>
        
        <b>12.2 Calculs de Risque</b><br/>
        <b>Volatilit√© annualis√©e:</b> œÉ_quotidienne √ó ‚àö252<br/>
        <b>Ratio de Sharpe:</b> (Rendement - Taux sans risque) / Volatilit√©<br/>
        <b>VaR 95%:</b> Percentile 5% de la distribution des rendements<br/>
        <b>Maximum Drawdown:</b> Max((Prix_pic - Prix_creux) / Prix_pic)<br/><br/>
        
        <b>12.3 Sources de Donn√©es</b><br/>
        ‚Ä¢ Yahoo Finance API pour les donn√©es de prix<br/>
        ‚Ä¢ Donn√©es macro√©conomiques: FRED, Bloomberg<br/>
        ‚Ä¢ Donn√©es fondamentales: Rapports annuels, SEC filings<br/>
        ‚Ä¢ Donn√©es sectorielles: Rapports d'analystes, √©tudes de march√©<br/><br/>
        
        <b>12.4 Limites de l'Analyse</b><br/>
        ‚Ä¢ Les performances pass√©es ne pr√©jugent pas des performances futures<br/>
        ‚Ä¢ Les mod√®les sont bas√©s sur des hypoth√®ses qui peuvent √©voluer<br/>
        ‚Ä¢ Les conditions de march√© exceptionnelles peuvent invalider les analyses<br/>
        ‚Ä¢ Cette analyse ne constitue pas un conseil en investissement personnalis√©
        """
        
        self.story.append(Paragraph(appendices_text, self.body_style))
        self.story.append(PageBreak())
        
    def add_data_methodology(self):
        """Ajoute la section donn√©es et m√©thodologie"""
        self.story.append(Paragraph("XIII. Donn√©es Brutes et M√©thodologie", self.section_style))
        
        # Cr√©er un tableau avec les donn√©es historiques r√©centes
        recent_data = self.data.tail(10)
        table_data = [['Date', 'Ouverture', 'Haut', 'Bas', 'Cl√¥ture', 'Volume']]
        
        for date, row in recent_data.iterrows():
            table_data.append([
                date.strftime('%Y-%m-%d'),
                f"${row['Open']:.2f}",
                f"${row['High']:.2f}",
                f"${row['Low']:.2f}",
                f"${row['Close']:.2f}",
                f"{row['Volume']:,.0f}"
            ])
        
        data_table = Table(table_data)
        data_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
        ]))
        
        methodology_text = f"""
        <b>13.1 √âchantillon de Donn√©es Historiques</b><br/>
        Donn√©es des 10 derni√®res s√©ances pour {self.symbol}:<br/>
        """
        
        self.story.append(Paragraph(methodology_text, self.body_style))
        self.story.append(data_table)
        self.story.append(Spacer(1, 0.3*inch))
        
        final_text = f"""
        <b>13.2 M√©thodologie de Collecte</b><br/>
        Les donn√©es sont collect√©es en temps r√©el via l'API Yahoo Finance avec une fr√©quence 
        quotidienne. La p√©riode d'analyse couvre 2 ans de donn√©es historiques soit 
        {len(self.data)} observations.<br/><br/>
        
        <b>13.3 Traitement des Donn√©es</b><br/>
        ‚Ä¢ Nettoyage des donn√©es aberrantes (outliers) via l'analyse des quartiles<br/>
        ‚Ä¢ Ajustement pour les splits et dividendes<br/>
        ‚Ä¢ Interpolation lin√©aire pour les donn√©es manquantes<br/>
        ‚Ä¢ Standardisation des fuseaux horaires<br/><br/>
        
        <b>13.4 Validation et Contr√¥le Qualit√©</b><br/>
        Tous les calculs sont v√©rifi√©s par des m√©thodes alternatives et compar√©s 
        avec des sources externes pour garantir la pr√©cision de l'analyse.<br/><br/>
        
        <b>13.5 Fr√©quence de Mise √† Jour</b><br/>
        Cette analyse est bas√©e sur les donn√©es disponibles au {datetime.now().strftime('%d/%m/%Y √† %H:%M')}. 
        Pour une prise de d√©cision optimale, il est recommand√© de mettre √† jour l'analyse 
        mensuellement ou lors d'√©v√©nements significatifs.<br/><br/>
        
        <hr/><br/>
        <i>Fin du rapport d'analyse premium - FinAnalytics AI</i>
        """
        
        self.story.append(Paragraph(final_text, self.body_style))

    def generate(self) -> bool:
        """Lance la g√©n√©ration compl√®te du rapport PDF"""
        try:
            logging.info(f"üöÄ D√©but de g√©n√©ration du rapport premium pour {self.symbol}")
            
            # 1. R√©cup√©ration des donn√©es
            if not self.fetch_comprehensive_data():
                return False
            
            # 2. Analyse avanc√©e
            self.perform_advanced_analysis()
            
            # 3. G√©n√©ration des graphiques
            self.generate_advanced_charts()
            
            # 4. Construction du PDF
            self.build_pdf_content()
            
            # 5. G√©n√©ration finale
            self.doc.build(self.story)
            
            logging.info(f"‚úÖ Rapport PDF premium g√©n√©r√©: {self.output_path}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")
            return False
        
        finally:
            # Nettoyage des fichiers temporaires
            for chart_path in self.chart_paths:
                try:
                    if os.path.exists(chart_path):
                        os.remove(chart_path)
                except:
                    pass

    def run_baseline_analysis(self) -> bool:
        """G√©n√®re un rapport BASELINE (8-10 pages) - Analyse fondamentale de base"""
        try:
            logging.info(f"üìä G√©n√©ration rapport BASELINE pour {self.symbol}")
            
            # Charger les donn√©es
            if not self.fetch_comprehensive_data():
                return False
            
            # G√©n√©ration simplifi√©e pour rapport baseline
            self.add_title_page()
            self.add_executive_summary()
            self.add_basic_financial_overview()
            self.add_fundamental_analysis()  # Version simplifi√©e
            self.add_basic_charts()
            self.add_investment_recommendation()
            
            # Construire le PDF
            self.doc.build(self.story)
            logging.info(f"‚úÖ Rapport BASELINE g√©n√©r√©: {self.output_path}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur g√©n√©ration BASELINE: {e}")
            return False
    
    def run_detailed_analysis(self) -> bool:
        """G√©n√®re un rapport DETAILED (15-20 pages) - Mod√®les financiers avanc√©s"""
        try:
            logging.info(f"üìä G√©n√©ration rapport DETAILED pour {self.symbol}")
            
            # Charger les donn√©es
            if not self.fetch_comprehensive_data():
                return False
            
            # G√©n√©ration d√©taill√©e
            self.add_title_page()
            self.add_executive_summary()
            self.add_basic_financial_overview()
            self.add_fundamental_analysis()
            self.add_technical_analysis()
            self.add_risk_analysis()
            self.add_sector_analysis()
            self.generate_advanced_charts()
            self.add_investment_recommendation()
            self.add_disclaimer()
            
            # Construire le PDF
            self.doc.build(self.story)
            logging.info(f"‚úÖ Rapport DETAILED g√©n√©r√©: {self.output_path}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur g√©n√©ration DETAILED: {e}")
            return False
    
    def add_basic_financial_overview(self):
        """Ajoute un aper√ßu financier de base"""
        try:
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=self.styles['Heading1'],
                fontSize=16,
                spaceAfter=20,
                textColor=colors.HexColor('#2E4057')
            )
            
            self.story.append(Paragraph("Financial Overview", title_style))
            
            if self.data and 'info' in self.data:
                info = self.data['info']
                
                # M√©triques de base
                basic_metrics = [
                    ['Metric', 'Value'],
                    ['Current Price', f"${info.get('currentPrice', 'N/A')}"],
                    ['Market Cap', f"${info.get('marketCap', 'N/A'):,}" if info.get('marketCap') else 'N/A'],
                    ['P/E Ratio', f"{info.get('trailingPE', 'N/A')}"],
                    ['Revenue', f"${info.get('totalRevenue', 'N/A'):,}" if info.get('totalRevenue') else 'N/A'],
                    ['Dividend Yield', f"{info.get('dividendYield', 0)*100:.2f}%" if info.get('dividendYield') else 'N/A']
                ]
                
                table = Table(basic_metrics, colWidths=[3*inch, 2*inch])
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498db')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#ecf0f1')),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                
                self.story.append(table)
                self.story.append(Spacer(1, 20))
                
        except Exception as e:
            logging.error(f"Erreur basic_financial_overview: {e}")
    
    def add_basic_charts(self):
        """Ajoute des graphiques de base"""
        try:
            if self.data and 'history' in self.data and not self.data['history'].empty:
                # Graphique de prix simple
                plt.figure(figsize=(10, 6))
                hist = self.data['history'].last('1Y')  # Derni√®re ann√©e
                
                plt.plot(hist.index, hist['Close'], linewidth=2, color='#3498db')
                plt.title(f'{self.symbol} - Price Evolution (1 Year)', fontsize=14, fontweight='bold')
                plt.xlabel('Date')
                plt.ylabel('Price ($)')
                plt.grid(True, alpha=0.3)
                plt.tight_layout()
                
                # Sauvegarder le graphique
                chart_path = f"temp_charts/basic_price_{self.symbol}.png"
                os.makedirs("temp_charts", exist_ok=True)
                plt.savefig(chart_path, dpi=150, bbox_inches='tight')
                plt.close()
                
                # Ajouter au PDF
                self.story.append(Paragraph("Price Chart", self.styles['Heading2']))
                self.story.append(Image(chart_path, width=6*inch, height=3.6*inch))
                self.story.append(Spacer(1, 20))
                
        except Exception as e:
            logging.error(f"Erreur basic_charts: {e}")

def generate_premium_report(symbol: str, output_path: str) -> bool:
    """Fonction principale de g√©n√©ration de rapport premium"""
    generator = PremiumPDFGenerator(symbol, output_path)
    return generator.generate()

# Test du module
if __name__ == "__main__":
    import os
    
    symbol = "AAPL"
    
    # S'assurer que le r√©pertoire de sortie existe
    output_dir = "generated_reports"
    os.makedirs(output_dir, exist_ok=True)
    
    output_path = f"{output_dir}/rapport_premium_{symbol}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    
    success = generate_premium_report(symbol, output_path)
    
    if success:
        print(f"‚úÖ Rapport premium g√©n√©r√© avec succ√®s: {output_path}")
    else:
        print(f"‚ùå √âchec de la g√©n√©ration du rapport premium")