#!/usr/bin/env python3
"""
Ultra Comprehensive Report Generator - G√©n√©rateur de rapports financiers ultra-complets
Produit des rapports de 20-30 pages avec contenu substantiel justifiant les 20‚Ç¨
"""

import os
import sys
import logging
import json
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
from datetime import datetime, timedelta
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from scipy import stats
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.io as pio
import warnings
warnings.filterwarnings('ignore')

# Configuration Plotly
pio.kaleido.scope.mathjax = None
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class UltraComprehensiveReportGenerator:
    """G√©n√©rateur de rapports financiers ultra-complets avec 20-30 pages de contenu substantiel"""
    
    def __init__(self, symbol: str, report_type: str, output_path: str):
        self.symbol = symbol.upper()
        self.report_type = report_type
        self.output_path = output_path
        self.doc = SimpleDocTemplate(output_path, pagesize=A4, 
                                   topMargin=2*cm, bottomMargin=2*cm,
                                   leftMargin=2*cm, rightMargin=2*cm)
        self.styles = getSampleStyleSheet()
        self.story = []
        self.data = {}
        self.charts_dir = "temp_charts_ultra"
        os.makedirs(self.charts_dir, exist_ok=True)
        
        self.setup_styles()
        logging.info(f"üöÄ UltraComprehensiveReportGenerator initialis√© : {report_type} pour {symbol}")
    
    def setup_styles(self):
        """Configure les styles personnalis√©s"""
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#1f2937'),
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )
        
        self.section_style = ParagraphStyle(
            'SectionTitle',
            parent=self.styles['Heading2'],
            fontSize=18,
            spaceAfter=20,
            spaceBefore=20,
            textColor=colors.HexColor('#374151'),
            borderWidth=2,
            borderColor=colors.HexColor('#3b82f6'),
            borderPadding=12,
            backColor=colors.HexColor('#eff6ff'),
            fontName='Helvetica-Bold'
        )
        
        self.subsection_style = ParagraphStyle(
            'SubsectionTitle',
            parent=self.styles['Heading3'],
            fontSize=16,
            spaceAfter=15,
            spaceBefore=15,
            textColor=colors.HexColor('#4b5563'),
            fontName='Helvetica-Bold'
        )
        
        # Style pour les explications d√©taill√©es
        self.explanation_style = ParagraphStyle(
            'Explanation',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceBefore=10,
            spaceAfter=10,
            leftIndent=20,
            backColor=colors.HexColor('#f8fafc'),
            borderColor=colors.HexColor('#e2e8f0'),
            borderWidth=1,
            borderPadding=10
        )
    
    def fetch_comprehensive_data(self):
        """R√©cup√®re toutes les donn√©es n√©cessaires de mani√®re exhaustive"""
        try:
            logging.info(f"üìä R√©cup√©ration exhaustive des donn√©es pour {self.symbol}")
            
            stock = yf.Ticker(self.symbol)
            
            # Donn√©es principales √©tendues
            self.data['info'] = stock.info
            self.data['history_1y'] = stock.history(period="1y", interval="1d")
            self.data['history_5y'] = stock.history(period="5y", interval="1wk")
            self.data['history_max'] = stock.history(period="max", interval="1mo")
            
            # Donn√©es financi√®res compl√®tes
            self.data['financials'] = stock.financials
            self.data['quarterly_financials'] = stock.quarterly_financials
            self.data['balance_sheet'] = stock.balance_sheet
            self.data['quarterly_balance_sheet'] = stock.quarterly_balance_sheet
            self.data['cashflow'] = stock.cashflow
            self.data['quarterly_cashflow'] = stock.quarterly_cashflow
            
            # Donn√©es avanc√©es
            self.data['recommendations'] = stock.recommendations
            self.data['analyst_price_targets'] = stock.analyst_price_targets
            self.data['earnings'] = stock.earnings
            self.data['quarterly_earnings'] = stock.quarterly_earnings
            self.data['splits'] = stock.splits
            self.data['dividends'] = stock.dividends
            self.data['actions'] = stock.actions
            
            # Donn√©es de march√© √©tendues
            self.data['institutional_holders'] = stock.institutional_holders
            self.data['major_holders'] = stock.major_holders
            self.data['mutual_fund_holders'] = stock.mutualfund_holders
            
            # Indices de r√©f√©rence pour comparaison
            self.fetch_benchmark_data()
            
            # Donn√©es sectorielles
            self.fetch_sector_data()
            
            logging.info("‚úÖ Donn√©es exhaustives r√©cup√©r√©es")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur r√©cup√©ration donn√©es: {e}")
            return False
    
    def fetch_benchmark_data(self):
        """R√©cup√®re les donn√©es des indices de r√©f√©rence"""
        benchmarks = ["^GSPC", "^DJI", "^IXIC", "QQQ", "SPY"]
        self.data['benchmarks'] = {}
        
        for benchmark in benchmarks:
            try:
                ticker = yf.Ticker(benchmark)
                self.data['benchmarks'][benchmark] = {
                    'history': ticker.history(period="1y"),
                    'info': ticker.info
                }
            except:
                pass
    
    def fetch_sector_data(self):
        """R√©cup√®re les donn√©es sectorielles pour comparaison"""
        try:
            sector = self.data['info'].get('sector', 'Technology')
            sector_etfs = {
                'Technology': 'XLK',
                'Healthcare': 'XLV', 
                'Financials': 'XLF',
                'Energy': 'XLE',
                'Consumer Discretionary': 'XLY'
            }
            
            sector_symbol = sector_etfs.get(sector, 'XLK')
            sector_ticker = yf.Ticker(sector_symbol)
            self.data['sector_data'] = {
                'history': sector_ticker.history(period="1y"),
                'info': sector_ticker.info
            }
        except:
            pass
    
    def generate_report(self):
        """G√©n√®re le rapport complet selon le type"""
        try:
            if not self.fetch_comprehensive_data():
                return False
            
            # Page de titre ultra-professionnelle
            self.add_professional_cover_page()
            
            # Table des mati√®res d√©taill√©e
            self.add_detailed_table_of_contents()
            
            # R√©sum√© ex√©cutif approfondi
            self.add_comprehensive_executive_summary()
            
            # G√©n√©ration selon le type avec contenu ultra-dense
            if self.report_type == "BASELINE":
                self.generate_ultra_baseline_report()
            elif self.report_type == "DETAILED":
                self.generate_ultra_detailed_report()
            elif self.report_type == "DEEP_ANALYSIS":
                self.generate_ultra_deep_analysis()
            elif self.report_type == "BENCHMARK":
                self.generate_ultra_benchmark_report()
            elif self.report_type == "PRICER":
                self.generate_ultra_pricer_report()
            else:
                self.generate_ultra_baseline_report()
            
            # Sections finales obligatoires
            self.add_risk_management_section()
            self.add_regulatory_compliance_section()
            self.add_appendices()
            self.add_glossary()
            self.add_disclaimer()
            
            # Construction du PDF
            self.doc.build(self.story)
            logging.info(f"‚úÖ Rapport ultra-complet g√©n√©r√©: {self.output_path}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erreur g√©n√©ration rapport: {e}")
            return False
    
    def add_professional_cover_page(self):
        """Page de couverture ultra-professionnelle"""
        # Logo et en-t√™te
        self.story.append(Spacer(1, 1*inch))
        
        # Titre principal avec style
        company_name = self.data['info'].get('longName', self.symbol)
        title_text = f"ANALYSE FINANCI√àRE APPROFONDIE<br/>{company_name}<br/>({self.symbol})"
        self.story.append(Paragraph(title_text, self.title_style))
        self.story.append(Spacer(1, 0.5*inch))
        
        # Informations cl√©s en premi√®re page
        key_metrics = f"""
        <b>Prix actuel:</b> ${self.data['info'].get('currentPrice', 'N/A')}<br/>
        <b>Capitalisation:</b> ${self.data['info'].get('marketCap', 'N/A'):,}<br/>
        <b>Secteur:</b> {self.data['info'].get('sector', 'N/A')}<br/>
        <b>Industrie:</b> {self.data['info'].get('industry', 'N/A')}<br/>
        <b>Type de rapport:</b> {self.report_type}<br/>
        <b>Date du rapport:</b> {datetime.now().strftime('%d/%m/%Y %H:%M')}
        """
        
        info_style = ParagraphStyle(
            'InfoStyle',
            parent=self.styles['Normal'],
            fontSize=14,
            alignment=TA_CENTER,
            spaceAfter=20,
            borderWidth=2,
            borderColor=colors.HexColor('#3b82f6'),
            borderPadding=20,
            backColor=colors.HexColor('#f0f9ff')
        )
        
        self.story.append(Paragraph(key_metrics, info_style))
        self.story.append(Spacer(1, 1*inch))
        
        # Avertissement et confidentialit√©
        disclaimer_text = """
        <b>DOCUMENT CONFIDENTIEL</b><br/>
        Cette analyse a √©t√© produite par FinAnalytics et contient des informations propri√©taires.
        Toute reproduction ou distribution est strictement interdite sans autorisation √©crite.
        """
        
        disclaimer_style = ParagraphStyle(
            'DisclaimerStyle',
            parent=self.styles['Normal'],
            fontSize=10,
            alignment=TA_CENTER,
            textColor=colors.red
        )
        
        self.story.append(Paragraph(disclaimer_text, disclaimer_style))
        self.story.append(PageBreak())
    
    def add_detailed_table_of_contents(self):
        """Table des mati√®res ultra-d√©taill√©e"""
        self.story.append(Paragraph("TABLE DES MATI√àRES", self.section_style))
        
        toc_content = """
        <b>1. R√âSUM√â EX√âCUTIF</b> ......................................................... 3<br/>
        <b>2. ANALYSE FONDAMENTALE</b> .................................................. 5<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;2.1 Profil d'entreprise d√©taill√© ...................................... 5<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;2.2 Analyse financi√®re approfondie ................................. 7<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;2.3 M√©triques de valorisation ...................................... 9<br/>
        <b>3. ANALYSE TECHNIQUE</b> ........................................................ 11<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;3.1 Tendances et patterns .......................................... 11<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;3.2 Indicateurs techniques avanc√©s ................................ 13<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;3.3 Analyse de volume .............................................. 15<br/>
        <b>4. ANALYSE SECTORIELLE ET COMPARATIVE</b> ................................... 17<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;4.1 Positionnement sectoriel ....................................... 17<br/>
        &nbsp;&nbsp;&nbsp;&nbsp;4.2 Analyse concurrentielle ........................................ 19<br/>
        <b>5. MOD√âLISATION ET PR√âVISIONS</b> ............................................. 21<br/>
        <b>6. RECOMMANDATIONS D'INVESTISSEMENT</b> ....................................... 23<br/>
        <b>7. GESTION DES RISQUES</b> ..................................................... 25<br/>
        <b>8. CONFORMIT√â R√âGLEMENTAIRE</b> ............................................... 27<br/>
        <b>ANNEXES</b> ................................................................. 29<br/>
        """
        
        toc_style = ParagraphStyle(
            'TOCStyle',
            parent=self.styles['Normal'],
            fontSize=12,
            leftIndent=20,
            spaceAfter=15
        )
        
        self.story.append(Paragraph(toc_content, toc_style))
        self.story.append(PageBreak())
    
    def add_comprehensive_executive_summary(self):
        """R√©sum√© ex√©cutif ultra-approfondi de 2-3 pages"""
        self.story.append(Paragraph("1. R√âSUM√â EX√âCUTIF", self.section_style))
        
        # Introduction d√©taill√©e
        intro_text = f"""
        Cette analyse exhaustive de {self.data['info'].get('longName', self.symbol)} ({self.symbol}) 
        pr√©sente une √©valuation compl√®te bas√©e sur une m√©thodologie propri√©taire combinant 
        l'analyse fondamentale, technique, sectorielle et quantitative.
        
        L'entreprise op√®re dans le secteur {self.data['info'].get('sector', 'N/A')} avec une 
        capitalisation de march√© de ${self.data['info'].get('marketCap', 0):,}, positionnant 
        la soci√©t√© comme {self.get_market_cap_category()}.
        """
        
        self.story.append(Paragraph(intro_text, self.styles['Normal']))
        self.story.append(Spacer(1, 0.3*inch))
        
        # M√©triques cl√©s avec explications
        self.add_comprehensive_key_metrics()
        
        # Performance historique d√©taill√©e
        self.add_detailed_performance_analysis()
        
        # Recommandation avec justification compl√®te
        self.add_justified_recommendation()
        
        self.story.append(PageBreak())
    
    def get_market_cap_category(self):
        """D√©termine la cat√©gorie de capitalisation"""
        market_cap = self.data['info'].get('marketCap', 0)
        if market_cap > 200_000_000_000:
            return "une m√©ga-capitalisation (>200Md$)"
        elif market_cap > 10_000_000_000:
            return "une large capitalisation (>10Md$)"
        elif market_cap > 2_000_000_000:
            return "une moyenne capitalisation (2-10Md$)"
        else:
            return "une petite capitalisation (<2Md$)"
    
    def add_comprehensive_key_metrics(self):
        """M√©triques cl√©s avec explications d√©taill√©es"""
        self.story.append(Paragraph("M√©triques Financi√®res Cl√©s", self.subsection_style))
        
        # Cr√©ation du tableau de m√©triques
        metrics_data = [
            ['M√©trique', 'Valeur', 'Interpr√©tation', 'Benchmark Sectoriel'],
            ['P/E Ratio', f"{self.data['info'].get('trailingPE', 'N/A')}", 
             self.interpret_pe_ratio(), self.get_sector_average('PE')],
            ['P/B Ratio', f"{self.data['info'].get('priceToBook', 'N/A')}", 
             self.interpret_pb_ratio(), self.get_sector_average('PB')],
            ['ROE', f"{self.data['info'].get('returnOnEquity', 'N/A')}", 
             self.interpret_roe(), self.get_sector_average('ROE')],
            ['Debt/Equity', f"{self.data['info'].get('debtToEquity', 'N/A')}", 
             self.interpret_debt_equity(), self.get_sector_average('DE')],
        ]
        
        table = Table(metrics_data, colWidths=[2*inch, 1*inch, 2.5*inch, 1.5*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3b82f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        self.story.append(table)
        self.story.append(Spacer(1, 0.3*inch))
        
        # Explications d√©taill√©es de chaque m√©trique
        explanation_text = """
        <b>Analyse d√©taill√©e des m√©triques:</b><br/><br/>
        
        Le ratio P/E (Price-to-Earnings) indique combien les investisseurs sont pr√™ts √† payer 
        pour chaque dollar de b√©n√©fice. Un P/E √©lev√© peut sugg√©rer des attentes de croissance 
        √©lev√©es ou une sur√©valuation potentielle.<br/><br/>
        
        Le ratio P/B (Price-to-Book) compare la valeur de march√© √† la valeur comptable. 
        Un ratio inf√©rieur √† 1 peut indiquer une sous-√©valuation ou des probl√®mes fondamentaux.<br/><br/>
        
        Le ROE (Return on Equity) mesure l'efficacit√© avec laquelle l'entreprise g√©n√®re des 
        profits √† partir des fonds propres. Un ROE sup√©rieur √† 15% est g√©n√©ralement consid√©r√© 
        comme excellent.<br/><br/>
        
        Le ratio Debt/Equity √©value le levier financier. Un ratio √©lev√© peut indiquer un 
        risque accru mais aussi un potentiel de rendement sup√©rieur.
        """
        
        self.story.append(Paragraph(explanation_text, self.explanation_style))
    
    def interpret_pe_ratio(self):
        """Interpr√®te le ratio P/E"""
        pe = self.data['info'].get('trailingPE')
        if pe is None:
            return "Non disponible"
        elif pe < 15:
            return "Valorisation attractive"
        elif pe < 25:
            return "Valorisation raisonnable" 
        else:
            return "Valorisation √©lev√©e"
    
    def interpret_pb_ratio(self):
        """Interpr√®te le ratio P/B"""
        pb = self.data['info'].get('priceToBook')
        if pb is None:
            return "Non disponible"
        elif pb < 1:
            return "Sous-√©valu√© potentiel"
        elif pb < 3:
            return "Valorisation normale"
        else:
            return "Valorisation premium"
    
    def interpret_roe(self):
        """Interpr√®te le ROE"""
        roe = self.data['info'].get('returnOnEquity')
        if roe is None:
            return "Non disponible"
        elif roe > 0.20:
            return "Excellence op√©rationnelle"
        elif roe > 0.15:
            return "Performance solide"
        elif roe > 0.10:
            return "Performance acceptable"
        else:
            return "Performance faible"
    
    def interpret_debt_equity(self):
        """Interpr√®te le ratio Debt/Equity"""
        de = self.data['info'].get('debtToEquity')
        if de is None:
            return "Non disponible"
        elif de < 30:
            return "Endettement faible"
        elif de < 60:
            return "Endettement mod√©r√©"
        else:
            return "Endettement √©lev√©"
    
    def get_sector_average(self, metric):
        """Obtient la moyenne sectorielle (simul√©e)"""
        return "Moyenne sect."  # √Ä impl√©menter avec des donn√©es r√©elles
    
    def generate_ultra_baseline_report(self):
        """G√©n√®re un rapport BASELINE ultra-complet de 12-15 pages"""
        logging.info("üìä G√©n√©ration rapport BASELINE ultra-complet")
        
        # Section 2: Analyse fondamentale (3-4 pages)
        self.add_ultra_fundamental_analysis()
        
        # Section 3: Analyse technique de base mais compl√®te (3-4 pages)  
        self.add_comprehensive_technical_analysis()
        
        # Section 4: Analyse sectorielle (2-3 pages)
        self.add_sector_analysis()
        
        # Section 5: Valorisation approfondie (2-3 pages)
        self.add_detailed_valuation()
        
        # Section 6: Recommandations d√©taill√©es (2 pages)
        self.add_detailed_recommendations()
    
    def add_ultra_fundamental_analysis(self):
        """Analyse fondamentale ultra-d√©taill√©e"""
        self.story.append(Paragraph("2. ANALYSE FONDAMENTALE APPROFONDIE", self.section_style))
        
        # 2.1 Profil d'entreprise ultra-d√©taill√©
        self.story.append(Paragraph("2.1 Profil d'Entreprise D√©taill√©", self.subsection_style))
        
        company_profile = f"""
        <b>Pr√©sentation g√©n√©rale:</b><br/>
        {self.data['info'].get('longBusinessSummary', 'Information non disponible')}<br/><br/>
        
        <b>Donn√©es op√©rationnelles cl√©s:</b><br/>
        ‚Ä¢ Nombre d'employ√©s: {self.data['info'].get('fullTimeEmployees', 'N/A'):,}<br/>
        ‚Ä¢ Si√®ge social: {self.data['info'].get('city', 'N/A')}, {self.data['info'].get('country', 'N/A')}<br/>
        ‚Ä¢ Site web: {self.data['info'].get('website', 'N/A')}<br/>
        ‚Ä¢ Date de cr√©ation: {self.data['info'].get('foundedYear', 'N/A')}<br/><br/>
        
        <b>Structure de gouvernance:</b><br/>
        ‚Ä¢ PDG: {self.data['info'].get('companyOfficers', [{}])[0].get('name', 'N/A') if self.data['info'].get('companyOfficers') else 'N/A'}<br/>
        ‚Ä¢ Conseil d'administration: {len(self.data['info'].get('companyOfficers', []))} membres<br/>
        """
        
        self.story.append(Paragraph(company_profile, self.styles['Normal']))
        self.story.append(Spacer(1, 0.3*inch))
        
        # Graphique de l'√©volution historique des revenus
        self.create_revenue_evolution_chart()
        
        self.story.append(PageBreak())

if __name__ == "__main__":
    if len(sys.argv) == 4:
        symbol = sys.argv[1]
        report_type = sys.argv[2] 
        output_path = sys.argv[3]
        
        generator = UltraComprehensiveReportGenerator(symbol, report_type, output_path)
        success = generator.generate_report()
        
        if success:
            print(f"‚úÖ Rapport ultra-complet {report_type} g√©n√©r√©: {output_path}")
        else:
            print("‚ùå Erreur lors de la g√©n√©ration")
    else:
        print("Usage: python ultra_comprehensive_report_generator.py <SYMBOL> <REPORT_TYPE> <OUTPUT_PATH>")