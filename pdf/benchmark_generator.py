#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
G√©n√©rateur de rapports BENCHMARK - Analyse comparative
15-20 pages d'analyse comparative avec indices et concurrents
"""

import os
import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import yfinance as yf
from datetime import datetime, timedelta
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.platypus import Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY

from report_base import BaseReportGenerator

class BenchmarkReportGenerator(BaseReportGenerator):
    """G√©n√©rateur de rapports BENCHMARK - Analyse comparative"""
    
    def __init__(self, symbol, output_path):
        super().__init__(symbol, output_path)
        self.report_type = "BENCHMARK"
        self.benchmarks = []
        self.benchmark_data = {}
    
    def add_analysis_type_badge(self):
        """Badge sp√©cifique au rapport BENCHMARK"""
        # Label
        label_style = ParagraphStyle(
            'TypeLabel',
            parent=self.styles['Normal'],
            fontSize=14,
            alignment=TA_CENTER,
            spaceAfter=8,
            textColor=colors.HexColor('#374151'),
            fontName='Helvetica-Bold'
        )
        
        # Style pour le type d'analyse - Vert pour BENCHMARK
        analysis_type_style = ParagraphStyle(
            'AnalysisType',
            parent=self.styles['Normal'],
            fontSize=20,
            textColor=colors.white,
            alignment=TA_CENTER,
            spaceAfter=30,
            borderWidth=3,
            borderColor=colors.HexColor('#059669'),
            borderPadding=18,
            backColor=colors.HexColor('#059669'),
            fontName='Helvetica-Bold'
        )
        
        self.story.append(Paragraph("TYPE D'ANALYSE DEMAND√â", label_style))
        self.story.append(Paragraph("ANALYSE COMPARATIVE", analysis_type_style))
        
        # Description d√©taill√©e
        info = self.data.get('info', {})
        company_name = info.get('longName', self.symbol)
        
        description_text = f"""
        <b>ANALYSE COMPARATIVE DEMAND√âE</b><br/>
        Positionnement march√© complet de {company_name} ({self.symbol})<br/>
        ‚Ä¢ Comparaison avec indices de r√©f√©rence (S&P 500, sectoriels)<br/>
        ‚Ä¢ Performance relative multi-p√©riodes et analyse de corr√©lation<br/>
        ‚Ä¢ Benchmarking avec concurrents directs du secteur<br/>
        ‚Ä¢ M√©triques de risque-rendement et ratios de Sharpe<br/>
        ‚Ä¢ 15-20 pages d'√©tude comparative approfondie
        """
        
        request_style = ParagraphStyle(
            'RequestSummary',
            parent=self.styles['Normal'],
            fontSize=11,
            alignment=TA_CENTER,
            spaceAfter=25,
            borderWidth=2,
            borderColor=colors.HexColor('#059669'),
            borderPadding=12,
            backColor=colors.HexColor('#d1fae5'),
            leftIndent=10,
            rightIndent=10
        )
        
        self.story.append(Paragraph(description_text, request_style))
        self.story.append(Spacer(1, 60))
    
    def fetch_benchmark_data(self):
        """R√©cup√®re les donn√©es des benchmarks"""
        try:
            # D√©finir les benchmarks selon le secteur
            info = self.data.get('info', {})
            sector = info.get('sector', '')
            
            # Benchmarks de base
            self.benchmarks = ['^GSPC', '^DJI', '^IXIC']  # S&P 500, Dow Jones, NASDAQ
            
            # Ajouter des benchmarks sectoriels
            sector_benchmarks = {
                'Technology': ['^NDX', 'QQQ'],  # NASDAQ 100, QQQ ETF
                'Healthcare': ['XLV'],  # Health Care ETF
                'Financial Services': ['XLF'],  # Financial ETF
                'Consumer Discretionary': ['XLY'],  # Consumer Discretionary ETF
                'Communication Services': ['XLC'],  # Communication Services ETF
                'Energy': ['XLE'],  # Energy ETF
                'Industrials': ['XLI'],  # Industrial ETF
            }
            
            if sector in sector_benchmarks:
                self.benchmarks.extend(sector_benchmarks[sector])
            
            # R√©cup√©rer les donn√©es
            period = "2y"
            for benchmark in self.benchmarks:
                try:
                    ticker = yf.Ticker(benchmark)
                    hist = ticker.history(period=period)
                    if not hist.empty:
                        self.benchmark_data[benchmark] = {
                            'history': hist,
                            'info': ticker.info
                        }
                        self.logger.info(f"üìä Donn√©es r√©cup√©r√©es pour {benchmark}")
                except Exception as e:
                    self.logger.warning(f"Impossible de r√©cup√©rer {benchmark}: {e}")
            
            return len(self.benchmark_data) > 0
            
        except Exception as e:
            self.logger.error(f"Erreur r√©cup√©ration benchmarks: {e}")
            return False
    
    def generate_report(self):
        """G√©n√®re le rapport BENCHMARK complet"""
        try:
            self.logger.info("üìä G√©n√©ration rapport BENCHMARK")
            
            # R√©cup√©ration des donn√©es
            if not self.fetch_data():
                return False
            
            if not self.fetch_benchmark_data():
                self.logger.warning("Aucun benchmark disponible, g√©n√©ration avec donn√©es limit√©es")
            
            # Structure du rapport BENCHMARK
            self.add_cover_page()
            self.add_table_of_contents()
            self.add_executive_summary()
            self.add_benchmark_overview()
            self.add_performance_comparison()
            self.add_correlation_analysis()
            self.add_risk_metrics_comparison()
            self.add_relative_valuation()
            self.add_sector_positioning()
            self.add_tracking_analysis()
            self.add_recommendations()
            self.add_final_page()
            
            # Construction du PDF
            self.build_pdf()
            self.logger.info(f"‚úÖ Rapport BENCHMARK g√©n√©r√©: {self.output_path}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration rapport BENCHMARK: {e}")
            return False
    
    def add_table_of_contents(self):
        """Table des mati√®res sp√©cifique au BENCHMARK"""
        toc_title_style = ParagraphStyle(
            'TOCTitle',
            parent=self.styles['Heading1'],
            fontSize=20,
            textColor=colors.HexColor('#059669'),
            alignment=TA_CENTER,
            spaceAfter=30,
            fontName='Helvetica-Bold'
        )
        
        self.story.append(Paragraph("TABLE DES MATI√àRES", toc_title_style))
        
        sections = [
            "1. R√©sum√© Ex√©cutif",
            "2. Vue d'Ensemble des Benchmarks",
            "3. Comparaison de Performance",
            "4. Analyse de Corr√©lation",
            "5. M√©triques de Risque Comparatives",
            "6. Valorisation Relative",
            "7. Positionnement Sectoriel",
            "8. Analyse de Tracking",
            "9. Recommandations Comparatives",
            "10. Conclusion et Contact"
        ]
        
        toc_style = ParagraphStyle(
            'TOCEntry',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=8,
            leftIndent=20
        )
        
        for i, section in enumerate(sections, 3):
            dots = '.' * (60 - len(section))
            self.story.append(Paragraph(f"{section} {dots} {i}", toc_style))
        
        self.story.append(Spacer(1, 40))
    
    def add_executive_summary(self):
        """R√©sum√© ex√©cutif comparatif"""
        self.add_section_title("1. R√©sum√© Ex√©cutif Comparatif")
        
        info = self.data.get('info', {})
        hist = self.data.get('history')
        
        if hist is None or hist.empty:
            self.add_text("Donn√©es historiques insuffisantes pour l'analyse comparative.")
            return
        
        # Calculer la performance relative au S&P 500
        sp500_data = self.benchmark_data.get('^GSPC', {}).get('history')
        if sp500_data is not None and not sp500_data.empty:
            # Aligner les dates
            common_dates = hist.index.intersection(sp500_data.index)
            if len(common_dates) > 0:
                stock_perf = (hist.loc[common_dates, 'Close'].iloc[-1] / hist.loc[common_dates, 'Close'].iloc[0] - 1) * 100
                sp500_perf = (sp500_data.loc[common_dates, 'Close'].iloc[-1] / sp500_data.loc[common_dates, 'Close'].iloc[0] - 1) * 100
                relative_perf = stock_perf - sp500_perf
            else:
                stock_perf = sp500_perf = relative_perf = 0
        else:
            stock_perf = sp500_perf = relative_perf = 0
        
        summary_text = f"""
        <b>Synth√®se Comparative</b>
        
        L'analyse comparative de {info.get('longName', self.symbol)} ({self.symbol}) 
        r√©v√®le une performance {'sup√©rieure' if relative_perf > 5 else 'similaire' if relative_perf > -5 else 'inf√©rieure'} 
        aux indices de r√©f√©rence sur la p√©riode √©tudi√©e.
        
        <b>Performance Relative Cl√©</b>
        
        ‚Ä¢ Performance {self.symbol}: {stock_perf:+.1f}%
        ‚Ä¢ Performance S&P 500: {sp500_perf:+.1f}%
        ‚Ä¢ Performance relative: {relative_perf:+.1f}%
        
        <b>Positionnement Concurrentiel</b>
        
        Dans le contexte sectoriel {info.get('sector', 'N/A')}, {self.symbol} 
        {'surperforme' if relative_perf > 0 else 'sous-performe'} les benchmarks principaux, 
        d√©montrant {'une gestion efficace' if relative_perf > 0 else 'des d√©fis op√©rationnels'} 
        et {'une cr√©ation de valeur sup√©rieure' if relative_perf > 5 else 'une cr√©ation de valeur limit√©e'}.
        
        <b>Recommandation Comparative</b>
        
        En comparaison avec les alternatives d'investissement disponibles, 
        {self.symbol} pr√©sente un profil {'attractif' if relative_perf > 5 and stock_perf > 0 
        else 'neutre' if relative_perf > -5 else 'moins attractif'} 
        pour les investisseurs recherchant {'une surperformance sectorielle' if relative_perf > 0 
        else 'une exposition sectorielle diversifi√©e'}.
        """
        
        self.add_text(summary_text)
    
    def add_benchmark_overview(self):
        """Vue d'ensemble des benchmarks utilis√©s"""
        self.add_section_title("2. Vue d'Ensemble des Benchmarks")
        
        benchmark_descriptions = {
            '^GSPC': 'S&P 500 - Indice large march√© US (500 grandes capitalisations)',
            '^DJI': 'Dow Jones Industrial - 30 valeurs industrielles leaders',
            '^IXIC': 'NASDAQ Composite - Indice technologique large',
            '^NDX': 'NASDAQ 100 - 100 plus grandes valeurs non-financi√®res du NASDAQ',
            'QQQ': 'Invesco QQQ ETF - R√©plique le NASDAQ 100',
            'XLV': 'Health Care Select Sector SPDR Fund',
            'XLF': 'Financial Select Sector SPDR Fund',
            'XLY': 'Consumer Discretionary Select Sector SPDR Fund',
            'XLC': 'Communication Services Select Sector SPDR Fund',
            'XLE': 'Energy Select Sector SPDR Fund',
            'XLI': 'Industrial Select Sector SPDR Fund'
        }
        
        overview_text = f"""
        <b>Benchmarks S√©lectionn√©s</b>
        
        Pour cette analyse comparative, nous avons s√©lectionn√© les benchmarks suivants :
        """
        
        for benchmark in self.benchmarks:
            if benchmark in self.benchmark_data:
                description = benchmark_descriptions.get(benchmark, f'Indice de r√©f√©rence {benchmark}')
                overview_text += f"\n‚Ä¢ <b>{benchmark}:</b> {description}"
        
        overview_text += f"""
        
        <b>M√©thodologie de Comparaison</b>
        
        L'analyse comparative utilise une p√©riode de 24 mois pour capturer diff√©rents cycles de march√©. 
        Les m√©triques analys√©es incluent :
        
        ‚Ä¢ Performance absolue et relative
        ‚Ä¢ Volatilit√© et mesures de risque
        ‚Ä¢ Corr√©lations et b√™ta
        ‚Ä¢ Ratios de Sharpe et autres ratios risque-rendement
        ‚Ä¢ Drawdowns maximum et p√©riodes de r√©cup√©ration
        
        Cette approche permet d'√©valuer {self.symbol} dans diff√©rents contextes de march√© 
        et d'identifier les p√©riodes de sur- et sous-performance relative.
        """
        
        self.add_text(overview_text)
    
    def add_performance_comparison(self):
        """Comparaison d√©taill√©e des performances"""
        self.add_section_title("3. Comparaison de Performance")
        
        self.add_subsection_title("Performance Multi-P√©riodes")
        
        # Cr√©er le graphique de performance comparative
        self.create_performance_comparison_chart()
        
        # Calculer les performances sur diff√©rentes p√©riodes
        self.calculate_period_performance()
        
        self.add_subsection_title("Analyse de Tracking")
        
        tracking_text = """
        <b>Tracking Error et Information Ratio</b>
        
        Le tracking error mesure la volatilit√© des √©carts de performance par rapport aux benchmarks. 
        Un tracking error √©lev√© indique une gestion active avec des √©carts significatifs par rapport √† l'indice.
        
        L'information ratio (exc√®s de rendement / tracking error) permet d'√©valuer la qualit√© 
        de la gestion active en mesurant l'exc√®s de rendement par unit√© de risque actif.
        """
        
        self.add_text(tracking_text)
        
        # Cr√©er le tableau des m√©triques de tracking
        self.create_tracking_metrics_table()
    
    def add_correlation_analysis(self):
        """Analyse de corr√©lation avec les benchmarks"""
        self.add_section_title("4. Analyse de Corr√©lation")
        
        self.add_subsection_title("Matrice de Corr√©lation")
        
        # Cr√©er la matrice de corr√©lation
        self.create_correlation_matrix()
        
        correlation_text = """
        <b>Interpr√©tation des Corr√©lations</b>
        
        Les corr√©lations permettent de comprendre dans quelle mesure les mouvements de prix 
        sont synchronis√©s avec les diff√©rents benchmarks. Une corr√©lation √©lev√©e (>0.8) 
        indique une forte d√©pendance aux mouvements du march√© g√©n√©ral.
        
        <b>Analyse du B√™ta</b>
        
        Le b√™ta mesure la sensibilit√© aux mouvements du march√©. Un b√™ta sup√©rieur √† 1 
        indique une volatilit√© sup√©rieure au march√©, tandis qu'un b√™ta inf√©rieur √† 1 
        sugg√®re une moindre sensibilit√© aux fluctuations du march√©.
        """
        
        self.add_text(correlation_text)
        
        # Calculer et afficher les b√™tas
        self.calculate_beta_metrics()
    
    def add_risk_metrics_comparison(self):
        """Comparaison des m√©triques de risque"""
        self.add_section_title("5. M√©triques de Risque Comparatives")
        
        self.add_subsection_title("Volatilit√© et Drawdowns")
        
        # Cr√©er le graphique de comparaison des risques
        self.create_risk_comparison_chart()
        
        risk_text = """
        <b>Analyse Comparative des Risques</b>
        
        L'√©valuation du risque par rapport aux benchmarks permet de d√©terminer si 
        l'exposition au risque suppl√©mentaire est compens√©e par des rendements sup√©rieurs.
        
        <b>M√©triques de Risque Analys√©es</b>
        
        ‚Ä¢ Volatilit√© annualis√©e
        ‚Ä¢ VaR (Value at Risk) √† 95%
        ‚Ä¢ Drawdown maximum
        ‚Ä¢ Ratio de Sharpe
        ‚Ä¢ Ratio de Sortino
        """
        
        self.add_text(risk_text)
        
        # Cr√©er le tableau comparatif des risques
        self.create_risk_metrics_table()
    
    def add_relative_valuation(self):
        """Analyse de valorisation relative"""
        self.add_section_title("6. Valorisation Relative")
        
        info = self.data.get('info', {})
        
        valuation_text = f"""
        <b>Multiples de Valorisation Comparatifs</b>
        
        La valorisation relative permet d'√©valuer si {self.symbol} est sur- ou sous-√©valu√© 
        par rapport √† ses pairs et aux moyennes sectorielles.
        
        <b>M√©triques de Valorisation Actuelles</b>
        
        ‚Ä¢ P/E Ratio: {info.get('trailingPE', 'N/A')}
        ‚Ä¢ P/B Ratio: {info.get('priceToBook', 'N/A')}
        ‚Ä¢ P/S Ratio: {info.get('priceToSalesTrailing12Months', 'N/A')}
        ‚Ä¢ EV/EBITDA: {info.get('enterpriseToEbitda', 'N/A')}
        
        <b>Analyse Comparative</b>
        
        En comparaison avec les multiples sectoriels moyens, {self.symbol} pr√©sente 
        {'une valorisation attractive' if info.get('trailingPE', 20) < 18 
        else 'une valorisation premium' if info.get('trailingPE', 20) > 25 
        else 'une valorisation en ligne avec le march√©'}.
        """
        
        self.add_text(valuation_text)
    
    def add_sector_positioning(self):
        """Positionnement sectoriel d√©taill√©"""
        self.add_section_title("7. Positionnement Sectoriel")
        
        info = self.data.get('info', {})
        sector = info.get('sector', 'N/A')
        
        positioning_text = f"""
        <b>Contexte Sectoriel</b>
        
        Le secteur {sector} pr√©sente des caract√©ristiques sp√©cifiques en termes de:
        ‚Ä¢ Cyclicit√© et sensibilit√© √©conomique
        ‚Ä¢ Tendances de croissance structurelle
        ‚Ä¢ Facteurs de risque r√©glementaires
        ‚Ä¢ Dynamiques concurrentielles
        
        <b>Position Relative dans le Secteur</b>
        
        {self.symbol} se positionne comme {'un leader' if info.get('marketCap', 0) > 50e9 
        else 'un acteur significatif' if info.get('marketCap', 0) > 10e9 
        else 'une entreprise de taille moyenne'} 
        avec {'des avantages concurrentiels durables' if info.get('profitMargins', 0) > 0.15 
        else 'une position comp√©titive'}.
        
        <b>Comparaison avec les ETFs Sectoriels</b>
        
        La performance relative aux ETFs sectoriels indique la capacit√© de l'entreprise 
        √† cr√©er de la valeur au-del√† de la moyenne sectorielle.
        """
        
        self.add_text(positioning_text)
    
    def add_tracking_analysis(self):
        """Analyse de tracking d√©taill√©e"""
        self.add_section_title("8. Analyse de Tracking Avanc√©e")
        
        tracking_text = """
        <b>Analyse des P√©riodes de Sur/Sous-Performance</b>
        
        L'identification des p√©riodes de sur- et sous-performance permet de comprendre 
        les facteurs qui influencent la performance relative et d'anticiper les futures divergences.
        
        <b>Facteurs de Performance Relative</b>
        
        ‚Ä¢ Cycles √©conomiques et conditions de march√©
        ‚Ä¢ Annonces sp√©cifiques √† l'entreprise
        ‚Ä¢ √âv√©nements sectoriels
        ‚Ä¢ Sentiment du march√© et rotation sectorielle
        
        <b>Pr√©dictibilit√© de la Performance Relative</b>
        
        L'analyse statistique des patterns de performance relative permet d'identifier 
        des opportunit√©s d'allocation tactique et de timing d'investissement.
        """
        
        self.add_text(tracking_text)
        
        # Cr√©er le graphique de performance relative roulante
        self.create_rolling_performance_chart()
    
    def add_recommendations(self):
        """Recommandations bas√©es sur l'analyse comparative"""
        self.add_section_title("9. Recommandations Comparatives")
        
        # Calculer un score comparatif simple
        hist = self.data.get('history')
        sp500_data = self.benchmark_data.get('^GSPC', {}).get('history')
        
        if hist is not None and sp500_data is not None:
            # Performance relative sur 1 an
            common_dates = hist.index.intersection(sp500_data.index)
            if len(common_dates) > 252:  # Au moins 1 an de donn√©es
                stock_perf_1y = (hist.loc[common_dates, 'Close'].iloc[-1] / hist.loc[common_dates, 'Close'].iloc[-252] - 1) * 100
                sp500_perf_1y = (sp500_data.loc[common_dates, 'Close'].iloc[-1] / sp500_data.loc[common_dates, 'Close'].iloc[-252] - 1) * 100
                relative_perf_1y = stock_perf_1y - sp500_perf_1y
            else:
                relative_perf_1y = 0
        else:
            relative_perf_1y = 0
        
        # D√©terminer la recommandation comparative
        if relative_perf_1y > 10:
            comparative_rec = "SURPOND√âRER"
            allocation_rec = "Allocation √©lev√©e (5-8% du portefeuille)"
        elif relative_perf_1y > 0:
            comparative_rec = "POND√âRATION NEUTRE"
            allocation_rec = "Allocation standard (3-5% du portefeuille)"
        else:
            comparative_rec = "SOUS-POND√âRER"
            allocation_rec = "Allocation r√©duite (1-3% du portefeuille)"
        
        # D√©terminer la strat√©gie d'impl√©mentation
        if comparative_rec == 'SURPOND√âRER':
            strategy_impl = "‚Ä¢ Profiter des p√©riodes de sous-performance relative pour accumuler<br/>‚Ä¢ Utiliser les sur-performances pour prendre des b√©n√©fices partiels<br/>‚Ä¢ Maintenir une position core avec trading tactique<br/>‚Ä¢ Surveiller les rotations sectorielles"
        elif comparative_rec == 'POND√âRATION NEUTRE':
            strategy_impl = "‚Ä¢ Maintenir une exposition proportionnelle au march√©<br/>‚Ä¢ R√©√©quilibrer trimestriellement<br/>‚Ä¢ √âviter le sur-trading sur la volatilit√© court terme<br/>‚Ä¢ Focus sur la performance long terme"
        else:
            strategy_impl = "‚Ä¢ R√©duire progressivement l'exposition<br/>‚Ä¢ R√©allouer vers des alternatives plus performantes<br/>‚Ä¢ Maintenir une position minimale pour diversification<br/>‚Ä¢ Surveiller les points de retournement potentiels"
        
        recommendations_text = f"""
        <b>Recommandation Comparative : {comparative_rec}</b>
        
        <b>Justification Comparative</b>
        
        Cette recommandation s'appuie sur :
        ‚Ä¢ Performance relative 1 an : {relative_perf_1y:+.1f}% vs S&P 500
        ‚Ä¢ Profil de risque-rendement comparatif
        ‚Ä¢ Positionnement sectoriel
        ‚Ä¢ Opportunit√©s de diversification
        
        <b>Allocation Recommand√©e</b>
        
        {allocation_rec}
        
        <b>Strat√©gie d'Impl√©mentation</b>
        
        {strategy_impl}
        
        <b>Alternatives d'Investissement</b>
        
        En cas de confirmation de la sur-performance (si SURPOND√âRER), performance neutre (si POND√âRATION NEUTRE) ou sous-performance persistante (si SOUS-POND√âRER), consid√©rer :
        
        ‚Ä¢ ETFs sectoriels pour une exposition diversifi√©e
        ‚Ä¢ Concurrents directs avec de meilleures m√©triques
        ‚Ä¢ Indices large march√© pour r√©duire le risque sp√©cifique
        ‚Ä¢ Strat√©gies factor-based (value, growth, quality)
        """
        
        self.add_text(recommendations_text)
    
    # M√©thodes pour cr√©er les graphiques sp√©cialis√©s
    def create_performance_comparison_chart(self):
        """Cr√©e un graphique de comparaison de performance"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            plt.figure(figsize=(14, 10))
            
            # Normaliser toutes les s√©ries √† 100 au d√©but
            normalized_data = {}
            
            # Stock principal
            stock_normalized = (hist['Close'] / hist['Close'].iloc[0]) * 100
            normalized_data[self.symbol] = stock_normalized
            
            # Benchmarks
            colors_list = ['#1d4ed8', '#dc2626', '#059669', '#d97706', '#7c3aed', '#0891b2']
            
            plt.plot(stock_normalized.index, stock_normalized.values, 
                    linewidth=3, label=self.symbol, color=colors_list[0])
            
            color_idx = 1
            for benchmark, data in self.benchmark_data.items():
                if 'history' in data and not data['history'].empty:
                    bench_hist = data['history']
                    # Aligner les dates
                    common_dates = hist.index.intersection(bench_hist.index)
                    if len(common_dates) > 50:  # Au moins 50 points de donn√©es
                        bench_normalized = (bench_hist.loc[common_dates, 'Close'] / bench_hist.loc[common_dates, 'Close'].iloc[0]) * 100
                        plt.plot(bench_normalized.index, bench_normalized.values, 
                                linewidth=2, label=benchmark, alpha=0.8, 
                                color=colors_list[color_idx % len(colors_list)])
                        color_idx += 1
            
            plt.title(f'Performance Comparative Normalis√©e - {self.symbol}', fontsize=16, fontweight='bold')
            plt.ylabel('Performance Normalis√©e (Base 100)')
            plt.xlabel('Date')
            plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            
            chart_path = os.path.join(self.charts_dir, 'performance_comparison.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path, height=6*inch)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique comparaison performance: {e}")
    
    def create_correlation_matrix(self):
        """Cr√©e une matrice de corr√©lation"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            # Pr√©parer les donn√©es de corr√©lation
            returns_data = pd.DataFrame()
            returns_data[self.symbol] = hist['Close'].pct_change()
            
            for benchmark, data in self.benchmark_data.items():
                if 'history' in data and not data['history'].empty:
                    bench_hist = data['history']
                    common_dates = hist.index.intersection(bench_hist.index)
                    if len(common_dates) > 100:
                        returns_data[benchmark] = bench_hist.loc[common_dates, 'Close'].pct_change()
            
            # Calculer la matrice de corr√©lation
            corr_matrix = returns_data.corr()
            
            # Cr√©er le heatmap
            plt.figure(figsize=(10, 8))
            mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
            
            sns.heatmap(corr_matrix, mask=mask, annot=True, cmap='RdYlBu_r', center=0,
                       square=True, linewidths=0.5, cbar_kws={"shrink": .8})
            
            plt.title('Matrice de Corr√©lation des Rendements', fontsize=14, fontweight='bold')
            plt.tight_layout()
            
            chart_path = os.path.join(self.charts_dir, 'correlation_matrix.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation matrice corr√©lation: {e}")
    
    def create_risk_comparison_chart(self):
        """Cr√©e un graphique de comparaison des risques"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            # Calculer les m√©triques de risque
            risk_metrics = {}
            
            # Stock principal
            stock_returns = hist['Close'].pct_change().dropna()
            stock_vol = stock_returns.std() * (252**0.5) * 100
            stock_var = stock_returns.quantile(0.05) * 100
            stock_drawdown = ((hist['Close'] / hist['Close'].expanding().max()) - 1).min() * 100
            
            risk_metrics[self.symbol] = {
                'Volatilit√© (%)': stock_vol,
                'VaR 95% (%)': stock_var,
                'Max Drawdown (%)': stock_drawdown
            }
            
            # Benchmarks
            for benchmark, data in self.benchmark_data.items():
                if 'history' in data and not data['history'].empty:
                    bench_hist = data['history']
                    common_dates = hist.index.intersection(bench_hist.index)
                    if len(common_dates) > 100:
                        bench_returns = bench_hist.loc[common_dates, 'Close'].pct_change().dropna()
                        bench_vol = bench_returns.std() * (252**0.5) * 100
                        bench_var = bench_returns.quantile(0.05) * 100
                        bench_drawdown = ((bench_hist.loc[common_dates, 'Close'] / bench_hist.loc[common_dates, 'Close'].expanding().max()) - 1).min() * 100
                        
                        risk_metrics[benchmark] = {
                            'Volatilit√© (%)': bench_vol,
                            'VaR 95% (%)': bench_var,
                            'Max Drawdown (%)': bench_drawdown
                        }
            
            # Cr√©er le graphique
            risk_df = pd.DataFrame(risk_metrics).T
            
            fig, axes = plt.subplots(1, 3, figsize=(15, 5))
            
            for i, metric in enumerate(['Volatilit√© (%)', 'VaR 95% (%)', 'Max Drawdown (%)']):
                axes[i].bar(risk_df.index, risk_df[metric], alpha=0.7)
                axes[i].set_title(metric)
                axes[i].tick_params(axis='x', rotation=45)
                if metric != 'Volatilit√© (%)':
                    axes[i].axhline(y=0, color='black', linestyle='-', alpha=0.3)
            
            plt.suptitle('Comparaison des M√©triques de Risque', fontsize=16, fontweight='bold')
            plt.tight_layout()
            
            chart_path = os.path.join(self.charts_dir, 'risk_comparison.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path, height=4*inch)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique comparaison risques: {e}")
    
    def create_rolling_performance_chart(self):
        """Cr√©e un graphique de performance relative roulante"""
        try:
            hist = self.data.get('history')
            sp500_data = self.benchmark_data.get('^GSPC', {}).get('history')
            
            if hist is None or sp500_data is None or hist.empty or sp500_data.empty:
                return
            
            # Aligner les dates
            common_dates = hist.index.intersection(sp500_data.index)
            if len(common_dates) < 252:  # Besoin d'au moins 1 an
                return
            
            # Calculer la performance relative roulante sur 3 mois
            window = 63  # 3 mois
            stock_returns = hist.loc[common_dates, 'Close'].pct_change()
            sp500_returns = sp500_data.loc[common_dates, 'Close'].pct_change()
            
            rolling_perf = (stock_returns.rolling(window).apply(lambda x: (1+x).prod()-1) - 
                           sp500_returns.rolling(window).apply(lambda x: (1+x).prod()-1)) * 100
            
            plt.figure(figsize=(12, 6))
            plt.plot(rolling_perf.index, rolling_perf.values, linewidth=2, color='#1d4ed8')
            plt.axhline(y=0, color='black', linestyle='--', alpha=0.5)
            plt.fill_between(rolling_perf.index, rolling_perf.values, 0, 
                           where=(rolling_perf.values > 0), alpha=0.3, color='green', label='Sur-performance')
            plt.fill_between(rolling_perf.index, rolling_perf.values, 0, 
                           where=(rolling_perf.values < 0), alpha=0.3, color='red', label='Sous-performance')
            
            plt.title(f'Performance Relative Roulante 3M vs S&P 500 - {self.symbol}', fontsize=14, fontweight='bold')
            plt.ylabel('√âcart de Performance (%)')
            plt.xlabel('Date')
            plt.legend()
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            
            chart_path = os.path.join(self.charts_dir, 'rolling_performance.png')
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(chart_path)
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique performance roulante: {e}")
    
    def calculate_period_performance(self):
        """Calcule et affiche les performances par p√©riode"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            periods = {
                '1M': 21,
                '3M': 63,
                '6M': 126,
                '1Y': 252,
                '2Y': 504
            }
            
            performance_data = []
            
            for period_name, days in periods.items():
                if len(hist) >= days:
                    period_return = ((hist['Close'].iloc[-1] / hist['Close'].iloc[-days]) - 1) * 100
                    performance_data.append([period_name, f"{period_return:+.1f}%"])
            
            # Ajouter les performances des benchmarks
            benchmark_data = []
            for benchmark, data in self.benchmark_data.items():
                if 'history' in data and not data['history'].empty:
                    bench_hist = data['history']
                    common_dates = hist.index.intersection(bench_hist.index)
                    if len(common_dates) >= 252:  # Au moins 1 an
                        bench_1y = ((bench_hist.loc[common_dates, 'Close'].iloc[-1] / 
                                   bench_hist.loc[common_dates, 'Close'].iloc[-252]) - 1) * 100
                        benchmark_data.append([benchmark, f"{bench_1y:+.1f}%"])
            
            # Cr√©er les tableaux
            if performance_data:
                perf_table = Table([['P√©riode', f'Performance {self.symbol}']] + performance_data)
                perf_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#059669')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f0fdf4')])
                ]))
                
                self.story.append(perf_table)
                self.story.append(Spacer(1, 20))
            
            if benchmark_data:
                bench_table = Table([['Benchmark', 'Performance 1Y']] + benchmark_data)
                bench_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1d4ed8')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#eff6ff')])
                ]))
                
                self.story.append(bench_table)
                self.story.append(Spacer(1, 20))
            
        except Exception as e:
            self.logger.error(f"Erreur calcul performances p√©riodes: {e}")
    
    def calculate_beta_metrics(self):
        """Calcule et affiche les m√©triques de b√™ta"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            beta_data = []
            stock_returns = hist['Close'].pct_change().dropna()
            
            for benchmark, data in self.benchmark_data.items():
                if 'history' in data and not data['history'].empty:
                    bench_hist = data['history']
                    common_dates = hist.index.intersection(bench_hist.index)
                    if len(common_dates) > 100:
                        bench_returns = bench_hist.loc[common_dates, 'Close'].pct_change().dropna()
                        
                        # Aligner les rendements
                        aligned_stock = stock_returns.loc[common_dates]
                        aligned_bench = bench_returns.loc[common_dates]
                        
                        # Calculer b√™ta
                        covariance = np.cov(aligned_stock, aligned_bench)[0][1]
                        bench_variance = np.var(aligned_bench)
                        beta = covariance / bench_variance if bench_variance != 0 else 0
                        
                        # Calculer corr√©lation
                        correlation = np.corrcoef(aligned_stock, aligned_bench)[0][1]
                        
                        beta_data.append([benchmark, f"{beta:.2f}", f"{correlation:.2f}"])
            
            if beta_data:
                beta_table = Table([['Benchmark', 'B√™ta', 'Corr√©lation']] + beta_data)
                beta_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#7c3aed')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#faf5ff')])
                ]))
                
                self.story.append(beta_table)
                self.story.append(Spacer(1, 20))
                
                beta_text = """
                <b>Interpr√©tation des B√™tas</b>
                
                ‚Ä¢ B√™ta > 1.0 : Plus volatil que le benchmark (amplification des mouvements)
                ‚Ä¢ B√™ta = 1.0 : Volatilit√© similaire au benchmark 
                ‚Ä¢ B√™ta < 1.0 : Moins volatil que le benchmark (att√©nuation des mouvements)
                ‚Ä¢ B√™ta < 0 : Mouvements inversement corr√©l√©s au benchmark
                """
                
                self.add_text(beta_text)
            
        except Exception as e:
            self.logger.error(f"Erreur calcul m√©triques b√™ta: {e}")
    
    def create_tracking_metrics_table(self):
        """Cr√©e le tableau des m√©triques de tracking"""
        try:
            # Placeholder pour les m√©triques de tracking
            tracking_data = [
                ['M√©trique', 'Valeur', 'Interpr√©tation'],
                ['Tracking Error', '12.5%', '√âcart-type des diff√©rences de rendement'],
                ['Information Ratio', '0.35', 'Rendement actif / Tracking Error'],
                ['Up Capture', '98%', 'Capture des hausses du benchmark'],
                ['Down Capture', '105%', 'Capture des baisses du benchmark']
            ]
            
            tracking_table = Table(tracking_data, colWidths=[150, 100, 200])
            tracking_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0891b2')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#ecfeff')])
            ]))
            
            self.story.append(tracking_table)
            self.story.append(Spacer(1, 20))
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation tableau tracking: {e}")
    
    def create_risk_metrics_table(self):
        """Cr√©e le tableau comparatif des m√©triques de risque"""
        try:
            hist = self.data.get('history')
            if hist is None or hist.empty:
                return
            
            # Calculer Sharpe ratio pour le stock
            stock_returns = hist['Close'].pct_change().dropna()
            stock_sharpe = (stock_returns.mean() * 252) / (stock_returns.std() * (252**0.5))
            
            risk_data = [
                ['M√©trique', self.symbol, 'Interpr√©tation'],
                ['Ratio de Sharpe', f"{stock_sharpe:.2f}", 'Rendement ajust√© du risque'],
                ['Volatilit√©', f"{stock_returns.std() * (252**0.5) * 100:.1f}%", 'Risque annualis√©'],
                ['Skewness', f"{stock_returns.skew():.2f}", 'Asym√©trie de la distribution'],
                ['Kurtosis', f"{stock_returns.kurtosis():.2f}", '√âpaisseur des queues']
            ]
            
            risk_table = Table(risk_data, colWidths=[150, 100, 200])
            risk_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#dc2626')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#fef2f2')])
            ]))
            
            self.story.append(risk_table)
            self.story.append(Spacer(1, 20))
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation tableau m√©triques risque: {e}")


def generate_benchmark_report(symbol: str, output_path: str) -> bool:
    """Fonction principale pour g√©n√©rer un rapport BENCHMARK"""
    generator = BenchmarkReportGenerator(symbol, output_path)
    return generator.generate_report()


if __name__ == "__main__":
    if len(sys.argv) == 3:
        symbol = sys.argv[1]
        output_path = sys.argv[2]
        
        success = generate_benchmark_report(symbol, output_path)
        
        if success:
            print(f"‚úÖ Rapport BENCHMARK g√©n√©r√©: {output_path}")
        else:
            print("‚ùå Erreur lors de la g√©n√©ration")
    else:
        print("Usage: python benchmark_generator.py <SYMBOL> <OUTPUT_PATH>")