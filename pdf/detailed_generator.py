#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
G√©n√©rateur de rapport DETAILED - Analyse technique et fondamentale approfondie
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import yfinance as yf
from reportlab.lib import colors
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.platypus import Paragraph, Spacer, PageBreak, Table, TableStyle
from report_base import BaseReportGenerator

class DetailedReportGenerator(BaseReportGenerator):
    """G√©n√©rateur de rapports d'analyse d√©taill√©e"""
    
    def __init__(self, symbol, output_path):
        super().__init__(symbol, output_path)
        self.report_type = "DETAILED"
        
    def add_analysis_type_badge(self):
        """Ajoute le badge de type d'analyse sur la page de garde"""
        badge_style = ParagraphStyle(
            'BadgeStyle',
            parent=self.styles['Normal'],
            fontSize=16,
            textColor=colors.white,
            alignment=TA_CENTER,
            spaceAfter=30,
            fontName='Helvetica-Bold',
            backColor=colors.HexColor('#059669'),
            borderWidth=2,
            borderColor=colors.HexColor('#059669'),
            borderPadding=15,
            borderRadius=10
        )
        
        request_summary = f"Analyse technique et fondamentale compl√®te de {self.symbol}"
        self.story.append(Paragraph(f"Type d'Analyse : DETAILED", badge_style))
        
        summary_style = ParagraphStyle(
            'SummaryStyle',
            parent=self.styles['Normal'],
            fontSize=12,
            textColor=colors.HexColor('#374151'),
            alignment=TA_CENTER,
            spaceAfter=40,
            fontStyle='italic'
        )
        self.story.append(Paragraph(request_summary, summary_style))
    
    def generate_report(self):
        """G√©n√®re le rapport d√©taill√© complet"""
        self.logger.info(f"üìä G√©n√©ration rapport DETAILED")
        
        # R√©cup√©ration des donn√©es
        if not self.fetch_data():
            return False
        
        # Construction du rapport
        self.add_cover_page()
        self.add_table_of_contents()
        self.add_executive_summary()
        self.add_fundamental_analysis()
        self.add_technical_analysis()
        self.add_quantitative_metrics()
        self.add_risk_analysis()
        self.add_sector_comparison()
        self.add_valuation_analysis()
        self.add_dividend_analysis()
        self.add_insider_activity()
        self.add_analyst_consensus()
        self.add_final_recommendations()
        self.add_final_page()
        
        # Construction du PDF
        self.build_pdf()
        self.logger.info(f"‚úÖ Rapport DETAILED g√©n√©r√©: {self.output_path}")
        return True
    
    def add_table_of_contents(self):
        """Ajoute une table des mati√®res"""
        self.add_section_title("Table des Mati√®res")
        
        toc_data = [
            ["1.", "R√©sum√© Ex√©cutif", "3"],
            ["2.", "Analyse Fondamentale", "4"],
            ["3.", "Analyse Technique", "8"],
            ["4.", "M√©triques Quantitatives", "12"],
            ["5.", "Analyse des Risques", "15"],
            ["6.", "Comparaison Sectorielle", "18"],
            ["7.", "Analyse de Valorisation", "21"],
            ["8.", "Analyse des Dividendes", "24"],
            ["9.", "Activit√© des Initi√©s", "26"],
            ["10.", "Consensus Analystes", "28"],
            ["11.", "Recommandations Finales", "30"]
        ]
        
        toc_table = Table(toc_data, colWidths=[30, 350, 50])
        toc_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        self.story.append(toc_table)
        self.story.append(PageBreak())
    
    def add_executive_summary(self):
        """Ajoute le r√©sum√© ex√©cutif"""
        self.add_section_title("1. R√©sum√© Ex√©cutif")
        
        info = self.data.get('info', {})
        hist = self.data.get('history')
        
        # Calculs de base
        current_price = info.get('currentPrice', 0)
        price_change_1m = 0
        price_change_3m = 0
        price_change_1y = 0
        
        if hist is not None and not hist.empty and len(hist) > 0:
            try:
                price_change_1m = ((current_price - hist['Close'].iloc[-22]) / hist['Close'].iloc[-22] * 100) if len(hist) >= 22 else 0
                price_change_3m = ((current_price - hist['Close'].iloc[-66]) / hist['Close'].iloc[-66] * 100) if len(hist) >= 66 else 0
                price_change_1y = ((current_price - hist['Close'].iloc[-252]) / hist['Close'].iloc[-252] * 100) if len(hist) >= 252 else 0
            except:
                pass
        
        # D√©termination du sentiment global
        sentiment_score = (price_change_1m + price_change_3m + price_change_1y) / 3
        if sentiment_score > 10:
            sentiment = "TR√àS POSITIF"
            sentiment_color = "#059669"
        elif sentiment_score > 0:
            sentiment = "POSITIF"
            sentiment_color = "#10b981"
        elif sentiment_score > -10:
            sentiment = "NEUTRE"
            sentiment_color = "#f59e0b"
        else:
            sentiment = "N√âGATIF"
            sentiment_color = "#dc2626"
        
        summary_text = f"""
        <b>Vue d'Ensemble</b>
        
        {info.get('longName', self.symbol)} ({self.symbol}) pr√©sente actuellement un profil d'investissement 
        avec un sentiment g√©n√©ral <b style="color: {sentiment_color}">{sentiment}</b> bas√© sur notre analyse multi-dimensionnelle.
        
        <b>Performance R√©cente</b>
        
        ‚Ä¢ Performance 1 mois : {price_change_1m:+.1f}%
        ‚Ä¢ Performance 3 mois : {price_change_3m:+.1f}%
        ‚Ä¢ Performance 1 an : {price_change_1y:+.1f}%
        
        <b>Points Cl√©s de l'Analyse</b>
        
        Cette analyse d√©taill√©e couvre 11 dimensions critiques de l'investissement, incluant l'analyse 
        fondamentale, technique, quantitative, les risques, la valorisation, et les perspectives sectorielles. 
        L'approche m√©thodologique combine data science, analyse financi√®re traditionnelle et intelligence 
        de march√© pour fournir une √©valuation exhaustive.
        
        <b>Secteur d'Activit√©</b>
        
        Secteur : {info.get('sector', 'Non disponible')}
        Industrie : {info.get('industry', 'Non disponible')}
        Capitalisation : ${info.get('marketCap', 0):,.0f} (si disponible)
        
        <b>Objectif de l'Analyse</b>
        
        Cette analyse d√©taill√©e vise √† fournir une compr√©hension compl√®te des opportunit√©s et risques 
        associ√©s √† cet investissement, avec des recommandations actionables bas√©es sur des m√©triques 
        quantitatives et qualitatives robustes.
        """
        
        self.add_text(summary_text)
        self.story.append(PageBreak())
    
    def add_fundamental_analysis(self):
        """Ajoute l'analyse fondamentale d√©taill√©e"""
        self.add_section_title("2. Analyse Fondamentale")
        
        info = self.data.get('info', {})
        
        self.add_subsection_title("2.1 M√©triques de Valorisation")
        
        # M√©triques cl√©s
        pe_ratio = info.get('trailingPE', 'N/A')
        pb_ratio = info.get('priceToBook', 'N/A')
        ps_ratio = info.get('priceToSalesTrailing12Months', 'N/A')
        ev_ebitda = info.get('enterpriseToEbitda', 'N/A')
        
        valuation_text = f"""
        <b>Ratios de Valorisation Actuels</b>
        
        ‚Ä¢ P/E Ratio (Price-to-Earnings) : {pe_ratio}
        ‚Ä¢ P/B Ratio (Price-to-Book) : {pb_ratio}
        ‚Ä¢ P/S Ratio (Price-to-Sales) : {ps_ratio}
        ‚Ä¢ EV/EBITDA : {ev_ebitda}
        
        <b>Interpr√©tation des Ratios</b>
        
        Les ratios de valorisation actuels sont analys√©s dans le contexte sectoriel et historique. 
        Un P/E √©lev√© peut indiquer des attentes de croissance √©lev√©es ou une sur√©valuation, tandis 
        qu'un P/B faible peut sugg√©rer une opportunit√© de valeur ou des probl√®mes fondamentaux.
        """
        
        self.add_text(valuation_text)
        
        self.add_subsection_title("2.2 Sant√© Financi√®re")
        
        # M√©triques de sant√© financi√®re
        debt_to_equity = info.get('debtToEquity', 'N/A')
        current_ratio = info.get('currentRatio', 'N/A')
        roe = info.get('returnOnEquity', 'N/A')
        roa = info.get('returnOnAssets', 'N/A')
        
        financial_health_text = f"""
        <b>Indicateurs de Solidit√© Financi√®re</b>
        
        ‚Ä¢ Ratio d'endettement (Debt/Equity) : {debt_to_equity}
        ‚Ä¢ Ratio de liquidit√© courante : {current_ratio}
        ‚Ä¢ Retour sur fonds propres (ROE) : {roe}
        ‚Ä¢ Retour sur actifs (ROA) : {roa}
        
        <b>Analyse de la Structure Financi√®re</b>
        
        L'analyse de la structure financi√®re r√©v√®le la capacit√© de l'entreprise √† g√©n√©rer des rendements 
        pour les actionnaires tout en maintenant un niveau de risque appropri√©. Un ratio d'endettement 
        √©quilibr√© et des ratios de rentabilit√© √©lev√©s indiquent g√©n√©ralement une gestion efficace.
        """
        
        self.add_text(financial_health_text)
        
        self.add_subsection_title("2.3 Croissance et Profitabilit√©")
        
        revenue_growth = info.get('revenueGrowth', 'N/A')
        earnings_growth = info.get('earningsGrowth', 'N/A')
        profit_margin = info.get('profitMargins', 'N/A')
        
        growth_text = f"""
        <b>M√©triques de Croissance</b>
        
        ‚Ä¢ Croissance du chiffre d'affaires : {revenue_growth}
        ‚Ä¢ Croissance des b√©n√©fices : {earnings_growth}
        ‚Ä¢ Marge b√©n√©ficiaire : {profit_margin}
        
        <b>Tendances de Performance</b>
        
        L'analyse des tendances de croissance permet d'√©valuer la capacit√© de l'entreprise √† 
        augmenter ses revenus et sa rentabilit√© de mani√®re durable. Une croissance constante 
        et des marges en am√©lioration sont des signaux positifs pour les investisseurs.
        """
        
        self.add_text(growth_text)
        self.story.append(PageBreak())
    
    def add_technical_analysis(self):
        """Ajoute l'analyse technique compl√®te"""
        self.add_section_title("3. Analyse Technique")
        
        hist = self.data.get('history')
        if hist is None or hist.empty:
            self.add_text("Donn√©es historiques insuffisantes pour l'analyse technique.")
            return
        
        self.add_subsection_title("3.1 Analyse des Tendances")
        
        # Calcul des moyennes mobiles
        hist['MA20'] = hist['Close'].rolling(20).mean()
        hist['MA50'] = hist['Close'].rolling(50).mean()
        hist['MA200'] = hist['Close'].rolling(200).mean()
        
        current_price = hist['Close'].iloc[-1]
        ma20 = hist['MA20'].iloc[-1] if not pd.isna(hist['MA20'].iloc[-1]) else 0
        ma50 = hist['MA50'].iloc[-1] if not pd.isna(hist['MA50'].iloc[-1]) else 0
        ma200 = hist['MA200'].iloc[-1] if not pd.isna(hist['MA200'].iloc[-1]) else 0
        
        # D√©termination de la tendance
        trend = "HAUSSE" if current_price > ma20 > ma50 > ma200 else "BAISSE" if current_price < ma20 < ma50 < ma200 else "LAT√âRALE"
        
        technical_text = f"""
        <b>Analyse des Moyennes Mobiles</b>
        
        ‚Ä¢ Prix actuel : ${current_price:.2f}
        ‚Ä¢ Moyenne mobile 20 jours : ${ma20:.2f}
        ‚Ä¢ Moyenne mobile 50 jours : ${ma50:.2f}
        ‚Ä¢ Moyenne mobile 200 jours : ${ma200:.2f}
        
        <b>Signal de Tendance : {trend}</b>
        
        L'analyse des moyennes mobiles indique une tendance {trend.lower()}. La position relative 
        du prix par rapport aux diff√©rentes moyennes mobiles fournit des indications sur la force 
        et la direction de la tendance actuelle.
        """
        
        self.add_text(technical_text)
        
        # Cr√©er le graphique des moyennes mobiles
        self.create_moving_averages_chart(hist)
        
        self.add_subsection_title("3.2 Indicateurs de Momentum")
        
        # Calcul du RSI
        def calculate_rsi(prices, periods=14):
            delta = prices.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=periods).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=periods).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            return rsi
        
        hist['RSI'] = calculate_rsi(hist['Close'])
        current_rsi = hist['RSI'].iloc[-1] if not pd.isna(hist['RSI'].iloc[-1]) else 50
        
        rsi_interpretation = "SURVENTE" if current_rsi < 30 else "SURACHAT" if current_rsi > 70 else "NEUTRE"
        
        momentum_text = f"""
        <b>Indicateur RSI (Relative Strength Index)</b>
        
        ‚Ä¢ RSI actuel : {current_rsi:.1f}
        ‚Ä¢ Interpr√©tation : {rsi_interpretation}
        
        <b>Analyse du Momentum</b>
        
        Le RSI mesure la vitesse et l'ampleur des mouvements de prix. Un RSI au-dessus de 70 
        indique g√©n√©ralement une condition de surachat, tandis qu'un RSI en dessous de 30 
        sugg√®re une condition de survente. Le niveau actuel de {current_rsi:.1f} indique 
        une situation {rsi_interpretation.lower()}.
        """
        
        self.add_text(momentum_text)
        
        self.add_subsection_title("3.3 Support et R√©sistance")
        
        # Calcul des niveaux de support et r√©sistance
        recent_high = hist['High'].rolling(20).max().iloc[-1]
        recent_low = hist['Low'].rolling(20).min().iloc[-1]
        
        support_resistance_text = f"""
        <b>Niveaux Techniques Cl√©s</b>
        
        ‚Ä¢ R√©sistance proche : ${recent_high:.2f}
        ‚Ä¢ Support proche : ${recent_low:.2f}
        ‚Ä¢ Range actuel : ${recent_high - recent_low:.2f} (${(recent_high - recent_low)/current_price*100:.1f}%)
        
        <b>Analyse des Niveaux</b>
        
        Les niveaux de support et r√©sistance identifi√©s sont bas√©s sur les extremes r√©cents 
        et peuvent servir de points de r√©f√©rence pour les d√©cisions d'entr√©e et de sortie. 
        Une rupture au-dessus de la r√©sistance ou en dessous du support peut signaler 
        un changement de tendance.
        """
        
        self.add_text(support_resistance_text)
        self.story.append(PageBreak())
    
    def add_quantitative_metrics(self):
        """Ajoute les m√©triques quantitatives avanc√©es"""
        self.add_section_title("4. M√©triques Quantitatives")
        
        hist = self.data.get('history')
        if hist is None or hist.empty:
            self.add_text("Donn√©es insuffisantes pour l'analyse quantitative.")
            return
        
        # Calcul de la volatilit√©
        returns = hist['Close'].pct_change().dropna()
        volatility_daily = returns.std()
        volatility_annual = volatility_daily * np.sqrt(252)
        
        # Calcul du Sharpe ratio (approximatif avec risk-free rate = 2%)
        risk_free_rate = 0.02
        mean_return = returns.mean() * 252
        sharpe_ratio = (mean_return - risk_free_rate) / volatility_annual if volatility_annual > 0 else 0
        
        # Calcul de la Value at Risk (VaR)
        var_95 = np.percentile(returns, 5)
        var_99 = np.percentile(returns, 1)
        
        quant_text = f"""
        <b>Analyse de Volatilit√©</b>
        
        ‚Ä¢ Volatilit√© quotidienne : {volatility_daily*100:.2f}%
        ‚Ä¢ Volatilit√© annualis√©e : {volatility_annual*100:.2f}%
        ‚Ä¢ Ratio de Sharpe (approx.) : {sharpe_ratio:.2f}
        
        <b>Mesures de Risque</b>
        
        ‚Ä¢ Value at Risk 95% : {var_95*100:.2f}% (perte quotidienne maximum avec 95% de confiance)
        ‚Ä¢ Value at Risk 99% : {var_99*100:.2f}% (perte quotidienne maximum avec 99% de confiance)
        
        <b>Interpr√©tation Quantitative</b>
        
        Ces m√©triques quantitatives fournissent une √©valuation objective du profil risque-rendement. 
        Un ratio de Sharpe √©lev√© indique un meilleur rendement ajust√© au risque, tandis que les 
        mesures VaR quantifient les pertes potentielles dans des sc√©narios d√©favorables.
        """
        
        self.add_text(quant_text)
        self.story.append(PageBreak())
    
    def add_risk_analysis(self):
        """Ajoute l'analyse d√©taill√©e des risques"""
        self.add_section_title("5. Analyse des Risques")
        
        info = self.data.get('info', {})
        
        risk_text = f"""
        <b>Risques Sp√©cifiques √† l'Entreprise</b>
        
        ‚Ä¢ Risque sectoriel : Exposition aux cycles √©conomiques du secteur {info.get('sector', 'N/A')}
        ‚Ä¢ Risque de concentration : D√©pendance aux march√©s principaux
        ‚Ä¢ Risque de change : Impact des fluctuations mon√©taires
        ‚Ä¢ Risque r√©glementaire : √âvolution de l'environnement r√©glementaire
        
        <b>Risques de March√©</b>
        
        ‚Ä¢ Risque syst√©mique : Corr√©lation avec les indices de march√©
        ‚Ä¢ Risque de liquidit√© : Capacit√© √† acheter/vendre sans impact sur le prix
        ‚Ä¢ Risque de taux d'int√©r√™t : Sensibilit√© aux variations des taux
        ‚Ä¢ Risque g√©opolitique : Impact des √©v√©nements internationaux
        
        <b>Mitigation des Risques</b>
        
        Strat√©gies recommand√©es pour r√©duire l'exposition aux risques identifi√©s :
        
        ‚Ä¢ Diversification sectorielle et g√©ographique
        ‚Ä¢ Utilisation d'instruments de couverture appropri√©s
        ‚Ä¢ Surveillance continue des indicateurs d'alerte pr√©coce
        ‚Ä¢ Ajustement de la taille de position selon le profil de risque
        """
        
        self.add_text(risk_text)
        self.story.append(PageBreak())
    
    def add_sector_comparison(self):
        """Ajoute la comparaison sectorielle"""
        self.add_section_title("6. Comparaison Sectorielle")
        
        info = self.data.get('info', {})
        sector = info.get('sector', 'Non disponible')
        
        sector_text = f"""
        <b>Positionnement Sectoriel</b>
        
        Secteur d'activit√© : {sector}
        Industrie : {info.get('industry', 'Non disponible')}
        
        <b>Performance Sectorielle</b>
        
        Cette section analyserait normalement la performance relative au secteur, mais n√©cessite 
        des donn√©es de comparaison sectorielles √©tendues. Les √©l√©ments cl√©s incluent :
        
        ‚Ä¢ Comparaison des multiples de valorisation avec les pairs
        ‚Ä¢ Performance relative aux indices sectoriels
        ‚Ä¢ Positionnement concurrentiel
        ‚Ä¢ Tendances et perspectives sectorielles
        
        <b>Avantages Concurrentiels</b>
        
        ‚Ä¢ Position de march√© et part de march√©
        ‚Ä¢ Diff√©renciation produit/service
        ‚Ä¢ Efficacit√© op√©rationnelle
        ‚Ä¢ Innovation et R&D
        ‚Ä¢ Force de la marque et fid√©lit√© client
        """
        
        self.add_text(sector_text)
        self.story.append(PageBreak())
    
    def add_valuation_analysis(self):
        """Ajoute l'analyse de valorisation"""
        self.add_section_title("7. Analyse de Valorisation")
        
        info = self.data.get('info', {})
        
        # Prix cible bas√© sur les multiples
        current_price = info.get('currentPrice', 0)
        target_mean = info.get('targetMeanPrice', current_price)
        target_high = info.get('targetHighPrice', current_price)
        target_low = info.get('targetLowPrice', current_price)
        
        valuation_text = f"""
        <b>Valorisation Actuelle</b>
        
        ‚Ä¢ Prix actuel : ${current_price:.2f}
        ‚Ä¢ Prix cible moyen : ${target_mean:.2f}
        ‚Ä¢ Prix cible haut : ${target_high:.2f}
        ‚Ä¢ Prix cible bas : ${target_low:.2f}
        
        <b>M√©thodes de Valorisation</b>
        
        1. **Analyse des Comparables (Trading Multiples)**
           - P/E, P/B, EV/EBITDA vs pairs sectoriels
           - Ajustements pour taille, croissance, profitabilit√©
        
        2. **Mod√®le de Flux de Tr√©sorerie Actualis√©s (DCF)**
           - Projection des flux de tr√©sorerie futurs
           - Taux d'actualisation bas√© sur le WACC
           - Valeur terminale et sensibilit√© aux hypoth√®ses
        
        3. **Analyse de la Valeur d'Actif**
           - Valeur comptable ajust√©e
           - Valeur de liquidation
           - Actifs intangibles et goodwill
        
        <b>Conclusion sur la Valorisation</b>
        
        L'analyse multi-m√©thodes sugg√®re une valorisation actuelle qui peut √™tre consid√©r√©e 
        dans le contexte des fondamentaux de l'entreprise et des conditions de march√©.
        """
        
        self.add_text(valuation_text)
        self.story.append(PageBreak())
    
    def add_dividend_analysis(self):
        """Ajoute l'analyse des dividendes"""
        self.add_section_title("8. Analyse des Dividendes")
        
        info = self.data.get('info', {})
        
        dividend_yield = info.get('dividendYield', 0)
        dividend_rate = info.get('dividendRate', 0)
        payout_ratio = info.get('payoutRatio', 0)
        
        dividend_text = f"""
        <b>Politique de Dividende</b>
        
        ‚Ä¢ Rendement dividende : {dividend_yield*100:.2f}% (si applicable)
        ‚Ä¢ Taux de dividende annuel : ${dividend_rate:.2f}
        ‚Ä¢ Ratio de distribution : {payout_ratio*100:.1f}%
        
        <b>Analyse de Durabilit√©</b>
        
        L'analyse de durabilit√© des dividendes prend en compte :
        
        ‚Ä¢ Couverture par les b√©n√©fices (ratio de distribution)
        ‚Ä¢ Stabilit√© et croissance historique des dividendes
        ‚Ä¢ Flux de tr√©sorerie libre disponible
        ‚Ä¢ Politique de distribution de l'entreprise
        ‚Ä¢ Comparaison avec les standards sectoriels
        
        <b>Attractivit√© pour les Investisseurs</b>
        
        Pour les investisseurs orient√©s revenus, cette action {'offre' if dividend_yield > 0.02 else 'offre peu de'} 
        attractivit√© en termes de rendement dividende. La politique de dividende doit √™tre 
        √©valu√©e dans le contexte de la strat√©gie globale d'investissement.
        """
        
        self.add_text(dividend_text)
        self.story.append(PageBreak())
    
    def add_insider_activity(self):
        """Ajoute l'analyse de l'activit√© des initi√©s"""
        self.add_section_title("9. Activit√© des Initi√©s")
        
        insider_text = """
        <b>Transactions des Initi√©s</b>
        
        L'analyse de l'activit√© des initi√©s (dirigeants, administrateurs, actionnaires > 10%) 
        fournit des insights sur la confiance interne dans les perspectives de l'entreprise.
        
        <b>Indicateurs Cl√©s</b>
        
        ‚Ä¢ Volume et fr√©quence des achats/ventes
        ‚Ä¢ Timing des transactions par rapport aux annonces
        ‚Ä¢ Concentration des transactions par type d'initi√©
        ‚Ä¢ Montants relatifs aux positions d√©tenues
        
        <b>Interpr√©tation</b>
        
        - **Achats massifs d'initi√©s** : Signal g√©n√©ralement positif
        - **Ventes importantes** : Peuvent indiquer des pr√©occupations ou des besoins de liquidit√©
        - **Transactions programm√©es** : Moins significatives que les transactions discr√©tionnaires
        
        <b>Note M√©thodologique</b>
        
        Cette analyse n√©cessite l'acc√®s √† des donn√©es sp√©cialis√©es sur les transactions d'initi√©s 
        (formulaires SEC 4, 3, 5) qui ne sont pas incluses dans cette version du rapport.
        """
        
        self.add_text(insider_text)
        self.story.append(PageBreak())
    
    def add_analyst_consensus(self):
        """Ajoute l'analyse du consensus des analystes"""
        self.add_section_title("10. Consensus des Analystes")
        
        info = self.data.get('info', {})
        
        recommendation = info.get('recommendationMean', 'N/A')
        target_price = info.get('targetMeanPrice', 'N/A')
        num_analysts = info.get('numberOfAnalystOpinions', 'N/A')
        
        analyst_text = f"""
        <b>Recommandations des Analystes</b>
        
        ‚Ä¢ Score de recommandation moyen : {recommendation}
        ‚Ä¢ Prix cible moyen : ${target_price} (si disponible)
        ‚Ä¢ Nombre d'analystes couvrant l'action : {num_analysts}
        
        <b>√âchelle de Recommandation</b>
        
        1.0 - 1.5 : Achat Fort (Strong Buy)
        1.5 - 2.5 : Achat (Buy)
        2.5 - 3.5 : Conserver (Hold)
        3.5 - 4.5 : Vendre (Sell)
        4.5 - 5.0 : Vente Forte (Strong Sell)
        
        <b>Analyse du Consensus</b>
        
        Le consensus des analystes refl√®te l'opinion collective des professionnels qui suivent 
        r√©guli√®rement l'action. Cependant, il est important de noter que :
        
        ‚Ä¢ Les recommandations peuvent √™tre biais√©es par les relations business
        ‚Ä¢ Le consensus peut √™tre en retard sur les d√©veloppements r√©cents
        ‚Ä¢ La dispersion des opinions est aussi importante que la moyenne
        ‚Ä¢ Les r√©visions r√©centes ont plus de poids que les anciennes recommandations
        
        <b>Utilisation Pratique</b>
        
        Le consensus doit √™tre utilis√© comme un point de r√©f√©rence, non comme une v√©rit√© absolue. 
        Il est particuli√®rement utile pour identifier les changements de sentiment et les 
        divergences potentielles avec l'analyse fondamentale ind√©pendante.
        """
        
        self.add_text(analyst_text)
        self.story.append(PageBreak())
    
    def add_final_recommendations(self):
        """Ajoute les recommandations finales"""
        self.add_section_title("11. Recommandations Finales")
        
        info = self.data.get('info', {})
        current_price = info.get('currentPrice', 0)
        
        # Synth√®se simplifi√©e pour la d√©monstration
        recommendations_text = f"""
        <b>Synth√®se de l'Analyse D√©taill√©e</b>
        
        Cette analyse exhaustive de {self.symbol} a examin√© 10 dimensions critiques pour 
        l'investissement. La m√©thodologie combine analyse fondamentale, technique, quantitative 
        et qualitative pour fournir une √©valuation compl√®te.
        
        <b>Points Forts Identifi√©s</b>
        
        ‚Ä¢ Analyse fondamentale : M√©triques de valorisation et sant√© financi√®re
        ‚Ä¢ Analyse technique : Tendances et momentum actuels
        ‚Ä¢ Profil quantitatif : Ratio risque-rendement et m√©triques statistiques
        ‚Ä¢ Positionnement sectoriel : Avantages concurrentiels potentiels
        
        <b>Risques Principaux</b>
        
        ‚Ä¢ Risques sp√©cifiques √† l'entreprise et au secteur
        ‚Ä¢ Risques de march√© et macro√©conomiques
        ‚Ä¢ Risques de valorisation et de liquidit√©
        ‚Ä¢ Risques r√©glementaires et g√©opolitiques
        
        <b>Recommandation d'Allocation</b>
        
        Sur la base de cette analyse d√©taill√©e, une allocation de **3-7%** d'un portefeuille 
        diversifi√© pourrait √™tre appropri√©e, en fonction du profil de risque de l'investisseur 
        et des objectifs d'investissement.
        
        <b>Strat√©gie d'Impl√©mentation</b>
        
        ‚Ä¢ **Entr√©e progressive** : √âtaler les achats sur plusieurs s√©ances
        ‚Ä¢ **Monitoring continu** : Surveiller les indicateurs cl√©s identifi√©s
        ‚Ä¢ **R√©√©valuation p√©riodique** : Revoir l'analyse trimestriellement
        ‚Ä¢ **Gestion du risque** : Utiliser des stops appropri√©s
        
        <b>Horizon d'Investissement Recommand√©</b>
        
        Cette analyse est optimis√©e pour un horizon d'investissement de **6-18 mois**, 
        avec des points de r√©√©valuation trimestriels pour ajuster la strat√©gie selon 
        l'√©volution des fondamentaux et conditions de march√©.
        """
        
        self.add_text(recommendations_text)
    
    def create_moving_averages_chart(self, hist):
        """Cr√©e un graphique des moyennes mobiles"""
        try:
            plt.style.use('seaborn-v0_8')
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # Graphique des prix et moyennes mobiles
            ax.plot(hist.index[-100:], hist['Close'][-100:], label='Prix', linewidth=2, color='#1f77b4')
            ax.plot(hist.index[-100:], hist['MA20'][-100:], label='MA20', linewidth=1.5, color='#ff7f0e', alpha=0.8)
            ax.plot(hist.index[-100:], hist['MA50'][-100:], label='MA50', linewidth=1.5, color='#2ca02c', alpha=0.8)
            ax.plot(hist.index[-100:], hist['MA200'][-100:], label='MA200', linewidth=1.5, color='#d62728', alpha=0.8)
            
            ax.set_title(f'Analyse Technique - {self.symbol}', fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel('Date', fontsize=12)
            ax.set_ylabel('Prix ($)', fontsize=12)
            ax.legend(loc='upper left')
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            chart_path = self.charts_dir / f"technical_analysis_{self.symbol}.png"
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.add_chart(str(chart_path))
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation graphique technique: {e}")