
// ===================================================================
// üóÉÔ∏è SCHEMA PRINCIPAL FinAnalytics - Organis√© par domaines m√©tier  
// ===================================================================

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===================================================================
// üîê AUTHENTIFICATION ET UTILISATEURS
// ===================================================================

enum UserRole {
  USER
  ADMIN
  
  @@map("user_roles")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime
  updatedAt     DateTime
  
  // Relations auth
  sessions      Session[]
  accounts      Account[]
  
  // Relations business
  subscription  Subscription?
  credits       Credits?
  creditTransactions CreditTransaction[]
  reports       Report[]
  reportSchedules ReportSchedule[]
  apiKeys       ApiKey[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ===================================================================
// üí≥ ABONNEMENTS ET CR√âDITS
// ===================================================================

enum SubscriptionPlan {
  FREE
  STARTER      // 29‚Ç¨/mois - 100 cr√©dits
  PROFESSIONAL // 99‚Ç¨/mois - 500 cr√©dits  
  ENTERPRISE   // 299‚Ç¨/mois - 2000 cr√©dits

  @@map("subscription_plans")
}

enum BillingCycle {
  MONTHLY
  YEARLY

  @@map("billing_cycles")
}

model Subscription {
  id           String           @id @default(cuid())
  userId       String           @unique
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  plan         SubscriptionPlan @default(FREE)
  billingCycle BillingCycle     @default(MONTHLY)
  
  // Acc√®s API exclusif aux abonn√©s
  apiAccess    Boolean          @default(false)
  
  isActive     Boolean          @default(true)
  startedAt    DateTime         @default(now())
  renewsAt     DateTime?
  cancelledAt  DateTime?
  
  // M√©tadonn√©es Polar
  polarSubscriptionId String?
  polarCustomerId     String?
  polarProductId      String?
  
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("subscriptions")
}

model Credits {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance   Int      @default(0)
  
  // Cr√©dits mensuels qui se rechargent pour les abonn√©s
  monthlyCredits  Int      @default(0)
  lastRecharge    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("credits")
}

enum TransactionType {
  SUBSCRIPTION_RECHARGE // Recharge mensuelle abonnement
  PACK_PURCHASE        // Achat pack cr√©dits
  REPORT_USAGE         // Utilisation pour rapport
  REFUND              // Remboursement
  BONUS               // Bonus admin
  EXPIRY              // Expiration

  @@map("transaction_types")
}

model CreditTransaction {
  id             String          @id @default(cuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type           TransactionType
  amount         Int             // Positif pour achat/bonus, n√©gatif pour usage
  description    String
  balanceAfter   Int
  
  // Relations optionnelles
  reportId       String?
  report         Report?         @relation(fields: [reportId], references: [id])
  
  // M√©tadonn√©es Polar/Stripe
  externalId     String?         // ID transaction externe
  metadata       Json?
  
  createdAt      DateTime        @default(now())

  @@map("credit_transactions")
}

// ===================================================================
// üìä RAPPORTS ET G√âN√âRATION
// ===================================================================

enum ReportStatus {
  PENDING     // En attente de traitement
  PROCESSING  // En cours de g√©n√©ration
  COMPLETED   // Termin√© avec succ√®s
  FAILED      // √âchec de g√©n√©ration
  CANCELLED   // Annul√© par l'utilisateur

  @@map("report_status")
}

enum AssetType {
  ETF
  INDEX
  STOCK
  MARKET

  @@map("asset_types")
}

enum ReportType {
  BASELINE     // Rapport simple
  DEEP_ANALYSIS // Analyse approfondie
  PRICER       // Pricer custom ou g√©n√©rique
  BENCHMARK    // Comparaisons

  @@map("report_types")
}

model Report {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Configuration du rapport
  title           String
  assetType       AssetType
  assetSymbol     String       // Ex: AAPL, CAC40, etc.
  reportType      ReportType   @default(BASELINE)
  
  // Options de rapport
  includeBenchmark Boolean     @default(false)
  includeApiExport Boolean     @default(false)
  
  // Co√ªt et statut
  creditsCost     Int
  status          ReportStatus @default(PENDING)
  
  // Fichiers g√©n√©r√©s
  pdfPath         String?
  csvPath         String?
  
  // M√©tadonn√©es de traitement
  processingStartedAt DateTime?
  completedAt         DateTime?
  failureReason       String?
  
  // Relations
  transactions    CreditTransaction[]
  schedule        ReportSchedule?
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("reports")
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY

  @@map("schedule_frequencies")
}

model ReportSchedule {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  reportId        String            @unique
  report          Report            @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // Configuration r√©currence
  frequency       ScheduleFrequency
  hour            Int               @default(9)  // Heure d'ex√©cution (0-23)
  dayOfWeek       Int?              // Pour WEEKLY (1=Lundi, 7=Dimanche)
  dayOfMonth      Int?              // Pour MONTHLY (1-31)
  
  // Contr√¥le
  isActive        Boolean           @default(true)
  nextRunAt       DateTime
  lastRunAt       DateTime?
  
  // Estimation co√ªts
  estimatedMonthlyCost Int
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("report_schedules")
}

// ===================================================================
// üîë API KEYS ET ACC√àS
// ===================================================================

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String   // Nom donn√© par l'utilisateur
  keyHash     String   @unique // Hash de la cl√© (jamais la cl√© en clair)
  keyPrefix   String   // Pr√©fixe visible pour l'utilisateur (ex: "fa_live_abc...")
  
  // Permissions et limites
  isActive    Boolean  @default(true)
  rateLimit   Int      @default(100) // Requ√™tes par heure
  
  // M√©tadonn√©es
  lastUsedAt  DateTime?
  usageCount  Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?

  @@map("api_keys")
}

enum ApiRequestStatus {
  SUCCESS
  RATE_LIMITED
  UNAUTHORIZED
  INSUFFICIENT_CREDITS
  ERROR

  @@map("api_request_status")
}

model ApiRequest {
  id              String           @id @default(cuid())
  userId          String
  
  // D√©tails de la requ√™te
  endpoint        String
  method          String
  ipAddress       String?
  userAgent       String?
  
  // Authentification
  apiKeyId        String?
  
  // R√©sultat
  status          ApiRequestStatus
  responseTime    Int?             // en millisecondes
  creditsUsed     Int              @default(0)
  
  // M√©tadonn√©es
  requestSize     Int?             // taille en bytes
  responseSize    Int?             // taille en bytes
  errorMessage    String?
  
  createdAt       DateTime         @default(now())

  @@index([userId, createdAt])
  @@index([apiKeyId, createdAt])
  @@map("api_requests")
}
